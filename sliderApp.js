!function(e){var n={};function A(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,A),l.l=!0,l.exports}A.m=e,A.c=n,A.d=function(e,n,t){A.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},A.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},A.t=function(e,n){if(1&n&&(e=A(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(A.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)A.d(t,l,function(n){return e[n]}.bind(null,l));return t},A.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return A.d(n,"a",n),n},A.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},A.p="",A(A.s=3)}([function(e,n,A){"use strict";var t;function l(e,n,A){if(!A||typeof A.value!==t.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+n+"> is not a method!");return{configurable:t.boolTrue,get:function(){var e=A.value.bind(this);return Object.defineProperty(this,n,{value:e,configurable:t.boolTrue,writable:t.boolTrue}),e}}}Object.defineProperty(n,"__esModule",{value:!0}),function(e){e.typeOfFunction="function",e.boolTrue=!0}(t||(t={})),n.bind=l,n.default=l},function(e,n,A){"use strict";var t,l,i,o,s,a,C=(t="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",l="efa1edc583c1f284fab660aec46821ceb492971e",i=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:28}},1:{start:{line:6,column:8},end:{line:6,column:30}},2:{start:{line:9,column:8},end:{line:9,column:63}},3:{start:{line:9,column:45},end:{line:9,column:61}},4:{start:{line:12,column:8},end:{line:12,column:32}},5:{start:{line:15,column:8},end:{line:15,column:80}},6:{start:{line:15,column:61},end:{line:15,column:78}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:18},end:{line:4,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:21},end:{line:7,column:5}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:20},end:{line:10,column:5}},line:8},3:{name:"(anonymous_3)",decl:{start:{line:9,column:31},end:{line:9,column:32}},loc:{start:{line:9,column:45},end:{line:9,column:61}},line:9},4:{name:"(anonymous_4)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:18},end:{line:13,column:5}},line:11},5:{name:"(anonymous_5)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:20},end:{line:16,column:5}},line:14},6:{name:"(anonymous_6)",decl:{start:{line:15,column:47},end:{line:15,column:48}},loc:{start:{line:15,column:61},end:{line:15,column:78}},line:15}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts"],names:[],mappings:"AAGA,MAAM,CAAC,OAAO,OAAO,aAAa;IAGhC;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,SAAS,CAAC,IAAmB;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,SAAS,CAAC,EAAqB;QACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAEM,WAAW,CAAC,EAAqB;QACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;IAC1E,CAAC;CACF",sourcesContent:["import { sliderOptions } from '../model/sliderOptions';\n\ntype observersCallback = (data: sliderOptions) => void;\nexport default class EventObserver {\n  private observers: observersCallback[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  public getSubscribers(): observersCallback[] {\n    return this.observers;\n  }\n\n  public broadcast(data: sliderOptions): void {\n    this.observers.forEach(subscriber => subscriber(data));\n  }\n\n  public subscribe(fn: observersCallback): void {\n    this.observers.push(fn);\n  }\n\n  public unsubscribe(fn: observersCallback): void {\n    this.observers = this.observers.filter(subscriber => subscriber !== fn);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[o="__coverage__"]||(i[o]={}))[t]&&a[t].hash===l?a[t]:(s.hash=l,a[t]=s));class r{constructor(){C.f[0]++,C.s[0]++,this.observers=[]}getSubscribers(){return C.f[1]++,C.s[1]++,this.observers}broadcast(e){C.f[2]++,C.s[2]++,this.observers.forEach(n=>(C.f[3]++,C.s[3]++,n(e)))}subscribe(e){C.f[4]++,C.s[4]++,this.observers.push(e)}unsubscribe(e){C.f[5]++,C.s[5]++,this.observers=this.observers.filter(n=>(C.f[6]++,C.s[6]++,n!==e))}}var c=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts",n="9d0aacd0bcbcb9a5f580aca10fab4862eda5bd1b",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:38}},1:{start:{line:6,column:8},end:{line:6,column:42}},2:{start:{line:9,column:67},end:{line:9,column:74}},3:{start:{line:11,column:24},end:{line:11,column:42}},4:{start:{line:12,column:32},end:{line:12,column:94}},5:{start:{line:13,column:8},end:{line:16,column:9}},6:{start:{line:14,column:12},end:{line:14,column:36}},7:{start:{line:15,column:12},end:{line:15,column:32}},8:{start:{line:17,column:8},end:{line:34,column:9}},9:{start:{line:18,column:49},end:{line:18,column:88}},10:{start:{line:19,column:12},end:{line:22,column:13}},11:{start:{line:20,column:16},end:{line:20,column:45}},12:{start:{line:21,column:16},end:{line:21,column:36}},13:{start:{line:23,column:26},end:{line:23,column:81}},14:{start:{line:24,column:12},end:{line:24,column:70}},15:{start:{line:25,column:12},end:{line:32,column:13}},16:{start:{line:26,column:16},end:{line:28,column:17}},17:{start:{line:27,column:20},end:{line:27,column:77}},18:{start:{line:30,column:17},end:{line:32,column:13}},19:{start:{line:31,column:16},end:{line:31,column:74}},20:{start:{line:33,column:12},end:{line:33,column:32}},21:{start:{line:35,column:45},end:{line:35,column:90}},22:{start:{line:36,column:8},end:{line:39,column:9}},23:{start:{line:37,column:12},end:{line:37,column:41}},24:{start:{line:38,column:12},end:{line:38,column:32}},25:{start:{line:40,column:8},end:{line:40,column:58}},26:{start:{line:41,column:8},end:{line:43,column:9}},27:{start:{line:42,column:12},end:{line:42,column:32}},28:{start:{line:44,column:8},end:{line:44,column:28}},29:{start:{line:47,column:30},end:{line:47,column:36}},30:{start:{line:48,column:46},end:{line:48,column:90}},31:{start:{line:49,column:8},end:{line:51,column:9}},32:{start:{line:50,column:12},end:{line:50,column:88}},33:{start:{line:52,column:8},end:{line:52,column:29}},34:{start:{line:55,column:27},end:{line:55,column:32}},35:{start:{line:56,column:8},end:{line:58,column:9}},36:{start:{line:57,column:12},end:{line:57,column:31}},37:{start:{line:59,column:8},end:{line:61,column:9}},38:{start:{line:60,column:12},end:{line:60,column:31}},39:{start:{line:62,column:8},end:{line:62,column:28}},40:{start:{line:65,column:24},end:{line:65,column:33}},41:{start:{line:66,column:8},end:{line:68,column:9}},42:{start:{line:67,column:12},end:{line:67,column:27}},43:{start:{line:69,column:8},end:{line:71,column:9}},44:{start:{line:70,column:12},end:{line:70,column:21}},45:{start:{line:72,column:8},end:{line:72,column:20}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:32},end:{line:4,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:28},end:{line:7,column:5}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:32},end:{line:45,column:5}},line:8},3:{name:"(anonymous_3)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:45},end:{line:53,column:5}},line:46},4:{name:"(anonymous_4)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:41},end:{line:63,column:5}},line:54},5:{name:"(anonymous_5)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:38},end:{line:73,column:5}},line:64}},branchMap:{0:{loc:{start:{line:12,column:32},end:{line:12,column:94}},type:"binary-expr",locations:[{start:{line:12,column:32},end:{line:12,column:61}},{start:{line:12,column:65},end:{line:12,column:94}}],line:12},1:{loc:{start:{line:13,column:8},end:{line:16,column:9}},type:"if",locations:[{start:{line:13,column:8},end:{line:16,column:9}},{start:{line:13,column:8},end:{line:16,column:9}}],line:13},2:{loc:{start:{line:17,column:8},end:{line:34,column:9}},type:"if",locations:[{start:{line:17,column:8},end:{line:34,column:9}},{start:{line:17,column:8},end:{line:34,column:9}}],line:17},3:{loc:{start:{line:18,column:49},end:{line:18,column:88}},type:"binary-expr",locations:[{start:{line:18,column:49},end:{line:18,column:60}},{start:{line:18,column:64},end:{line:18,column:88}}],line:18},4:{loc:{start:{line:19,column:12},end:{line:22,column:13}},type:"if",locations:[{start:{line:19,column:12},end:{line:22,column:13}},{start:{line:19,column:12},end:{line:22,column:13}}],line:19},5:{loc:{start:{line:25,column:12},end:{line:32,column:13}},type:"if",locations:[{start:{line:25,column:12},end:{line:32,column:13}},{start:{line:25,column:12},end:{line:32,column:13}}],line:25},6:{loc:{start:{line:26,column:16},end:{line:28,column:17}},type:"if",locations:[{start:{line:26,column:16},end:{line:28,column:17}},{start:{line:26,column:16},end:{line:28,column:17}}],line:26},7:{loc:{start:{line:30,column:17},end:{line:32,column:13}},type:"if",locations:[{start:{line:30,column:17},end:{line:32,column:13}},{start:{line:30,column:17},end:{line:32,column:13}}],line:30},8:{loc:{start:{line:35,column:45},end:{line:35,column:90}},type:"binary-expr",locations:[{start:{line:35,column:45},end:{line:35,column:56}},{start:{line:35,column:60},end:{line:35,column:90}}],line:35},9:{loc:{start:{line:36,column:8},end:{line:39,column:9}},type:"if",locations:[{start:{line:36,column:8},end:{line:39,column:9}},{start:{line:36,column:8},end:{line:39,column:9}}],line:36},10:{loc:{start:{line:41,column:8},end:{line:43,column:9}},type:"if",locations:[{start:{line:41,column:8},end:{line:43,column:9}},{start:{line:41,column:8},end:{line:43,column:9}}],line:41},11:{loc:{start:{line:48,column:46},end:{line:48,column:90}},type:"binary-expr",locations:[{start:{line:48,column:46},end:{line:48,column:81}},{start:{line:48,column:85},end:{line:48,column:90}}],line:48},12:{loc:{start:{line:49,column:8},end:{line:51,column:9}},type:"if",locations:[{start:{line:49,column:8},end:{line:51,column:9}},{start:{line:49,column:8},end:{line:51,column:9}}],line:49},13:{loc:{start:{line:56,column:8},end:{line:58,column:9}},type:"if",locations:[{start:{line:56,column:8},end:{line:58,column:9}},{start:{line:56,column:8},end:{line:58,column:9}}],line:56},14:{loc:{start:{line:59,column:8},end:{line:61,column:9}},type:"if",locations:[{start:{line:59,column:8},end:{line:61,column:9}},{start:{line:59,column:8},end:{line:61,column:9}}],line:59},15:{loc:{start:{line:66,column:8},end:{line:68,column:9}},type:"if",locations:[{start:{line:66,column:8},end:{line:68,column:9}},{start:{line:66,column:8},end:{line:68,column:9}}],line:66},16:{loc:{start:{line:69,column:8},end:{line:71,column:9}},type:"if",locations:[{start:{line:69,column:8},end:{line:71,column:9}},{start:{line:69,column:8},end:{line:71,column:9}}],line:69}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts"],names:[],mappings:"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",sourcesContent:["export default class Validators {\n  public static isValidNumber(value: number): boolean {\n    return Number.isFinite(value);\n  }\n\n  public static isBoolean(value: boolean): boolean {\n    return typeof value === 'boolean';\n  }\n\n  public static verifyValue(options: {\n    newValue: number;\n    index: number;\n    currentValues: number[];\n    min: number;\n    max: number;\n    step: number;\n  }): number {\n    const { newValue, index, currentValues, min, max, step } = options;\n    let checkedValue;\n    const modulus = (max - min) % step;\n    const handlerNotMoved = newValue === currentValues[0] || newValue === currentValues[1];\n    if (handlerNotMoved) {\n      checkedValue = newValue;\n      return checkedValue;\n    }\n    if (min < 0) {\n      const lastSectionIsSmallerThanStep = modulus > 0 && newValue > max - modulus;\n      if (lastSectionIsSmallerThanStep) {\n        checkedValue = max - modulus;\n        return checkedValue;\n      }\n      const shift = Math.abs(min) - Math.round(Math.abs(min) / step) * step;\n      checkedValue = Math.round(newValue / step) * step - shift;\n      if (shift >= 0) {\n        if (newValue < currentValues[index]) {\n          checkedValue = Math.ceil(newValue / step) * step - shift;\n        }\n      } else if (newValue > currentValues[index]) {\n        checkedValue = Math.floor(newValue / step) * step - shift;\n      }\n      return checkedValue;\n    }\n    const lastSectionIsSmallerThanStep = modulus > 0 && newValue + min > max - modulus;\n    if (lastSectionIsSmallerThanStep) {\n      checkedValue = max - modulus;\n      return checkedValue;\n    }\n    checkedValue = Math.round(newValue / step) * step;\n    if ((checkedValue - min) % step !== 0) {\n      checkedValue += min;\n    }\n    return checkedValue;\n  }\n\n  public static verifyMinMaxValues(values: number[], range: boolean): number[] {\n    const checkedValues = values;\n    const minValueIsGreaterThanMaxValue = checkedValues[0] > checkedValues[1] && range;\n    if (minValueIsGreaterThanMaxValue) {\n      [checkedValues[0], checkedValues[1]] = [checkedValues[1], checkedValues[0]];\n    }\n    return checkedValues;\n  }\n\n  public static verifyLimits(value: number, min: number, max: number): number {\n    let checkedValue = value;\n    if (checkedValue < min) {\n      checkedValue = min;\n    }\n    if (checkedValue > max) {\n      checkedValue = max;\n    }\n    return checkedValue;\n  }\n\n  public static verifyStep(step: number, min: number, max: number): number {\n    const maxStep = max - min;\n    if (step > maxStep) {\n      return maxStep;\n    }\n    if (step <= 0) {\n      return 1;\n    }\n    return step;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class u{static isValidNumber(e){return c.f[0]++,c.s[0]++,Number.isFinite(e)}static isBoolean(e){return c.f[1]++,c.s[1]++,"boolean"==typeof e}static verifyValue(e){c.f[2]++;const{newValue:n,index:A,currentValues:t,min:l,max:i,step:o}=(c.s[2]++,e);let s;const a=(c.s[3]++,(i-l)%o),C=(c.s[4]++,c.b[0][0]++,n===t[0]||(c.b[0][1]++,n===t[1]));if(c.s[5]++,C)return c.b[1][0]++,c.s[6]++,s=n,c.s[7]++,s;if(c.b[1][1]++,c.s[8]++,l<0){c.b[2][0]++;const e=(c.s[9]++,c.b[3][0]++,a>0&&(c.b[3][1]++,n>i-a));if(c.s[10]++,e)return c.b[4][0]++,c.s[11]++,s=i-a,c.s[12]++,s;c.b[4][1]++;const C=(c.s[13]++,Math.abs(l)-Math.round(Math.abs(l)/o)*o);return c.s[14]++,s=Math.round(n/o)*o-C,c.s[15]++,C>=0?(c.b[5][0]++,c.s[16]++,n<t[A]?(c.b[6][0]++,c.s[17]++,s=Math.ceil(n/o)*o-C):c.b[6][1]++):(c.b[5][1]++,c.s[18]++,n>t[A]?(c.b[7][0]++,c.s[19]++,s=Math.floor(n/o)*o-C):c.b[7][1]++),c.s[20]++,s}c.b[2][1]++;const r=(c.s[21]++,c.b[8][0]++,a>0&&(c.b[8][1]++,n+l>i-a));return c.s[22]++,r?(c.b[9][0]++,c.s[23]++,s=i-a,c.s[24]++,s):(c.b[9][1]++,c.s[25]++,s=Math.round(n/o)*o,c.s[26]++,(s-l)%o!=0?(c.b[10][0]++,c.s[27]++,s+=l):c.b[10][1]++,c.s[28]++,s)}static verifyMinMaxValues(e,n){c.f[3]++;const A=(c.s[29]++,e),t=(c.s[30]++,c.b[11][0]++,A[0]>A[1]&&(c.b[11][1]++,n));return c.s[31]++,t?(c.b[12][0]++,c.s[32]++,[A[0],A[1]]=[A[1],A[0]]):c.b[12][1]++,c.s[33]++,A}static verifyLimits(e,n,A){c.f[4]++;let t=(c.s[34]++,e);return c.s[35]++,t<n?(c.b[13][0]++,c.s[36]++,t=n):c.b[13][1]++,c.s[37]++,t>A?(c.b[14][0]++,c.s[38]++,t=A):c.b[14][1]++,c.s[39]++,t}static verifyStep(e,n,A){c.f[5]++;const t=(c.s[40]++,A-n);return c.s[41]++,e>t?(c.b[15][0]++,c.s[42]++,t):(c.b[15][1]++,c.s[43]++,e<=0?(c.b[16][0]++,c.s[44]++,1):(c.b[16][1]++,c.s[45]++,e))}}var d=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",n="d1fe4eda24f08d802fddb2fa763924101ec1bdf9",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",statementMap:{0:{start:{line:5,column:8},end:{line:5,column:44}},1:{start:{line:6,column:8},end:{line:15,column:10}},2:{start:{line:16,column:8},end:{line:16,column:27}},3:{start:{line:19,column:86},end:{line:19,column:95}},4:{start:{line:20,column:8},end:{line:21,column:29}},5:{start:{line:21,column:12},end:{line:21,column:29}},6:{start:{line:22,column:8},end:{line:23,column:29}},7:{start:{line:23,column:12},end:{line:23,column:29}},8:{start:{line:24,column:8},end:{line:25,column:35}},9:{start:{line:25,column:12},end:{line:25,column:35}},10:{start:{line:26,column:8},end:{line:27,column:44}},11:{start:{line:27,column:12},end:{line:27,column:44}},12:{start:{line:28,column:8},end:{line:29,column:31}},13:{start:{line:29,column:12},end:{line:29,column:31}},14:{start:{line:30,column:8},end:{line:31,column:36}},15:{start:{line:31,column:12},end:{line:31,column:36}},16:{start:{line:32,column:8},end:{line:33,column:38}},17:{start:{line:33,column:12},end:{line:33,column:38}},18:{start:{line:34,column:8},end:{line:35,column:36}},19:{start:{line:35,column:12},end:{line:35,column:36}},20:{start:{line:38,column:8},end:{line:38,column:28}},21:{start:{line:41,column:8},end:{line:43,column:9}},22:{start:{line:42,column:12},end:{line:42,column:88}},23:{start:{line:44,column:8},end:{line:44,column:32}},24:{start:{line:47,column:8},end:{line:52,column:9}},25:{start:{line:48,column:12},end:{line:48,column:35}},26:{start:{line:51,column:12},end:{line:51,column:33}},27:{start:{line:53,column:8},end:{line:58,column:11}},28:{start:{line:61,column:8},end:{line:63,column:9}},29:{start:{line:62,column:12},end:{line:62,column:88}},30:{start:{line:64,column:8},end:{line:66,column:9}},31:{start:{line:65,column:12},end:{line:65,column:56}},32:{start:{line:67,column:8},end:{line:67,column:32}},33:{start:{line:70,column:8},end:{line:75,column:9}},34:{start:{line:71,column:12},end:{line:71,column:35}},35:{start:{line:74,column:12},end:{line:74,column:33}},36:{start:{line:76,column:8},end:{line:81,column:11}},37:{start:{line:84,column:8},end:{line:84,column:99}},38:{start:{line:85,column:8},end:{line:85,column:33}},39:{start:{line:88,column:8},end:{line:93,column:9}},40:{start:{line:89,column:12},end:{line:89,column:90}},41:{start:{line:92,column:12},end:{line:92,column:34}},42:{start:{line:94,column:8},end:{line:97,column:11}},43:{start:{line:100,column:8},end:{line:110,column:11}},44:{start:{line:101,column:28},end:{line:108,column:13}},45:{start:{line:109,column:12},end:{line:109,column:51}},46:{start:{line:111,column:8},end:{line:111,column:125}},47:{start:{line:111,column:63},end:{line:111,column:123}},48:{start:{line:112,column:8},end:{line:112,column:104}},49:{start:{line:113,column:8},end:{line:113,column:35}},50:{start:{line:116,column:28},end:{line:121,column:10}},51:{start:{line:117,column:12},end:{line:119,column:13}},52:{start:{line:118,column:16},end:{line:118,column:29}},53:{start:{line:120,column:12},end:{line:120,column:21}},54:{start:{line:122,column:8},end:{line:135,column:11}},55:{start:{line:123,column:12},end:{line:133,column:13}},56:{start:{line:124,column:32},end:{line:131,column:17}},57:{start:{line:132,column:16},end:{line:132,column:55}},58:{start:{line:134,column:12},end:{line:134,column:25}},59:{start:{line:136,column:8},end:{line:136,column:113}},60:{start:{line:136,column:51},end:{line:136,column:111}},61:{start:{line:137,column:8},end:{line:137,column:98}},62:{start:{line:138,column:8},end:{line:140,column:11}},63:{start:{line:143,column:8},end:{line:143,column:39}},64:{start:{line:146,column:8},end:{line:151,column:9}},65:{start:{line:147,column:12},end:{line:147,column:47}},66:{start:{line:150,column:12},end:{line:150,column:56}},67:{start:{line:152,column:8},end:{line:155,column:11}},68:{start:{line:158,column:8},end:{line:158,column:37}},69:{start:{line:161,column:8},end:{line:166,column:9}},70:{start:{line:162,column:12},end:{line:162,column:42}},71:{start:{line:165,column:12},end:{line:165,column:51}},72:{start:{line:167,column:8},end:{line:170,column:11}},73:{start:{line:173,column:8},end:{line:173,column:38}},74:{start:{line:176,column:8},end:{line:181,column:9}},75:{start:{line:177,column:12},end:{line:177,column:43}},76:{start:{line:180,column:12},end:{line:180,column:52}},77:{start:{line:182,column:8},end:{line:184,column:11}},78:{start:{line:187,column:8},end:{line:187,column:37}},79:{start:{line:190,column:8},end:{line:195,column:9}},80:{start:{line:191,column:12},end:{line:191,column:42}},81:{start:{line:194,column:12},end:{line:194,column:51}},82:{start:{line:196,column:8},end:{line:198,column:11}},83:{start:{line:201,column:86},end:{line:201,column:93}},84:{start:{line:202,column:8},end:{line:203,column:29}},85:{start:{line:203,column:12},end:{line:203,column:29}},86:{start:{line:204,column:8},end:{line:205,column:29}},87:{start:{line:205,column:12},end:{line:205,column:29}},88:{start:{line:206,column:8},end:{line:207,column:31}},89:{start:{line:207,column:12},end:{line:207,column:31}},90:{start:{line:208,column:8},end:{line:212,column:9}},91:{start:{line:209,column:12},end:{line:210,column:43}},92:{start:{line:210,column:16},end:{line:210,column:43}},93:{start:{line:211,column:12},end:{line:211,column:35}},94:{start:{line:213,column:8},end:{line:214,column:36}},95:{start:{line:214,column:12},end:{line:214,column:36}},96:{start:{line:215,column:8},end:{line:216,column:44}},97:{start:{line:216,column:12},end:{line:216,column:44}},98:{start:{line:217,column:8},end:{line:218,column:38}},99:{start:{line:218,column:12},end:{line:218,column:38}},100:{start:{line:219,column:8},end:{line:220,column:36}},101:{start:{line:220,column:12},end:{line:220,column:36}},102:{start:{line:223,column:8},end:{line:223,column:43}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:4},end:{line:4,column:5}},loc:{start:{line:4,column:25},end:{line:17,column:5}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:22},end:{line:36,column:5}},line:18},2:{name:"(anonymous_2)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:17},end:{line:39,column:5}},line:37},3:{name:"(anonymous_3)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:13},end:{line:45,column:5}},line:40},4:{name:"(anonymous_4)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:16},end:{line:59,column:5}},line:46},5:{name:"(anonymous_5)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:13},end:{line:68,column:5}},line:60},6:{name:"(anonymous_6)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:16},end:{line:82,column:5}},line:69},7:{name:"(anonymous_7)",decl:{start:{line:83,column:4},end:{line:83,column:5}},loc:{start:{line:83,column:14},end:{line:86,column:5}},line:83},8:{name:"(anonymous_8)",decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:18},end:{line:98,column:5}},line:87},9:{name:"(anonymous_9)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:16},end:{line:114,column:5}},line:99},10:{name:"(anonymous_10)",decl:{start:{line:100,column:54},end:{line:100,column:55}},loc:{start:{line:100,column:72},end:{line:110,column:9}},line:100},11:{name:"(anonymous_11)",decl:{start:{line:111,column:54},end:{line:111,column:55}},loc:{start:{line:111,column:63},end:{line:111,column:123}},line:111},12:{name:"(anonymous_12)",decl:{start:{line:115,column:4},end:{line:115,column:5}},loc:{start:{line:115,column:22},end:{line:141,column:5}},line:115},13:{name:"(anonymous_13)",decl:{start:{line:116,column:39},end:{line:116,column:40}},loc:{start:{line:116,column:48},end:{line:121,column:9}},line:116},14:{name:"(anonymous_14)",decl:{start:{line:122,column:42},end:{line:122,column:43}},loc:{start:{line:122,column:60},end:{line:135,column:9}},line:122},15:{name:"(anonymous_15)",decl:{start:{line:136,column:42},end:{line:136,column:43}},loc:{start:{line:136,column:51},end:{line:136,column:111}},line:136},16:{name:"(anonymous_16)",decl:{start:{line:142,column:4},end:{line:142,column:5}},loc:{start:{line:142,column:21},end:{line:144,column:5}},line:142},17:{name:"(anonymous_17)",decl:{start:{line:145,column:4},end:{line:145,column:5}},loc:{start:{line:145,column:29},end:{line:156,column:5}},line:145},18:{name:"(anonymous_18)",decl:{start:{line:157,column:4},end:{line:157,column:5}},loc:{start:{line:157,column:15},end:{line:159,column:5}},line:157},19:{name:"(anonymous_19)",decl:{start:{line:160,column:4},end:{line:160,column:5}},loc:{start:{line:160,column:20},end:{line:171,column:5}},line:160},20:{name:"(anonymous_20)",decl:{start:{line:172,column:4},end:{line:172,column:5}},loc:{start:{line:172,column:16},end:{line:174,column:5}},line:172},21:{name:"(anonymous_21)",decl:{start:{line:175,column:4},end:{line:175,column:5}},loc:{start:{line:175,column:21},end:{line:185,column:5}},line:175},22:{name:"(anonymous_22)",decl:{start:{line:186,column:4},end:{line:186,column:5}},loc:{start:{line:186,column:15},end:{line:188,column:5}},line:186},23:{name:"(anonymous_23)",decl:{start:{line:189,column:4},end:{line:189,column:5}},loc:{start:{line:189,column:20},end:{line:199,column:5}},line:189},24:{name:"(anonymous_24)",decl:{start:{line:200,column:4},end:{line:200,column:5}},loc:{start:{line:200,column:18},end:{line:221,column:5}},line:200},25:{name:"(anonymous_25)",decl:{start:{line:222,column:4},end:{line:222,column:5}},loc:{start:{line:222,column:32},end:{line:224,column:5}},line:222}},branchMap:{0:{loc:{start:{line:20,column:8},end:{line:21,column:29}},type:"if",locations:[{start:{line:20,column:8},end:{line:21,column:29}},{start:{line:20,column:8},end:{line:21,column:29}}],line:20},1:{loc:{start:{line:22,column:8},end:{line:23,column:29}},type:"if",locations:[{start:{line:22,column:8},end:{line:23,column:29}},{start:{line:22,column:8},end:{line:23,column:29}}],line:22},2:{loc:{start:{line:24,column:8},end:{line:25,column:35}},type:"if",locations:[{start:{line:24,column:8},end:{line:25,column:35}},{start:{line:24,column:8},end:{line:25,column:35}}],line:24},3:{loc:{start:{line:26,column:8},end:{line:27,column:44}},type:"if",locations:[{start:{line:26,column:8},end:{line:27,column:44}},{start:{line:26,column:8},end:{line:27,column:44}}],line:26},4:{loc:{start:{line:28,column:8},end:{line:29,column:31}},type:"if",locations:[{start:{line:28,column:8},end:{line:29,column:31}},{start:{line:28,column:8},end:{line:29,column:31}}],line:28},5:{loc:{start:{line:30,column:8},end:{line:31,column:36}},type:"if",locations:[{start:{line:30,column:8},end:{line:31,column:36}},{start:{line:30,column:8},end:{line:31,column:36}}],line:30},6:{loc:{start:{line:32,column:8},end:{line:33,column:38}},type:"if",locations:[{start:{line:32,column:8},end:{line:33,column:38}},{start:{line:32,column:8},end:{line:33,column:38}}],line:32},7:{loc:{start:{line:34,column:8},end:{line:35,column:36}},type:"if",locations:[{start:{line:34,column:8},end:{line:35,column:36}},{start:{line:34,column:8},end:{line:35,column:36}}],line:34},8:{loc:{start:{line:41,column:8},end:{line:43,column:9}},type:"if",locations:[{start:{line:41,column:8},end:{line:43,column:9}},{start:{line:41,column:8},end:{line:43,column:9}}],line:41},9:{loc:{start:{line:47,column:8},end:{line:52,column:9}},type:"if",locations:[{start:{line:47,column:8},end:{line:52,column:9}},{start:{line:47,column:8},end:{line:52,column:9}}],line:47},10:{loc:{start:{line:61,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:61,column:8},end:{line:63,column:9}},{start:{line:61,column:8},end:{line:63,column:9}}],line:61},11:{loc:{start:{line:64,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:66,column:9}},{start:{line:64,column:8},end:{line:66,column:9}}],line:64},12:{loc:{start:{line:70,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:70,column:8},end:{line:75,column:9}},{start:{line:70,column:8},end:{line:75,column:9}}],line:70},13:{loc:{start:{line:88,column:8},end:{line:93,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:93,column:9}},{start:{line:88,column:8},end:{line:93,column:9}}],line:88},14:{loc:{start:{line:117,column:12},end:{line:119,column:13}},type:"if",locations:[{start:{line:117,column:12},end:{line:119,column:13}},{start:{line:117,column:12},end:{line:119,column:13}}],line:117},15:{loc:{start:{line:123,column:12},end:{line:133,column:13}},type:"if",locations:[{start:{line:123,column:12},end:{line:133,column:13}},{start:{line:123,column:12},end:{line:133,column:13}}],line:123},16:{loc:{start:{line:146,column:8},end:{line:151,column:9}},type:"if",locations:[{start:{line:146,column:8},end:{line:151,column:9}},{start:{line:146,column:8},end:{line:151,column:9}}],line:146},17:{loc:{start:{line:161,column:8},end:{line:166,column:9}},type:"if",locations:[{start:{line:161,column:8},end:{line:166,column:9}},{start:{line:161,column:8},end:{line:166,column:9}}],line:161},18:{loc:{start:{line:176,column:8},end:{line:181,column:9}},type:"if",locations:[{start:{line:176,column:8},end:{line:181,column:9}},{start:{line:176,column:8},end:{line:181,column:9}}],line:176},19:{loc:{start:{line:190,column:8},end:{line:195,column:9}},type:"if",locations:[{start:{line:190,column:8},end:{line:195,column:9}},{start:{line:190,column:8},end:{line:195,column:9}}],line:190},20:{loc:{start:{line:202,column:8},end:{line:203,column:29}},type:"if",locations:[{start:{line:202,column:8},end:{line:203,column:29}},{start:{line:202,column:8},end:{line:203,column:29}}],line:202},21:{loc:{start:{line:204,column:8},end:{line:205,column:29}},type:"if",locations:[{start:{line:204,column:8},end:{line:205,column:29}},{start:{line:204,column:8},end:{line:205,column:29}}],line:204},22:{loc:{start:{line:206,column:8},end:{line:207,column:31}},type:"if",locations:[{start:{line:206,column:8},end:{line:207,column:31}},{start:{line:206,column:8},end:{line:207,column:31}}],line:206},23:{loc:{start:{line:208,column:8},end:{line:212,column:9}},type:"if",locations:[{start:{line:208,column:8},end:{line:212,column:9}},{start:{line:208,column:8},end:{line:212,column:9}}],line:208},24:{loc:{start:{line:209,column:12},end:{line:210,column:43}},type:"if",locations:[{start:{line:209,column:12},end:{line:210,column:43}},{start:{line:209,column:12},end:{line:210,column:43}}],line:209},25:{loc:{start:{line:213,column:8},end:{line:214,column:36}},type:"if",locations:[{start:{line:213,column:8},end:{line:214,column:36}},{start:{line:213,column:8},end:{line:214,column:36}}],line:213},26:{loc:{start:{line:215,column:8},end:{line:216,column:44}},type:"if",locations:[{start:{line:215,column:8},end:{line:216,column:44}},{start:{line:215,column:8},end:{line:216,column:44}}],line:215},27:{loc:{start:{line:217,column:8},end:{line:218,column:38}},type:"if",locations:[{start:{line:217,column:8},end:{line:218,column:38}},{start:{line:217,column:8},end:{line:218,column:38}}],line:217},28:{loc:{start:{line:219,column:8},end:{line:220,column:36}},type:"if",locations:[{start:{line:219,column:8},end:{line:220,column:36}},{start:{line:219,column:8},end:{line:220,column:36}}],line:219}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts"],names:[],mappings:"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",sourcesContent:["import EventObserver from '../observer/observer';\nimport { sliderOptions } from './sliderOptions';\nimport { definedOptions } from './definedOptions';\nimport Validators from './Validators';\n\nexport default class MainModel {\n  public observer = new EventObserver();\n\n  private options: definedOptions = {\n    min: 0,\n    max: 100,\n    step: 1,\n    values: [10, 20],\n    isVertical: false,\n    hasRange: true,\n    hasLabels: true,\n    hasScale: false,\n  };\n\n  constructor(options: sliderOptions) {\n    this.init(options);\n  }\n\n  public update(valueData: sliderOptions): void {\n    const { min, max, values, isVertical, step, hasRange, hasLabels, hasScale } = valueData;\n    if (min !== undefined) this.setMin(min);\n    if (max !== undefined) this.setMax(max);\n    if (values !== undefined) this.setValues(values);\n    if (isVertical !== undefined) this.setOrientation(isVertical);\n    if (step !== undefined) this.setStep(step);\n    if (hasRange !== undefined) this.setRange(hasRange);\n    if (hasLabels !== undefined) this.setLabels(hasLabels);\n    if (hasScale !== undefined) this.setScale(hasScale);\n  }\n\n  public getOptions(): definedOptions {\n    return this.options;\n  }\n\n  public getMin(): number {\n    if (this.options.min > this.options.max) {\n      [this.options.max, this.options.min] = [this.options.min, this.options.max];\n    }\n    return this.options.min;\n  }\n\n  public setMin(min: number): void {\n    if (Validators.isValidNumber(min)) {\n      this.options.min = min;\n    } else {\n      this.options.min = 0;\n    }\n    this.broadcastUpdates({\n      min: this.getMin(),\n      max: this.getMax(),\n      values: this.getValues(),\n      step: this.getStep(),\n    });\n  }\n\n  public getMax(): number {\n    if (this.options.max < this.options.min) {\n      [this.options.max, this.options.min] = [this.options.min, this.options.max];\n    }\n    if (this.options.max === this.options.min) {\n      return this.options.max + this.options.step;\n    }\n    return this.options.max;\n  }\n\n  public setMax(max: number): void {\n    if (Validators.isValidNumber(max)) {\n      this.options.max = max;\n    } else {\n      this.options.max = 0;\n    }\n    this.broadcastUpdates({\n      min: this.getMin(),\n      max: this.getMax(),\n      values: this.getValues(),\n      step: this.getStep(),\n    });\n  }\n\n  public getStep(): number {\n    this.options.step = Validators.verifyStep(this.options.step, this.getMin(), this.getMax());\n    return this.options.step;\n  }\n\n  public setStep(step: number): void {\n    if (Validators.isValidNumber(step)) {\n      this.options.step = Validators.verifyStep(step, this.getMin(), this.getMax());\n    } else {\n      this.options.step = 1;\n    }\n    this.broadcastUpdates({\n      step: this.getStep(),\n      values: this.getValues(),\n    });\n  }\n\n  public getValues(): number[] {\n    this.options.values = this.options.values.map((value, index) => {\n      const options = {\n        newValue: value,\n        index,\n        currentValues: this.options.values,\n        min: this.getMin(),\n        max: this.getMax(),\n        step: this.getStep(),\n      };\n      return Validators.verifyValue(options);\n    });\n    this.options.values = this.options.values.map(value =>\n      Validators.verifyLimits(value, this.getMin(), this.getMax()),\n    );\n    this.options.values = Validators.verifyMinMaxValues(this.options.values, this.options.hasRange);\n    return this.options.values;\n  }\n\n  public setValues(values: number[]): void {\n    let checkedValues = values.map(value => {\n      if (Validators.isValidNumber(value)) {\n        return value;\n      }\n      return 0;\n    });\n    checkedValues = checkedValues.map((value, index) => {\n      if (value !== this.options.values[index]) {\n        const options = {\n          newValue: value,\n          index,\n          currentValues: this.options.values,\n          min: this.getMin(),\n          max: this.getMax(),\n          step: this.getStep(),\n        };\n        return Validators.verifyValue(options);\n      }\n      return value;\n    });\n    checkedValues = checkedValues.map(value =>\n      Validators.verifyLimits(value, this.getMin(), this.getMax()),\n    );\n    this.options.values = Validators.verifyMinMaxValues(checkedValues, this.options.hasRange);\n    this.broadcastUpdates({\n      values: this.options.values,\n    });\n  }\n\n  public getOrientation(): boolean {\n    return this.options.isVertical;\n  }\n\n  public setOrientation(vertical: boolean): void {\n    if (Validators.isBoolean(vertical)) {\n      this.options.isVertical = vertical;\n    } else {\n      this.options.isVertical = Boolean(vertical);\n    }\n    this.broadcastUpdates({\n      values: this.getValues(),\n      isVertical: this.getOrientation(),\n    });\n  }\n\n  public getRange(): boolean {\n    return this.options.hasRange;\n  }\n\n  public setRange(range: boolean): void {\n    if (Validators.isBoolean(range)) {\n      this.options.hasRange = range;\n    } else {\n      this.options.hasRange = Boolean(range);\n    }\n    this.broadcastUpdates({\n      values: this.getValues(),\n      hasRange: this.getRange(),\n    });\n  }\n\n  public getLabels(): boolean {\n    return this.options.hasLabels;\n  }\n\n  public setLabels(label: boolean): void {\n    if (Validators.isBoolean(label)) {\n      this.options.hasLabels = label;\n    } else {\n      this.options.hasLabels = Boolean(label);\n    }\n    this.broadcastUpdates({\n      hasLabels: this.getLabels(),\n    });\n  }\n\n  public getScale(): boolean {\n    return this.options.hasScale;\n  }\n\n  public setScale(scale: boolean): void {\n    if (Validators.isBoolean(scale)) {\n      this.options.hasScale = scale;\n    } else {\n      this.options.hasScale = Boolean(scale);\n    }\n    this.broadcastUpdates({\n      hasScale: this.getScale(),\n    });\n  }\n\n  private init(options: sliderOptions): void {\n    const { min, max, values, isVertical, step, hasRange, hasLabels, hasScale } = options;\n    if (max !== undefined) this.setMax(max);\n    if (min !== undefined) this.setMin(min);\n    if (step !== undefined) this.setStep(step);\n    if (values !== undefined) {\n      if (values.length === 1) values.push(values[0] + 1);\n      this.setValues(values);\n    }\n    if (hasRange !== undefined) this.setRange(hasRange);\n    if (isVertical !== undefined) this.setOrientation(isVertical);\n    if (hasLabels !== undefined) this.setLabels(hasLabels);\n    if (hasScale !== undefined) this.setScale(hasScale);\n  }\n\n  private broadcastUpdates(valueData: sliderOptions): void {\n    this.observer.broadcast(valueData);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class m{constructor(e){d.f[0]++,d.s[0]++,this.observer=new r,d.s[1]++,this.options={min:0,max:100,step:1,values:[10,20],isVertical:!1,hasRange:!0,hasLabels:!0,hasScale:!1},d.s[2]++,this.init(e)}update(e){d.f[1]++;const{min:n,max:A,values:t,isVertical:l,step:i,hasRange:o,hasLabels:s,hasScale:a}=(d.s[3]++,e);d.s[4]++,void 0!==n?(d.b[0][0]++,d.s[5]++,this.setMin(n)):d.b[0][1]++,d.s[6]++,void 0!==A?(d.b[1][0]++,d.s[7]++,this.setMax(A)):d.b[1][1]++,d.s[8]++,void 0!==t?(d.b[2][0]++,d.s[9]++,this.setValues(t)):d.b[2][1]++,d.s[10]++,void 0!==l?(d.b[3][0]++,d.s[11]++,this.setOrientation(l)):d.b[3][1]++,d.s[12]++,void 0!==i?(d.b[4][0]++,d.s[13]++,this.setStep(i)):d.b[4][1]++,d.s[14]++,void 0!==o?(d.b[5][0]++,d.s[15]++,this.setRange(o)):d.b[5][1]++,d.s[16]++,void 0!==s?(d.b[6][0]++,d.s[17]++,this.setLabels(s)):d.b[6][1]++,d.s[18]++,void 0!==a?(d.b[7][0]++,d.s[19]++,this.setScale(a)):d.b[7][1]++}getOptions(){return d.f[2]++,d.s[20]++,this.options}getMin(){return d.f[3]++,d.s[21]++,this.options.min>this.options.max?(d.b[8][0]++,d.s[22]++,[this.options.max,this.options.min]=[this.options.min,this.options.max]):d.b[8][1]++,d.s[23]++,this.options.min}setMin(e){d.f[4]++,d.s[24]++,u.isValidNumber(e)?(d.b[9][0]++,d.s[25]++,this.options.min=e):(d.b[9][1]++,d.s[26]++,this.options.min=0),d.s[27]++,this.broadcastUpdates({min:this.getMin(),max:this.getMax(),values:this.getValues(),step:this.getStep()})}getMax(){return d.f[5]++,d.s[28]++,this.options.max<this.options.min?(d.b[10][0]++,d.s[29]++,[this.options.max,this.options.min]=[this.options.min,this.options.max]):d.b[10][1]++,d.s[30]++,this.options.max===this.options.min?(d.b[11][0]++,d.s[31]++,this.options.max+this.options.step):(d.b[11][1]++,d.s[32]++,this.options.max)}setMax(e){d.f[6]++,d.s[33]++,u.isValidNumber(e)?(d.b[12][0]++,d.s[34]++,this.options.max=e):(d.b[12][1]++,d.s[35]++,this.options.max=0),d.s[36]++,this.broadcastUpdates({min:this.getMin(),max:this.getMax(),values:this.getValues(),step:this.getStep()})}getStep(){return d.f[7]++,d.s[37]++,this.options.step=u.verifyStep(this.options.step,this.getMin(),this.getMax()),d.s[38]++,this.options.step}setStep(e){d.f[8]++,d.s[39]++,u.isValidNumber(e)?(d.b[13][0]++,d.s[40]++,this.options.step=u.verifyStep(e,this.getMin(),this.getMax())):(d.b[13][1]++,d.s[41]++,this.options.step=1),d.s[42]++,this.broadcastUpdates({step:this.getStep(),values:this.getValues()})}getValues(){return d.f[9]++,d.s[43]++,this.options.values=this.options.values.map((e,n)=>{d.f[10]++;const A=(d.s[44]++,{newValue:e,index:n,currentValues:this.options.values,min:this.getMin(),max:this.getMax(),step:this.getStep()});return d.s[45]++,u.verifyValue(A)}),d.s[46]++,this.options.values=this.options.values.map(e=>(d.f[11]++,d.s[47]++,u.verifyLimits(e,this.getMin(),this.getMax()))),d.s[48]++,this.options.values=u.verifyMinMaxValues(this.options.values,this.options.hasRange),d.s[49]++,this.options.values}setValues(e){d.f[12]++;let n=(d.s[50]++,e.map(e=>(d.f[13]++,d.s[51]++,u.isValidNumber(e)?(d.b[14][0]++,d.s[52]++,e):(d.b[14][1]++,d.s[53]++,0))));d.s[54]++,n=n.map((e,n)=>{if(d.f[14]++,d.s[55]++,e!==this.options.values[n]){d.b[15][0]++;const A=(d.s[56]++,{newValue:e,index:n,currentValues:this.options.values,min:this.getMin(),max:this.getMax(),step:this.getStep()});return d.s[57]++,u.verifyValue(A)}return d.b[15][1]++,d.s[58]++,e}),d.s[59]++,n=n.map(e=>(d.f[15]++,d.s[60]++,u.verifyLimits(e,this.getMin(),this.getMax()))),d.s[61]++,this.options.values=u.verifyMinMaxValues(n,this.options.hasRange),d.s[62]++,this.broadcastUpdates({values:this.options.values})}getOrientation(){return d.f[16]++,d.s[63]++,this.options.isVertical}setOrientation(e){d.f[17]++,d.s[64]++,u.isBoolean(e)?(d.b[16][0]++,d.s[65]++,this.options.isVertical=e):(d.b[16][1]++,d.s[66]++,this.options.isVertical=Boolean(e)),d.s[67]++,this.broadcastUpdates({values:this.getValues(),isVertical:this.getOrientation()})}getRange(){return d.f[18]++,d.s[68]++,this.options.hasRange}setRange(e){d.f[19]++,d.s[69]++,u.isBoolean(e)?(d.b[17][0]++,d.s[70]++,this.options.hasRange=e):(d.b[17][1]++,d.s[71]++,this.options.hasRange=Boolean(e)),d.s[72]++,this.broadcastUpdates({values:this.getValues(),hasRange:this.getRange()})}getLabels(){return d.f[20]++,d.s[73]++,this.options.hasLabels}setLabels(e){d.f[21]++,d.s[74]++,u.isBoolean(e)?(d.b[18][0]++,d.s[75]++,this.options.hasLabels=e):(d.b[18][1]++,d.s[76]++,this.options.hasLabels=Boolean(e)),d.s[77]++,this.broadcastUpdates({hasLabels:this.getLabels()})}getScale(){return d.f[22]++,d.s[78]++,this.options.hasScale}setScale(e){d.f[23]++,d.s[79]++,u.isBoolean(e)?(d.b[19][0]++,d.s[80]++,this.options.hasScale=e):(d.b[19][1]++,d.s[81]++,this.options.hasScale=Boolean(e)),d.s[82]++,this.broadcastUpdates({hasScale:this.getScale()})}init(e){d.f[24]++;const{min:n,max:A,values:t,isVertical:l,step:i,hasRange:o,hasLabels:s,hasScale:a}=(d.s[83]++,e);d.s[84]++,void 0!==A?(d.b[20][0]++,d.s[85]++,this.setMax(A)):d.b[20][1]++,d.s[86]++,void 0!==n?(d.b[21][0]++,d.s[87]++,this.setMin(n)):d.b[21][1]++,d.s[88]++,void 0!==i?(d.b[22][0]++,d.s[89]++,this.setStep(i)):d.b[22][1]++,d.s[90]++,void 0!==t?(d.b[23][0]++,d.s[91]++,1===t.length?(d.b[24][0]++,d.s[92]++,t.push(t[0]+1)):d.b[24][1]++,d.s[93]++,this.setValues(t)):d.b[23][1]++,d.s[94]++,void 0!==o?(d.b[25][0]++,d.s[95]++,this.setRange(o)):d.b[25][1]++,d.s[96]++,void 0!==l?(d.b[26][0]++,d.s[97]++,this.setOrientation(l)):d.b[26][1]++,d.s[98]++,void 0!==s?(d.b[27][0]++,d.s[99]++,this.setLabels(s)):d.b[27][1]++,d.s[100]++,void 0!==a?(d.b[28][0]++,d.s[101]++,this.setScale(a)):d.b[28][1]++}broadcastUpdates(e){d.f[25]++,d.s[102]++,this.observer.broadcast(e)}}var h=A(0),p=A.n(h),f=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",n="cbf70ae50c46c5ea0d0caf60f8417595e7eec6f1",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:51}},1:{start:{line:4,column:8},end:{line:4,column:20}},2:{start:{line:7,column:8},end:{line:7,column:26}},3:{start:{line:10,column:8},end:{line:10,column:45}},4:{start:{line:13,column:26},end:{line:15,column:72}},5:{start:{line:16,column:8},end:{line:16,column:25}},6:{start:{line:19,column:38},end:{line:19,column:68}},7:{start:{line:20,column:8},end:{line:20,column:37}},8:{start:{line:23,column:8},end:{line:23,column:50}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:18},end:{line:5,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:17},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:25},end:{line:11,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:37},end:{line:17,column:5}},line:12},4:{name:"(anonymous_4)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:41},end:{line:21,column:5}},line:18},5:{name:"(anonymous_5)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:11},end:{line:24,column:5}},line:22}},branchMap:{0:{loc:{start:{line:13,column:26},end:{line:15,column:72}},type:"cond-expr",locations:[{start:{line:14,column:14},end:{line:14,column:74}},{start:{line:15,column:14},end:{line:15,column:72}}],line:13},1:{loc:{start:{line:19,column:38},end:{line:19,column:68}},type:"cond-expr",locations:[{start:{line:19,column:51},end:{line:19,column:57}},{start:{line:19,column:60},end:{line:19,column:68}}],line:19}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts"],names:[],mappings:"AAAA,MAAM,CAAC,OAAO,OAAO,SAAS;IAG5B;QAFQ,UAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAG5C,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,aAAa,CAAC,KAAa;QAChC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,YAAY,CAAC,UAAmB,EAAE,MAAmB;QAC1D,MAAM,SAAS,GAAG,UAAU;YAC1B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG;YAC9D,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;QAC/D,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,wBAAwB,CAAC,UAAmB;QACjD,MAAM,qBAAqB,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC7D,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;CACF",sourcesContent:["export default class LabelView {\n  private label = document.createElement('div');\n\n  constructor() {\n    this.init();\n  }\n\n  public getElement(): HTMLElement {\n    return this.label;\n  }\n\n  public setLabelValue(value: number): void {\n    this.label.innerText = String(value);\n  }\n\n  public getLabelSize(isVertical: boolean, parent: HTMLElement): number {\n    const labelSize = isVertical\n      ? (this.getElement().offsetHeight / parent.offsetHeight) * 100\n      : (this.getElement().offsetWidth / parent.offsetWidth) * 100;\n    return labelSize;\n  }\n\n  public getFixedPositionProperty(isVertical: boolean): 'left' | 'bottom' {\n    const fixedPositionProperty = isVertical ? 'left' : 'bottom';\n    return fixedPositionProperty;\n  }\n\n  private init(): void {\n    this.label.classList.add('slider__label');\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class I{constructor(){f.f[0]++,f.s[0]++,this.label=document.createElement("div"),f.s[1]++,this.init()}getElement(){return f.f[1]++,f.s[2]++,this.label}setLabelValue(e){f.f[2]++,f.s[3]++,this.label.innerText=String(e)}getLabelSize(e,n){f.f[3]++;const A=(f.s[4]++,e?(f.b[0][0]++,this.getElement().offsetHeight/n.offsetHeight*100):(f.b[0][1]++,this.getElement().offsetWidth/n.offsetWidth*100));return f.s[5]++,A}getFixedPositionProperty(e){f.f[4]++;const n=(f.s[6]++,e?(f.b[1][0]++,"left"):(f.b[1][1]++,"bottom"));return f.s[7]++,n}init(){f.f[5]++,f.s[8]++,this.label.classList.add("slider__label")}}var v=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",n="919ee1d2082a43d804ad81ae821c47bfea5791df",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:53}},1:{start:{line:5,column:8},end:{line:5,column:37}},2:{start:{line:8,column:48},end:{line:8,column:55}},3:{start:{line:9,column:28},end:{line:9,column:37}},4:{start:{line:10,column:33},end:{line:10,column:63}},5:{start:{line:11,column:28},end:{line:11,column:59}},6:{start:{line:12,column:25},end:{line:12,column:78}},7:{start:{line:13,column:8},end:{line:13,column:62}},8:{start:{line:14,column:37},end:{line:14,column:76}},9:{start:{line:15,column:8},end:{line:15,column:52}},10:{start:{line:16,column:8},end:{line:16,column:42}},11:{start:{line:17,column:8},end:{line:17,column:24}},12:{start:{line:21,column:8},end:{line:28,column:9}},13:{start:{line:22,column:12},end:{line:22,column:67}},14:{start:{line:23,column:12},end:{line:23,column:38}},15:{start:{line:24,column:12},end:{line:24,column:57}},16:{start:{line:27,column:12},end:{line:27,column:92}},17:{start:{line:31,column:8},end:{line:31,column:28}},18:{start:{line:35,column:8},end:{line:35,column:86}},19:{start:{line:38,column:8},end:{line:38,column:41}},20:{start:{line:41,column:8},end:{line:41,column:29}},21:{start:{line:42,column:8},end:{line:42,column:54}},22:{start:{line:43,column:8},end:{line:43,column:56}},23:{start:{line:44,column:8},end:{line:45,column:57}},24:{start:{line:45,column:12},end:{line:45,column:57}},25:{start:{line:48,column:28},end:{line:50,column:72}},26:{start:{line:51,column:8},end:{line:51,column:27}},27:{start:{line:54,column:56},end:{line:54,column:63}},28:{start:{line:55,column:8},end:{line:63,column:9}},29:{start:{line:56,column:12},end:{line:56,column:38}},30:{start:{line:57,column:30},end:{line:57,column:78}},31:{start:{line:58,column:42},end:{line:58,column:89}},32:{start:{line:59,column:37},end:{line:59,column:67}},33:{start:{line:60,column:34},end:{line:60,column:85}},34:{start:{line:61,column:12},end:{line:61,column:82}},35:{start:{line:62,column:12},end:{line:62,column:74}},36:{start:{line:66,column:8},end:{line:67,column:44}},37:{start:{line:67,column:12},end:{line:67,column:44}},38:{start:{line:70,column:8},end:{line:78,column:9}},39:{start:{line:71,column:26},end:{line:71,column:85}},40:{start:{line:72,column:12},end:{line:72,column:52}},41:{start:{line:73,column:12},end:{line:73,column:44}},42:{start:{line:76,column:26},end:{line:76,column:85}},43:{start:{line:77,column:12},end:{line:77,column:51}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:35},end:{line:6,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:25},end:{line:18,column:5}},line:7},2:{name:"(anonymous_2)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:34},end:{line:29,column:5}},line:19},3:{name:"(anonymous_3)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:17},end:{line:32,column:5}},line:30},4:{name:"(anonymous_4)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:22},end:{line:36,column:5}},line:33},5:{name:"(anonymous_5)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:20},end:{line:39,column:5}},line:37},6:{name:"(anonymous_6)",decl:{start:{line:40,column:4},end:{line:40,column:5}},loc:{start:{line:40,column:28},end:{line:46,column:5}},line:40},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:31},end:{line:52,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:30},end:{line:64,column:5}},line:53},9:{name:"(anonymous_9)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:25},end:{line:68,column:5}},line:65},10:{name:"(anonymous_10)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:31},end:{line:79,column:5}},line:69}},branchMap:{0:{loc:{start:{line:10,column:33},end:{line:10,column:63}},type:"cond-expr",locations:[{start:{line:10,column:46},end:{line:10,column:54}},{start:{line:10,column:57},end:{line:10,column:63}}],line:10},1:{loc:{start:{line:21,column:8},end:{line:28,column:9}},type:"if",locations:[{start:{line:21,column:8},end:{line:28,column:9}},{start:{line:21,column:8},end:{line:28,column:9}}],line:21},2:{loc:{start:{line:22,column:25},end:{line:22,column:66}},type:"cond-expr",locations:[{start:{line:22,column:38},end:{line:22,column:48}},{start:{line:22,column:51},end:{line:22,column:66}}],line:22},3:{loc:{start:{line:27,column:12},end:{line:27,column:91}},type:"cond-expr",locations:[{start:{line:27,column:58},end:{line:27,column:64}},{start:{line:27,column:67},end:{line:27,column:91}}],line:27},4:{loc:{start:{line:27,column:12},end:{line:27,column:55}},type:"binary-expr",locations:[{start:{line:27,column:12},end:{line:27,column:38}},{start:{line:27,column:42},end:{line:27,column:55}}],line:27},5:{loc:{start:{line:35,column:15},end:{line:35,column:85}},type:"cond-expr",locations:[{start:{line:35,column:61},end:{line:35,column:67}},{start:{line:35,column:70},end:{line:35,column:85}}],line:35},6:{loc:{start:{line:35,column:15},end:{line:35,column:58}},type:"binary-expr",locations:[{start:{line:35,column:15},end:{line:35,column:41}},{start:{line:35,column:45},end:{line:35,column:58}}],line:35},7:{loc:{start:{line:43,column:21},end:{line:43,column:55}},type:"cond-expr",locations:[{start:{line:43,column:33},end:{line:43,column:48}},{start:{line:43,column:51},end:{line:43,column:55}}],line:43},8:{loc:{start:{line:44,column:8},end:{line:45,column:57}},type:"if",locations:[{start:{line:44,column:8},end:{line:45,column:57}},{start:{line:44,column:8},end:{line:45,column:57}}],line:44},9:{loc:{start:{line:48,column:28},end:{line:50,column:72}},type:"cond-expr",locations:[{start:{line:49,column:14},end:{line:49,column:74}},{start:{line:50,column:14},end:{line:50,column:72}}],line:48},10:{loc:{start:{line:55,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:55,column:8},end:{line:63,column:9}},{start:{line:55,column:8},end:{line:63,column:9}}],line:55},11:{loc:{start:{line:59,column:37},end:{line:59,column:67}},type:"cond-expr",locations:[{start:{line:59,column:50},end:{line:59,column:58}},{start:{line:59,column:61},end:{line:59,column:67}}],line:59},12:{loc:{start:{line:66,column:8},end:{line:67,column:44}},type:"if",locations:[{start:{line:66,column:8},end:{line:67,column:44}},{start:{line:66,column:8},end:{line:67,column:44}}],line:66},13:{loc:{start:{line:70,column:8},end:{line:78,column:9}},type:"if",locations:[{start:{line:70,column:8},end:{line:78,column:9}},{start:{line:70,column:8},end:{line:78,column:9}}],line:70}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts"],names:[],mappings:"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",sourcesContent:["import LabelView from './LabelView';\n\nexport default class HandlerView {\n  private parent!: HTMLElement;\n\n  private handler = document.createElement('div');\n\n  private label!: LabelView | null;\n\n  constructor(parent: HTMLElement, showLabel: boolean) {\n    this.init(parent, showLabel);\n  }\n\n  public setPosition(options: {\n    value: number;\n    min: number;\n    max: number;\n    isVertical: boolean;\n  }): number {\n    const { value, min, max, isVertical } = options;\n    const valuesCount = max - min;\n    const positionProperty = isVertical ? 'bottom' : 'left';\n    const handlerSize = this.getHandlerSize(isVertical);\n    const position = ((value - min) / valuesCount) * 100 - handlerSize / 2;\n    this.handler.style[positionProperty] = `${position}%`;\n    const labelPositionOptions = { value, valuesCount, min, isVertical };\n    this.setLabelPosition(labelPositionOptions);\n    this.setDefaultStyles(isVertical);\n    return position;\n  }\n\n  public updateLabel(showLabel: boolean | undefined, value: number): void {\n    if (showLabel) {\n      this.label = this.label ? this.label : new LabelView();\n      this.setLabelValue(value);\n      this.handler.before(this.label.getElement());\n    } else {\n      this.label?.getElement().remove();\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.handler;\n  }\n\n  public getLabelElement(): HTMLElement | undefined {\n    return this.label?.getElement();\n  }\n\n  public appendHandler(): void {\n    this.parent.append(this.handler);\n  }\n\n  private init(parent: HTMLElement, showLabel: boolean): void {\n    this.parent = parent;\n    this.handler.classList.add('slider__handler');\n    this.label = showLabel ? new LabelView() : null;\n    if (this.label) this.handler.before(this.label.getElement());\n  }\n\n  private getHandlerSize(isVertical: boolean): number {\n    const handlerSize = isVertical\n      ? (this.handler.offsetHeight / this.parent.offsetHeight) * 100\n      : (this.handler.offsetWidth / this.parent.offsetWidth) * 100;\n    return handlerSize;\n  }\n\n  private setLabelPosition(options: {\n    value: number;\n    valuesCount: number;\n    min: number;\n    isVertical: boolean;\n  }): void {\n    const { value, valuesCount, min, isVertical } = options;\n    if (this.label) {\n      this.setLabelValue(value);\n      const labelSize = this.label.getLabelSize(isVertical, this.parent);\n      const fixedPositionProperty = this.label.getFixedPositionProperty(isVertical);\n      const positionProperty = isVertical ? 'bottom' : 'left';\n      const labelPosition = ((value - min) / valuesCount) * 100 - labelSize / 2;\n      this.label.getElement().style[positionProperty] = `${labelPosition}%`;\n      this.label.getElement().style[fixedPositionProperty] = '330%';\n    }\n  }\n\n  private setLabelValue(value: number): void {\n    if (this.label) this.label.setLabelValue(value);\n  }\n\n  private setDefaultStyles(vertical: boolean): void {\n    if (vertical) {\n      const shift = this.handler.offsetHeight / 2 - this.parent.offsetWidth / 2;\n      this.handler.style.left = `-${shift}px`;\n      this.handler.style.top = 'auto';\n    } else {\n      const shift = this.handler.offsetWidth / 2 - this.parent.offsetHeight / 2;\n      this.handler.style.top = `-${shift}px`;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class g{constructor(e,n){v.f[0]++,v.s[0]++,this.handler=document.createElement("div"),v.s[1]++,this.init(e,n)}setPosition(e){v.f[1]++;const{value:n,min:A,max:t,isVertical:l}=(v.s[2]++,e),i=(v.s[3]++,t-A),o=(v.s[4]++,l?(v.b[0][0]++,"bottom"):(v.b[0][1]++,"left")),s=(v.s[5]++,this.getHandlerSize(l)),a=(v.s[6]++,(n-A)/i*100-s/2);v.s[7]++,this.handler.style[o]=`${a}%`;const C=(v.s[8]++,{value:n,valuesCount:i,min:A,isVertical:l});return v.s[9]++,this.setLabelPosition(C),v.s[10]++,this.setDefaultStyles(l),v.s[11]++,a}updateLabel(e,n){var A;v.f[2]++,v.s[12]++,e?(v.b[1][0]++,v.s[13]++,this.label=this.label?(v.b[2][0]++,this.label):(v.b[2][1]++,new I),v.s[14]++,this.setLabelValue(n),v.s[15]++,this.handler.before(this.label.getElement())):(v.b[1][1]++,v.s[16]++,v.b[4][0]++,null===(A=this.label)||(v.b[4][1]++,void 0===A)?v.b[3][0]++:(v.b[3][1]++,A.getElement().remove()))}getElement(){return v.f[3]++,v.s[17]++,this.handler}getLabelElement(){var e;return v.f[4]++,v.s[18]++,v.b[6][0]++,null===(e=this.label)||(v.b[6][1]++,void 0===e)?void v.b[5][0]++:(v.b[5][1]++,e.getElement())}appendHandler(){v.f[5]++,v.s[19]++,this.parent.append(this.handler)}init(e,n){v.f[6]++,v.s[20]++,this.parent=e,v.s[21]++,this.handler.classList.add("slider__handler"),v.s[22]++,this.label=n?(v.b[7][0]++,new I):(v.b[7][1]++,null),v.s[23]++,this.label?(v.b[8][0]++,v.s[24]++,this.handler.before(this.label.getElement())):v.b[8][1]++}getHandlerSize(e){v.f[7]++;const n=(v.s[25]++,e?(v.b[9][0]++,this.handler.offsetHeight/this.parent.offsetHeight*100):(v.b[9][1]++,this.handler.offsetWidth/this.parent.offsetWidth*100));return v.s[26]++,n}setLabelPosition(e){v.f[8]++;const{value:n,valuesCount:A,min:t,isVertical:l}=(v.s[27]++,e);if(v.s[28]++,this.label){v.b[10][0]++,v.s[29]++,this.setLabelValue(n);const e=(v.s[30]++,this.label.getLabelSize(l,this.parent)),i=(v.s[31]++,this.label.getFixedPositionProperty(l)),o=(v.s[32]++,l?(v.b[11][0]++,"bottom"):(v.b[11][1]++,"left")),s=(v.s[33]++,(n-t)/A*100-e/2);v.s[34]++,this.label.getElement().style[o]=`${s}%`,v.s[35]++,this.label.getElement().style[i]="330%"}else v.b[10][1]++}setLabelValue(e){v.f[9]++,v.s[36]++,this.label?(v.b[12][0]++,v.s[37]++,this.label.setLabelValue(e)):v.b[12][1]++}setDefaultStyles(e){if(v.f[10]++,v.s[38]++,e){v.b[13][0]++;const e=(v.s[39]++,this.handler.offsetHeight/2-this.parent.offsetWidth/2);v.s[40]++,this.handler.style.left=`-${e}px`,v.s[41]++,this.handler.style.top="auto"}else{v.b[13][1]++;const e=(v.s[42]++,this.handler.offsetWidth/2-this.parent.offsetHeight/2);v.s[43]++,this.handler.style.top=`-${e}px`}}}var E=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",n="0c2d100c8619d0e8a1f905307c88445f4d0df506",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:59}},1:{start:{line:4,column:8},end:{line:4,column:27}},2:{start:{line:7,column:8},end:{line:16,column:9}},3:{start:{line:8,column:12},end:{line:8,column:65}},4:{start:{line:9,column:12},end:{line:9,column:74}},5:{start:{line:10,column:12},end:{line:10,column:58}},6:{start:{line:13,column:12},end:{line:13,column:68}},7:{start:{line:14,column:12},end:{line:14,column:71}},8:{start:{line:15,column:12},end:{line:15,column:54}},9:{start:{line:17,column:8},end:{line:17,column:47}},10:{start:{line:20,column:8},end:{line:20,column:34}},11:{start:{line:23,column:63},end:{line:23,column:70}},12:{start:{line:24,column:8},end:{line:24,column:33}},13:{start:{line:25,column:8},end:{line:25,column:47}},14:{start:{line:26,column:8},end:{line:33,column:9}},15:{start:{line:27,column:12},end:{line:27,column:65}},16:{start:{line:28,column:12},end:{line:28,column:60}},17:{start:{line:31,column:12},end:{line:31,column:71}},18:{start:{line:32,column:12},end:{line:32,column:56}},19:{start:{line:34,column:8},end:{line:34,column:52}},20:{start:{line:37,column:8},end:{line:49,column:9}},21:{start:{line:38,column:12},end:{line:41,column:41}},22:{start:{line:44,column:12},end:{line:48,column:23}},23:{start:{line:52,column:23},end:{line:52,column:51}},24:{start:{line:53,column:23},end:{line:53,column:52}},25:{start:{line:54,column:8},end:{line:64,column:23}},26:{start:{line:65,column:8},end:{line:73,column:23}},27:{start:{line:76,column:8},end:{line:89,column:9}},28:{start:{line:77,column:12},end:{line:77,column:52}},29:{start:{line:78,column:12},end:{line:78,column:49}},30:{start:{line:79,column:12},end:{line:81,column:13}},31:{start:{line:80,column:16},end:{line:80,column:55}},32:{start:{line:84,column:12},end:{line:84,column:53}},33:{start:{line:85,column:12},end:{line:85,column:51}},34:{start:{line:86,column:12},end:{line:88,column:13}},35:{start:{line:87,column:16},end:{line:87,column:53}},36:{start:{line:92,column:20},end:{line:92,column:51}},37:{start:{line:93,column:8},end:{line:95,column:9}},38:{start:{line:94,column:12},end:{line:94,column:44}},39:{start:{line:96,column:8},end:{line:96,column:38}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:25},end:{line:5,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:51},end:{line:18,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:22},end:{line:21,column:5}},line:19},3:{name:"(anonymous_3)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:18},end:{line:35,column:5}},line:22},4:{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:41},end:{line:50,column:5}},line:36},5:{name:"(anonymous_5)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:41},end:{line:74,column:5}},line:51},6:{name:"(anonymous_6)",decl:{start:{line:75,column:4},end:{line:75,column:5}},loc:{start:{line:75,column:38},end:{line:90,column:5}},line:75},7:{name:"(anonymous_7)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:37},end:{line:97,column:5}},line:91}},branchMap:{0:{loc:{start:{line:7,column:8},end:{line:16,column:9}},type:"if",locations:[{start:{line:7,column:8},end:{line:16,column:9}},{start:{line:7,column:8},end:{line:16,column:9}}],line:7},1:{loc:{start:{line:26,column:8},end:{line:33,column:9}},type:"if",locations:[{start:{line:26,column:8},end:{line:33,column:9}},{start:{line:26,column:8},end:{line:33,column:9}}],line:26},2:{loc:{start:{line:37,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:37,column:8},end:{line:49,column:9}},{start:{line:37,column:8},end:{line:49,column:9}}],line:37},3:{loc:{start:{line:52,column:23},end:{line:52,column:51}},type:"cond-expr",locations:[{start:{line:52,column:34},end:{line:52,column:42}},{start:{line:52,column:45},end:{line:52,column:51}}],line:52},4:{loc:{start:{line:53,column:23},end:{line:53,column:52}},type:"cond-expr",locations:[{start:{line:53,column:34},end:{line:53,column:42}},{start:{line:53,column:45},end:{line:53,column:52}}],line:53},5:{loc:{start:{line:54,column:43},end:{line:64,column:22}},type:"cond-expr",locations:[{start:{line:55,column:14},end:{line:59,column:22}},{start:{line:60,column:14},end:{line:64,column:22}}],line:54},6:{loc:{start:{line:65,column:43},end:{line:73,column:22}},type:"cond-expr",locations:[{start:{line:66,column:14},end:{line:69,column:22}},{start:{line:70,column:14},end:{line:73,column:22}}],line:65},7:{loc:{start:{line:76,column:8},end:{line:89,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:89,column:9}},{start:{line:76,column:8},end:{line:89,column:9}}],line:76},8:{loc:{start:{line:79,column:12},end:{line:81,column:13}},type:"if",locations:[{start:{line:79,column:12},end:{line:81,column:13}},{start:{line:79,column:12},end:{line:81,column:13}}],line:79},9:{loc:{start:{line:86,column:12},end:{line:88,column:13}},type:"if",locations:[{start:{line:86,column:12},end:{line:88,column:13}},{start:{line:86,column:12},end:{line:88,column:13}}],line:86},10:{loc:{start:{line:93,column:8},end:{line:95,column:9}},type:"if",locations:[{start:{line:93,column:8},end:{line:95,column:9}},{start:{line:93,column:8},end:{line:95,column:9}}],line:93}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts"],names:[],mappings:"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",sourcesContent:["export default class SelectedArea {\n  private selectedRange = document.createElement('div');\n\n  private parent!: HTMLElement;\n\n  constructor(options: {\n    sliderBody: HTMLDivElement;\n    hasRange: boolean;\n    isVertical: boolean;\n    handlers: HTMLElement[];\n  }) {\n    this.init(options);\n  }\n\n  public updateSelectedRange(range: boolean, vertical: boolean, handlers: HTMLElement[]): void {\n    if (!range) {\n      this.selectedRange.classList.add('slider__selected');\n      this.selectedRange.classList.remove('slider__selected-range');\n      this.setPositionSingle(vertical, handlers[0]);\n    } else {\n      this.selectedRange.classList.remove('slider__selected');\n      this.selectedRange.classList.add('slider__selected-range');\n      this.setPositionRange(vertical, handlers);\n    }\n    this.setDefaultStyles(vertical, range);\n  }\n\n  public getSelectedArea(): HTMLDivElement {\n    return this.selectedRange;\n  }\n\n  private init(options: {\n    sliderBody: HTMLDivElement;\n    hasRange: boolean;\n    isVertical: boolean;\n    handlers: HTMLElement[];\n  }): void {\n    const { sliderBody, hasRange, isVertical, handlers } = options;\n    this.parent = sliderBody;\n    this.parent.append(this.selectedRange);\n    if (!hasRange) {\n      this.selectedRange.classList.add('slider__selected');\n      this.setPositionSingle(isVertical, handlers[0]);\n    } else {\n      this.selectedRange.classList.add('slider__selected-range');\n      this.setPositionRange(isVertical, handlers);\n    }\n    this.setDefaultStyles(isVertical, hasRange);\n  }\n\n  private setPositionSingle(vertical: boolean, handler: HTMLElement): void {\n    if (vertical) {\n      this.selectedRange.style.height = `${this.getCoordinate(this.parent, vertical) -\n        handler.offsetWidth / 2 -\n        this.getCoordinate(handler, vertical) +\n        handler.offsetHeight}px`;\n    } else {\n      this.selectedRange.style.width = `${((this.getCoordinate(handler, vertical) +\n        handler.offsetWidth / 2 -\n        this.getCoordinate(this.parent, vertical)) /\n        this.parent.offsetWidth) *\n        100}%`;\n    }\n  }\n\n  private setPositionRange(vertical: boolean, handlers: HTMLElement[]): void {\n    const posMin = vertical ? 'bottom' : 'left';\n    const length = vertical ? 'height' : 'width';\n    this.selectedRange.style[posMin] = vertical\n      ? `${((this.getCoordinate(this.parent, vertical) -\n          this.getCoordinate(handlers[0], vertical) +\n          handlers[0].offsetWidth / 2) /\n          this.parent.offsetHeight) *\n          100}%`\n      : `${((this.getCoordinate(handlers[0], vertical) -\n          this.getCoordinate(this.parent, vertical) +\n          handlers[0].offsetWidth / 2) /\n          this.parent.offsetWidth) *\n          100}%`;\n    this.selectedRange.style[length] = vertical\n      ? `${((this.getCoordinate(handlers[0], vertical) -\n          this.getCoordinate(handlers[1], vertical)) /\n          this.parent.offsetHeight) *\n          100}%`\n      : `${((this.getCoordinate(handlers[1], vertical) -\n          this.getCoordinate(handlers[0], vertical)) /\n          this.parent.offsetWidth) *\n          100}%`;\n  }\n\n  private setDefaultStyles(vertical: boolean, range: boolean): void {\n    if (vertical) {\n      this.selectedRange.style.width = '100%';\n      this.selectedRange.style.left = '0%';\n      if (!range) {\n        this.selectedRange.style.bottom = '0%';\n      }\n    } else {\n      this.selectedRange.style.height = '100%';\n      this.selectedRange.style.bottom = '0%';\n      if (!range) {\n        this.selectedRange.style.left = '0%';\n      }\n    }\n  }\n\n  private getCoordinate(element: HTMLElement, vertical: boolean): number {\n    const box = element.getBoundingClientRect();\n    if (vertical) {\n      return box.bottom + pageYOffset;\n    }\n    return box.left + pageXOffset;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class b{constructor(e){E.f[0]++,E.s[0]++,this.selectedRange=document.createElement("div"),E.s[1]++,this.init(e)}updateSelectedRange(e,n,A){E.f[1]++,E.s[2]++,e?(E.b[0][1]++,E.s[6]++,this.selectedRange.classList.remove("slider__selected"),E.s[7]++,this.selectedRange.classList.add("slider__selected-range"),E.s[8]++,this.setPositionRange(n,A)):(E.b[0][0]++,E.s[3]++,this.selectedRange.classList.add("slider__selected"),E.s[4]++,this.selectedRange.classList.remove("slider__selected-range"),E.s[5]++,this.setPositionSingle(n,A[0])),E.s[9]++,this.setDefaultStyles(n,e)}getSelectedArea(){return E.f[2]++,E.s[10]++,this.selectedRange}init(e){E.f[3]++;const{sliderBody:n,hasRange:A,isVertical:t,handlers:l}=(E.s[11]++,e);E.s[12]++,this.parent=n,E.s[13]++,this.parent.append(this.selectedRange),E.s[14]++,A?(E.b[1][1]++,E.s[17]++,this.selectedRange.classList.add("slider__selected-range"),E.s[18]++,this.setPositionRange(t,l)):(E.b[1][0]++,E.s[15]++,this.selectedRange.classList.add("slider__selected"),E.s[16]++,this.setPositionSingle(t,l[0])),E.s[19]++,this.setDefaultStyles(t,A)}setPositionSingle(e,n){E.f[4]++,E.s[20]++,e?(E.b[2][0]++,E.s[21]++,this.selectedRange.style.height=`${this.getCoordinate(this.parent,e)-n.offsetWidth/2-this.getCoordinate(n,e)+n.offsetHeight}px`):(E.b[2][1]++,E.s[22]++,this.selectedRange.style.width=`${(this.getCoordinate(n,e)+n.offsetWidth/2-this.getCoordinate(this.parent,e))/this.parent.offsetWidth*100}%`)}setPositionRange(e,n){E.f[5]++;const A=(E.s[23]++,e?(E.b[3][0]++,"bottom"):(E.b[3][1]++,"left")),t=(E.s[24]++,e?(E.b[4][0]++,"height"):(E.b[4][1]++,"width"));E.s[25]++,this.selectedRange.style[A]=e?(E.b[5][0]++,`${(this.getCoordinate(this.parent,e)-this.getCoordinate(n[0],e)+n[0].offsetWidth/2)/this.parent.offsetHeight*100}%`):(E.b[5][1]++,`${(this.getCoordinate(n[0],e)-this.getCoordinate(this.parent,e)+n[0].offsetWidth/2)/this.parent.offsetWidth*100}%`),E.s[26]++,this.selectedRange.style[t]=e?(E.b[6][0]++,`${(this.getCoordinate(n[0],e)-this.getCoordinate(n[1],e))/this.parent.offsetHeight*100}%`):(E.b[6][1]++,`${(this.getCoordinate(n[1],e)-this.getCoordinate(n[0],e))/this.parent.offsetWidth*100}%`)}setDefaultStyles(e,n){E.f[6]++,E.s[27]++,e?(E.b[7][0]++,E.s[28]++,this.selectedRange.style.width="100%",E.s[29]++,this.selectedRange.style.left="0%",E.s[30]++,n?E.b[8][1]++:(E.b[8][0]++,E.s[31]++,this.selectedRange.style.bottom="0%")):(E.b[7][1]++,E.s[32]++,this.selectedRange.style.height="100%",E.s[33]++,this.selectedRange.style.bottom="0%",E.s[34]++,n?E.b[9][1]++:(E.b[9][0]++,E.s[35]++,this.selectedRange.style.left="0%"))}getCoordinate(e,n){E.f[7]++;const A=(E.s[36]++,e.getBoundingClientRect());return E.s[37]++,n?(E.b[10][0]++,E.s[38]++,A.bottom+pageYOffset):(E.b[10][1]++,E.s[39]++,A.left+pageXOffset)}}var M=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/ScaleView.ts",n="a4fbe144f2fc66bfcaa2ce848125b3e6119d5af7",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/ScaleView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:51}},1:{start:{line:4,column:8},end:{line:4,column:60}},2:{start:{line:5,column:8},end:{line:5,column:57}},3:{start:{line:6,column:8},end:{line:6,column:26}},4:{start:{line:9,column:41},end:{line:9,column:48}},5:{start:{line:10,column:8},end:{line:23,column:9}},6:{start:{line:11,column:12},end:{line:11,column:43}},7:{start:{line:12,column:12},end:{line:12,column:60}},8:{start:{line:13,column:12},end:{line:13,column:57}},9:{start:{line:14,column:12},end:{line:14,column:36}},10:{start:{line:15,column:12},end:{line:22,column:13}},11:{start:{line:16,column:16},end:{line:16,column:48}},12:{start:{line:17,column:16},end:{line:17,column:73}},13:{start:{line:20,column:16},end:{line:20,column:47}},14:{start:{line:21,column:16},end:{line:21,column:73}},15:{start:{line:26,column:8},end:{line:26,column:27}},16:{start:{line:27,column:8},end:{line:29,column:9}},17:{start:{line:28,column:12},end:{line:28,column:35}},18:{start:{line:32,column:8},end:{line:32,column:26}},19:{start:{line:33,column:8},end:{line:33,column:37}},20:{start:{line:34,column:8},end:{line:34,column:34}},21:{start:{line:35,column:8},end:{line:35,column:28}},22:{start:{line:38,column:8},end:{line:38,column:43}},23:{start:{line:39,column:8},end:{line:39,column:40}},24:{start:{line:40,column:8},end:{line:40,column:34}},25:{start:{line:41,column:8},end:{line:41,column:27}},26:{start:{line:44,column:47},end:{line:44,column:54}},27:{start:{line:45,column:8},end:{line:45,column:67}},28:{start:{line:46,column:8},end:{line:48,column:9}},29:{start:{line:47,column:12},end:{line:47,column:58}},30:{start:{line:49,column:28},end:{line:49,column:37}},31:{start:{line:50,column:8},end:{line:56,column:11}},32:{start:{line:51,column:26},end:{line:51,column:77}},33:{start:{line:54,column:12},end:{line:54,column:83}},34:{start:{line:55,column:12},end:{line:55,column:84}},35:{start:{line:59,column:28},end:{line:59,column:33}},36:{start:{line:60,column:28},end:{line:60,column:37}},37:{start:{line:61,column:20},end:{line:61,column:23}},38:{start:{line:62,column:19},end:{line:62,column:22}},39:{start:{line:63,column:8},end:{line:69,column:9}},40:{start:{line:64,column:12},end:{line:66,column:13}},41:{start:{line:65,column:16},end:{line:65,column:25}},42:{start:{line:67,column:12},end:{line:67,column:36}},43:{start:{line:68,column:12},end:{line:68,column:25}},44:{start:{line:70,column:8},end:{line:70,column:30}},45:{start:{line:71,column:8},end:{line:71,column:27}},46:{start:{line:74,column:8},end:{line:74,column:47}},47:{start:{line:75,column:8},end:{line:75,column:53}},48:{start:{line:76,column:8},end:{line:88,column:9}},49:{start:{line:77,column:12},end:{line:77,column:44}},50:{start:{line:78,column:27},end:{line:78,column:51}},51:{start:{line:79,column:12},end:{line:79,column:52}},52:{start:{line:80,column:12},end:{line:80,column:46}},53:{start:{line:81,column:12},end:{line:81,column:53}},54:{start:{line:84,column:12},end:{line:84,column:42}},55:{start:{line:85,column:12},end:{line:85,column:44}},56:{start:{line:86,column:12},end:{line:86,column:47}},57:{start:{line:87,column:12},end:{line:87,column:54}},58:{start:{line:91,column:30},end:{line:91,column:37}},59:{start:{line:92,column:8},end:{line:92,column:45}},60:{start:{line:93,column:8},end:{line:93,column:61}},61:{start:{line:94,column:8},end:{line:96,column:9}},62:{start:{line:95,column:12},end:{line:95,column:57}},63:{start:{line:99,column:8},end:{line:99,column:38}},64:{start:{line:100,column:8},end:{line:100,column:40}},65:{start:{line:101,column:8},end:{line:101,column:41}},66:{start:{line:102,column:8},end:{line:102,column:40}},67:{start:{line:103,column:8},end:{line:103,column:50}},68:{start:{line:104,column:8},end:{line:104,column:49}},69:{start:{line:105,column:8},end:{line:105,column:56}},70:{start:{line:106,column:8},end:{line:106,column:53}},71:{start:{line:109,column:25},end:{line:109,column:54}},72:{start:{line:110,column:8},end:{line:110,column:48}},73:{start:{line:111,column:8},end:{line:116,column:9}},74:{start:{line:112,column:12},end:{line:112,column:59}},75:{start:{line:115,column:12},end:{line:115,column:58}},76:{start:{line:117,column:8},end:{line:117,column:24}},77:{start:{line:120,column:27},end:{line:120,column:56}},78:{start:{line:121,column:36},end:{line:121,column:65}},79:{start:{line:122,column:8},end:{line:122,column:56}},80:{start:{line:123,column:8},end:{line:123,column:47}},81:{start:{line:124,column:8},end:{line:124,column:45}},82:{start:{line:125,column:8},end:{line:135,column:9}},83:{start:{line:126,column:12},end:{line:126,column:63}},84:{start:{line:127,column:12},end:{line:127,column:51}},85:{start:{line:128,column:12},end:{line:128,column:64}},86:{start:{line:129,column:12},end:{line:129,column:43}},87:{start:{line:130,column:12},end:{line:130,column:90}},88:{start:{line:133,column:12},end:{line:133,column:92}},89:{start:{line:134,column:12},end:{line:134,column:64}},90:{start:{line:136,column:8},end:{line:136,column:47}},91:{start:{line:137,column:8},end:{line:137,column:35}},92:{start:{line:140,column:8},end:{line:140,column:29}},93:{start:{line:141,column:8},end:{line:141,column:50}},94:{start:{line:142,column:8},end:{line:142,column:69}},95:{start:{line:143,column:8},end:{line:143,column:63}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:24},end:{line:7,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:22},end:{line:24,column:5}},line:8},2:{name:"(anonymous_2)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:25},end:{line:30,column:5}},line:25},3:{name:"(anonymous_3)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:18},end:{line:36,column:5}},line:31},4:{name:"(anonymous_4)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:17},end:{line:42,column:5}},line:37},5:{name:"(anonymous_5)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:23},end:{line:57,column:5}},line:43},6:{name:"(anonymous_6)",decl:{start:{line:50,column:33},end:{line:50,column:34}},loc:{start:{line:50,column:51},end:{line:56,column:9}},line:50},7:{name:"(anonymous_7)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:39},end:{line:72,column:5}},line:58},8:{name:"(anonymous_8)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:28},end:{line:89,column:5}},line:73},9:{name:"(anonymous_9)",decl:{start:{line:90,column:4},end:{line:90,column:5}},loc:{start:{line:90,column:33},end:{line:97,column:5}},line:90},10:{name:"(anonymous_10)",decl:{start:{line:98,column:4},end:{line:98,column:5}},loc:{start:{line:98,column:18},end:{line:107,column:5}},line:98},11:{name:"(anonymous_11)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:40},end:{line:118,column:5}},line:108},12:{name:"(anonymous_12)",decl:{start:{line:119,column:4},end:{line:119,column:5}},loc:{start:{line:119,column:44},end:{line:138,column:5}},line:119},13:{name:"(anonymous_13)",decl:{start:{line:139,column:4},end:{line:139,column:5}},loc:{start:{line:139,column:17},end:{line:144,column:5}},line:139}},branchMap:{0:{loc:{start:{line:10,column:8},end:{line:23,column:9}},type:"if",locations:[{start:{line:10,column:8},end:{line:23,column:9}},{start:{line:10,column:8},end:{line:23,column:9}}],line:10},1:{loc:{start:{line:15,column:12},end:{line:22,column:13}},type:"if",locations:[{start:{line:15,column:12},end:{line:22,column:13}},{start:{line:15,column:12},end:{line:22,column:13}}],line:15},2:{loc:{start:{line:27,column:8},end:{line:29,column:9}},type:"if",locations:[{start:{line:27,column:8},end:{line:29,column:9}},{start:{line:27,column:8},end:{line:29,column:9}}],line:27},3:{loc:{start:{line:46,column:8},end:{line:48,column:9}},type:"if",locations:[{start:{line:46,column:8},end:{line:48,column:9}},{start:{line:46,column:8},end:{line:48,column:9}}],line:46},4:{loc:{start:{line:64,column:12},end:{line:66,column:13}},type:"if",locations:[{start:{line:64,column:12},end:{line:66,column:13}},{start:{line:64,column:12},end:{line:66,column:13}}],line:64},5:{loc:{start:{line:76,column:8},end:{line:88,column:9}},type:"if",locations:[{start:{line:76,column:8},end:{line:88,column:9}},{start:{line:76,column:8},end:{line:88,column:9}}],line:76},6:{loc:{start:{line:94,column:8},end:{line:96,column:9}},type:"if",locations:[{start:{line:94,column:8},end:{line:96,column:9}},{start:{line:94,column:8},end:{line:96,column:9}}],line:94},7:{loc:{start:{line:111,column:8},end:{line:116,column:9}},type:"if",locations:[{start:{line:111,column:8},end:{line:116,column:9}},{start:{line:111,column:8},end:{line:116,column:9}}],line:111},8:{loc:{start:{line:125,column:8},end:{line:135,column:9}},type:"if",locations:[{start:{line:125,column:8},end:{line:135,column:9}},{start:{line:125,column:8},end:{line:135,column:9}}],line:125},9:{loc:{start:{line:128,column:38},end:{line:128,column:63}},type:"cond-expr",locations:[{start:{line:128,column:49},end:{line:128,column:54}},{start:{line:128,column:57},end:{line:128,column:63}}],line:128},10:{loc:{start:{line:130,column:41},end:{line:130,column:89}},type:"cond-expr",locations:[{start:{line:130,column:52},end:{line:130,column:69}},{start:{line:130,column:72},end:{line:130,column:89}}],line:130},11:{loc:{start:{line:133,column:41},end:{line:133,column:91}},type:"cond-expr",locations:[{start:{line:133,column:52},end:{line:133,column:70}},{start:{line:133,column:73},end:{line:133,column:91}}],line:133},12:{loc:{start:{line:134,column:37},end:{line:134,column:63}},type:"cond-expr",locations:[{start:{line:134,column:48},end:{line:134,column:54}},{start:{line:134,column:57},end:{line:134,column:63}}],line:134}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/ScaleView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/ScaleView.ts"],names:[],mappings:"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",sourcesContent:["import { definedOptions } from '../model/definedOptions';\n\nexport default class ScaleView {\n  private parent!: HTMLElement;\n\n  private scale = document.createElement('div');\n\n  private scaleDivisions = document.createElement('div');\n\n  private scaleLabels = document.createElement('div');\n\n  private scaleValues!: number[];\n\n  constructor(parent: HTMLElement) {\n    this.init(parent);\n  }\n\n  public setScale(options: definedOptions) {\n    const { isVertical, hasScale } = options;\n    if (hasScale) {\n      this.setScaleStyle(isVertical);\n      this.setStyles(this.scaleDivisions, isVertical);\n      this.setStyles(this.scaleLabels, isVertical);\n      this.drawScale(options);\n      if (isVertical) {\n        this.parent.prepend(this.scale);\n        this.scale.append(this.scaleLabels, this.scaleDivisions);\n      } else {\n        this.parent.append(this.scale);\n        this.scale.append(this.scaleDivisions, this.scaleLabels);\n      }\n    }\n  }\n\n  public updateScale(options: definedOptions) {\n    this.removeScale();\n    if (options.hasScale) {\n      this.setScale(options);\n    }\n  }\n\n  private removeScale() {\n    this.clearScale();\n    this.scaleDivisions.remove();\n    this.scaleLabels.remove();\n    this.scale.remove();\n  }\n\n  private clearScale() {\n    this.scaleDivisions.innerHTML = '';\n    this.scaleLabels.innerHTML = '';\n    this.scale.innerHTML = '';\n    this.clearStyles();\n  }\n\n  private drawScale(options: definedOptions) {\n    const { min, max, step, isVertical } = options;\n    this.scaleValues = this.calculateDivisions(min, max, step);\n    if (isVertical) {\n      this.scaleValues = this.scaleValues.reverse();\n    }\n    const valuesCount = max - min;\n    this.scaleValues.forEach((value, index) => {\n      const ratio = (value - this.scaleValues[index - 1]) / valuesCount;\n      // const isMaxLimit = this.scaleValues.length === index + 1;\n      // const isMinLimit = index === 0;\n      this.scaleDivisions.append(this.addDivisionElement(ratio, isVertical));\n      this.scaleLabels.append(this.addLabelElement(value, ratio, isVertical));\n    });\n  }\n\n  private calculateDivisions(min: number, max: number, step: number): number[] {\n    const scaleValues: number[] = [min];\n    const valuesCount = max - min;\n    let value = min;\n    let prev = min;\n    for (value; value < max; value += step) {\n      if ((value - prev) / valuesCount < 0.2) {\n        continue;\n      }\n      scaleValues.push(value);\n      prev = value;\n    }\n    scaleValues.push(max);\n    return scaleValues;\n  }\n\n  private setScaleStyle(vertical: boolean) {\n    this.scale.style.position = 'absolute';\n    this.scaleLabels.style.position = 'relative';\n    if (vertical) {\n      this.scale.style.right = '100%';\n      const length = this.parent.offsetHeight;\n      this.scale.style.height = `${length}px`;\n      this.scale.style.display = 'flex';\n      this.scaleDivisions.style.width = '15px';\n    } else {\n      this.scale.style.top = '100%';\n      this.scale.style.width = '100%';\n      this.scale.style.display = 'block';\n      this.scaleDivisions.style.height = '15px';\n    }\n  }\n\n  private setStyles(element: HTMLElement, vertical: boolean) {\n    const styledElement = element;\n    styledElement.style.display = 'flex';\n    styledElement.style.justifyContent = 'space-between';\n    if (vertical) {\n      styledElement.style.flexDirection = 'column';\n    }\n  }\n\n  private clearStyles() {\n    this.scale.style.top = 'auto';\n    this.scale.style.width = 'auto';\n    this.scale.style.height = 'auto';\n    this.scale.style.right = 'auto';\n    this.scaleDivisions.style.height = 'auto';\n    this.scaleDivisions.style.width = 'auto';\n    this.scaleDivisions.style.flexDirection = 'row';\n    this.scaleLabels.style.flexDirection = 'row';\n  }\n\n  private addDivisionElement(ratio: number, vertical: boolean): HTMLElement {\n    const division = document.createElement('div');\n    division.style.flexGrow = String(ratio);\n    if (vertical) {\n      division.style.borderBottom = '1px solid grey';\n    } else {\n      division.style.borderRight = '1px solid grey';\n    }\n    return division;\n  }\n\n  private addLabelElement(value: number, ratio: number, vertical: boolean): HTMLElement {\n    const scaleLabel = document.createElement('div');\n    const scaleLabelContainer = document.createElement('div');\n    scaleLabelContainer.style.position = 'relative';\n    scaleLabel.style.position = 'absolute';\n    scaleLabel.innerText = String(value);\n    if (ratio) {\n      scaleLabelContainer.style.flexGrow = String(ratio);\n      scaleLabelContainer.append(scaleLabel);\n      scaleLabel.style.bottom = vertical ? '0px' : 'none';\n      scaleLabel.style.right = '0px';\n      scaleLabel.style.transform = vertical ? 'translateY(50%)' : 'translateX(50%)';\n    } else {\n      scaleLabel.style.transform = vertical ? 'translateY(-50%)' : 'translateX(-50%)';\n      scaleLabel.style.right = vertical ? '100%' : 'none';\n    }\n    scaleLabelContainer.append(scaleLabel);\n    return scaleLabelContainer;\n  }\n\n  private init(parent: HTMLElement): void {\n    this.parent = parent;\n    this.scale.classList.add('slider__scale');\n    this.scaleDivisions.classList.add('slider__scale-divisions');\n    this.scaleLabels.classList.add('slider__scale-labels');\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class y{constructor(e){M.f[0]++,M.s[0]++,this.scale=document.createElement("div"),M.s[1]++,this.scaleDivisions=document.createElement("div"),M.s[2]++,this.scaleLabels=document.createElement("div"),M.s[3]++,this.init(e)}setScale(e){M.f[1]++;const{isVertical:n,hasScale:A}=(M.s[4]++,e);M.s[5]++,A?(M.b[0][0]++,M.s[6]++,this.setScaleStyle(n),M.s[7]++,this.setStyles(this.scaleDivisions,n),M.s[8]++,this.setStyles(this.scaleLabels,n),M.s[9]++,this.drawScale(e),M.s[10]++,n?(M.b[1][0]++,M.s[11]++,this.parent.prepend(this.scale),M.s[12]++,this.scale.append(this.scaleLabels,this.scaleDivisions)):(M.b[1][1]++,M.s[13]++,this.parent.append(this.scale),M.s[14]++,this.scale.append(this.scaleDivisions,this.scaleLabels))):M.b[0][1]++}updateScale(e){M.f[2]++,M.s[15]++,this.removeScale(),M.s[16]++,e.hasScale?(M.b[2][0]++,M.s[17]++,this.setScale(e)):M.b[2][1]++}removeScale(){M.f[3]++,M.s[18]++,this.clearScale(),M.s[19]++,this.scaleDivisions.remove(),M.s[20]++,this.scaleLabels.remove(),M.s[21]++,this.scale.remove()}clearScale(){M.f[4]++,M.s[22]++,this.scaleDivisions.innerHTML="",M.s[23]++,this.scaleLabels.innerHTML="",M.s[24]++,this.scale.innerHTML="",M.s[25]++,this.clearStyles()}drawScale(e){M.f[5]++;const{min:n,max:A,step:t,isVertical:l}=(M.s[26]++,e);M.s[27]++,this.scaleValues=this.calculateDivisions(n,A,t),M.s[28]++,l?(M.b[3][0]++,M.s[29]++,this.scaleValues=this.scaleValues.reverse()):M.b[3][1]++;const i=(M.s[30]++,A-n);M.s[31]++,this.scaleValues.forEach((e,n)=>{M.f[6]++;const A=(M.s[32]++,(e-this.scaleValues[n-1])/i);M.s[33]++,this.scaleDivisions.append(this.addDivisionElement(A,l)),M.s[34]++,this.scaleLabels.append(this.addLabelElement(e,A,l))})}calculateDivisions(e,n,A){M.f[7]++;const t=(M.s[35]++,[e]),l=(M.s[36]++,n-e);let i=(M.s[37]++,e),o=(M.s[38]++,e);for(M.s[39]++;i<n;i+=A)M.s[40]++,(i-o)/l<.2?(M.b[4][0]++,M.s[41]++):(M.b[4][1]++,M.s[42]++,t.push(i),M.s[43]++,o=i);return M.s[44]++,t.push(n),M.s[45]++,t}setScaleStyle(e){if(M.f[8]++,M.s[46]++,this.scale.style.position="absolute",M.s[47]++,this.scaleLabels.style.position="relative",M.s[48]++,e){M.b[5][0]++,M.s[49]++,this.scale.style.right="100%";const e=(M.s[50]++,this.parent.offsetHeight);M.s[51]++,this.scale.style.height=`${e}px`,M.s[52]++,this.scale.style.display="flex",M.s[53]++,this.scaleDivisions.style.width="15px"}else M.b[5][1]++,M.s[54]++,this.scale.style.top="100%",M.s[55]++,this.scale.style.width="100%",M.s[56]++,this.scale.style.display="block",M.s[57]++,this.scaleDivisions.style.height="15px"}setStyles(e,n){M.f[9]++;const A=(M.s[58]++,e);M.s[59]++,A.style.display="flex",M.s[60]++,A.style.justifyContent="space-between",M.s[61]++,n?(M.b[6][0]++,M.s[62]++,A.style.flexDirection="column"):M.b[6][1]++}clearStyles(){M.f[10]++,M.s[63]++,this.scale.style.top="auto",M.s[64]++,this.scale.style.width="auto",M.s[65]++,this.scale.style.height="auto",M.s[66]++,this.scale.style.right="auto",M.s[67]++,this.scaleDivisions.style.height="auto",M.s[68]++,this.scaleDivisions.style.width="auto",M.s[69]++,this.scaleDivisions.style.flexDirection="row",M.s[70]++,this.scaleLabels.style.flexDirection="row"}addDivisionElement(e,n){M.f[11]++;const A=(M.s[71]++,document.createElement("div"));return M.s[72]++,A.style.flexGrow=String(e),M.s[73]++,n?(M.b[7][0]++,M.s[74]++,A.style.borderBottom="1px solid grey"):(M.b[7][1]++,M.s[75]++,A.style.borderRight="1px solid grey"),M.s[76]++,A}addLabelElement(e,n,A){M.f[12]++;const t=(M.s[77]++,document.createElement("div")),l=(M.s[78]++,document.createElement("div"));return M.s[79]++,l.style.position="relative",M.s[80]++,t.style.position="absolute",M.s[81]++,t.innerText=String(e),M.s[82]++,n?(M.b[8][0]++,M.s[83]++,l.style.flexGrow=String(n),M.s[84]++,l.append(t),M.s[85]++,t.style.bottom=A?(M.b[9][0]++,"0px"):(M.b[9][1]++,"none"),M.s[86]++,t.style.right="0px",M.s[87]++,t.style.transform=A?(M.b[10][0]++,"translateY(50%)"):(M.b[10][1]++,"translateX(50%)")):(M.b[8][1]++,M.s[88]++,t.style.transform=A?(M.b[11][0]++,"translateY(-50%)"):(M.b[11][1]++,"translateX(-50%)"),M.s[89]++,t.style.right=A?(M.b[12][0]++,"100%"):(M.b[12][1]++,"none")),M.s[90]++,l.append(t),M.s[91]++,l}init(e){M.f[13]++,M.s[92]++,this.parent=e,M.s[93]++,this.scale.classList.add("slider__scale"),M.s[94]++,this.scaleDivisions.classList.add("slider__scale-divisions"),M.s[95]++,this.scaleLabels.classList.add("slider__scale-labels")}}var G=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",n="c5b763ccd7381c3562e1ef1305644de281c73ec7",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",statementMap:{0:{start:{line:1,column:17},end:{line:6,column:1}},1:{start:{line:2,column:12},end:{line:2,column:28}},2:{start:{line:2,column:34},end:{line:2,column:125}},3:{start:{line:3,column:4},end:{line:4,column:150}},4:{start:{line:3,column:79},end:{line:3,column:131}},5:{start:{line:4,column:9},end:{line:4,column:150}},6:{start:{line:4,column:58},end:{line:4,column:150}},7:{start:{line:4,column:81},end:{line:4,column:150}},8:{start:{line:5,column:4},end:{line:5,column:66}},9:{start:{line:14,column:8},end:{line:14,column:44}},10:{start:{line:15,column:8},end:{line:15,column:56}},11:{start:{line:16,column:8},end:{line:16,column:27}},12:{start:{line:17,column:8},end:{line:17,column:34}},13:{start:{line:18,column:8},end:{line:18,column:35}},14:{start:{line:21,column:41},end:{line:21,column:53}},15:{start:{line:22,column:8},end:{line:22,column:38}},16:{start:{line:23,column:8},end:{line:23,column:40}},17:{start:{line:24,column:8},end:{line:24,column:32}},18:{start:{line:25,column:8},end:{line:25,column:28}},19:{start:{line:26,column:8},end:{line:26,column:34}},20:{start:{line:27,column:8},end:{line:27,column:96}},21:{start:{line:28,column:8},end:{line:28,column:45}},22:{start:{line:31,column:8},end:{line:31,column:29}},23:{start:{line:34,column:8},end:{line:34,column:66}},24:{start:{line:34,column:44},end:{line:34,column:64}},25:{start:{line:37,column:8},end:{line:44,column:9}},26:{start:{line:38,column:12},end:{line:38,column:62}},27:{start:{line:39,column:12},end:{line:39,column:57}},28:{start:{line:42,column:12},end:{line:42,column:60}},29:{start:{line:43,column:12},end:{line:43,column:59}},30:{start:{line:48,column:43},end:{line:48,column:73}},31:{start:{line:49,column:34},end:{line:49,column:63}},32:{start:{line:50,column:8},end:{line:63,column:9}},33:{start:{line:51,column:38},end:{line:51,column:67}},34:{start:{line:52,column:36},end:{line:52,column:70}},35:{start:{line:53,column:12},end:{line:62,column:13}},36:{start:{line:54,column:16},end:{line:54,column:43}},37:{start:{line:55,column:16},end:{line:55,column:88}},38:{start:{line:58,column:16},end:{line:58,column:59}},39:{start:{line:59,column:16},end:{line:61,column:17}},40:{start:{line:60,column:20},end:{line:60,column:62}},41:{start:{line:66,column:20},end:{line:66,column:51}},42:{start:{line:67,column:8},end:{line:69,column:9}},43:{start:{line:68,column:12},end:{line:68,column:44}},44:{start:{line:70,column:8},end:{line:70,column:38}},45:{start:{line:73,column:8},end:{line:73,column:31}},46:{start:{line:74,column:8},end:{line:74,column:29}},47:{start:{line:75,column:8},end:{line:75,column:54}},48:{start:{line:76,column:8},end:{line:76,column:44}},49:{start:{line:77,column:8},end:{line:77,column:53}},50:{start:{line:78,column:8},end:{line:78,column:27}},51:{start:{line:79,column:8},end:{line:79,column:28}},52:{start:{line:80,column:8},end:{line:80,column:34}},53:{start:{line:81,column:8},end:{line:81,column:26}},54:{start:{line:82,column:8},end:{line:87,column:11}},55:{start:{line:88,column:8},end:{line:88,column:48}},56:{start:{line:89,column:8},end:{line:89,column:42}},57:{start:{line:92,column:8},end:{line:94,column:11}},58:{start:{line:93,column:12},end:{line:93,column:92}},59:{start:{line:95,column:8},end:{line:95,column:86}},60:{start:{line:98,column:86},end:{line:98,column:95}},61:{start:{line:99,column:8},end:{line:100,column:35}},62:{start:{line:100,column:12},end:{line:100,column:35}},63:{start:{line:101,column:8},end:{line:102,column:35}},64:{start:{line:102,column:12},end:{line:102,column:35}},65:{start:{line:103,column:8},end:{line:104,column:41}},66:{start:{line:104,column:12},end:{line:104,column:41}},67:{start:{line:105,column:8},end:{line:106,column:49}},68:{start:{line:106,column:12},end:{line:106,column:49}},69:{start:{line:107,column:8},end:{line:108,column:37}},70:{start:{line:108,column:12},end:{line:108,column:37}},71:{start:{line:109,column:8},end:{line:110,column:45}},72:{start:{line:110,column:12},end:{line:110,column:45}},73:{start:{line:111,column:8},end:{line:112,column:47}},74:{start:{line:112,column:12},end:{line:112,column:47}},75:{start:{line:113,column:8},end:{line:114,column:45}},76:{start:{line:114,column:12},end:{line:114,column:45}},77:{start:{line:117,column:8},end:{line:119,column:11}},78:{start:{line:118,column:12},end:{line:118,column:89}},79:{start:{line:120,column:8},end:{line:120,column:57}},80:{start:{line:121,column:8},end:{line:121,column:57}},81:{start:{line:122,column:8},end:{line:122,column:41}},82:{start:{line:123,column:8},end:{line:125,column:9}},83:{start:{line:124,column:12},end:{line:124,column:45}},84:{start:{line:128,column:49},end:{line:128,column:61}},85:{start:{line:129,column:8},end:{line:132,column:11}},86:{start:{line:130,column:43},end:{line:130,column:89}},87:{start:{line:131,column:12},end:{line:131,column:56}},88:{start:{line:133,column:8},end:{line:138,column:9}},89:{start:{line:134,column:12},end:{line:134,column:63}},90:{start:{line:136,column:13},end:{line:138,column:9}},91:{start:{line:137,column:12},end:{line:137,column:61}},92:{start:{line:141,column:8},end:{line:141,column:123}},93:{start:{line:141,column:50},end:{line:141,column:121}},94:{start:{line:144,column:30},end:{line:144,column:41}},95:{start:{line:145,column:36},end:{line:145,column:132}},96:{start:{line:145,column:65},end:{line:145,column:131}},97:{start:{line:146,column:8},end:{line:148,column:9}},98:{start:{line:147,column:12},end:{line:147,column:42}},99:{start:{line:149,column:32},end:{line:152,column:9}},100:{start:{line:153,column:42},end:{line:153,column:83}},101:{start:{line:154,column:8},end:{line:162,column:9}},102:{start:{line:155,column:12},end:{line:155,column:49}},103:{start:{line:157,column:13},end:{line:162,column:9}},104:{start:{line:158,column:12},end:{line:158,column:49}},105:{start:{line:161,column:12},end:{line:161,column:49}},106:{start:{line:163,column:8},end:{line:163,column:59}},107:{start:{line:166,column:8},end:{line:166,column:32}},108:{start:{line:167,column:23},end:{line:167,column:35}},109:{start:{line:168,column:8},end:{line:168,column:41}},110:{start:{line:169,column:8},end:{line:169,column:77}},111:{start:{line:170,column:8},end:{line:170,column:73}},112:{start:{line:173,column:8},end:{line:178,column:9}},113:{start:{line:174,column:12},end:{line:174,column:55}},114:{start:{line:177,column:12},end:{line:177,column:55}},115:{start:{line:181,column:33},end:{line:181,column:94}},116:{start:{line:182,column:20},end:{line:188,column:32}},117:{start:{line:189,column:8},end:{line:193,column:9}},118:{start:{line:190,column:12},end:{line:192,column:15}},119:{start:{line:194,column:8},end:{line:228,column:9}},120:{start:{line:195,column:48},end:{line:197,column:67}},121:{start:{line:198,column:52},end:{line:198,column:120}},122:{start:{line:199,column:12},end:{line:207,column:13}},123:{start:{line:200,column:16},end:{line:200,column:47}},124:{start:{line:201,column:16},end:{line:201,column:66}},125:{start:{line:202,column:16},end:{line:202,column:67}},126:{start:{line:205,column:16},end:{line:205,column:67}},127:{start:{line:206,column:16},end:{line:206,column:66}},128:{start:{line:208,column:12},end:{line:210,column:15}},129:{start:{line:212,column:13},end:{line:228,column:9}},130:{start:{line:213,column:45},end:{line:215,column:67}},131:{start:{line:216,column:12},end:{line:224,column:13}},132:{start:{line:217,column:16},end:{line:217,column:47}},133:{start:{line:218,column:16},end:{line:218,column:67}},134:{start:{line:219,column:16},end:{line:219,column:66}},135:{start:{line:222,column:16},end:{line:222,column:66}},136:{start:{line:223,column:16},end:{line:223,column:67}},137:{start:{line:225,column:12},end:{line:227,column:15}},138:{start:{line:231,column:8},end:{line:231,column:80}},139:{start:{line:232,column:8},end:{line:232,column:76}},140:{start:{line:235,column:0},end:{line:237,column:58}},141:{start:{line:238,column:0},end:{line:240,column:55}},142:{start:{line:241,column:0},end:{line:243,column:56}},143:{start:{line:244,column:0},end:{line:246,column:54}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:1,column:46},end:{line:1,column:47}},loc:{start:{line:1,column:87},end:{line:6,column:1}},line:1},1:{name:"(anonymous_1)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:33},end:{line:19,column:5}},line:13},2:{name:"(anonymous_2)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:22},end:{line:29,column:5}},line:20},3:{name:"(anonymous_3)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:18},end:{line:32,column:5}},line:30},4:{name:"(anonymous_4)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:26},end:{line:35,column:5}},line:33},5:{name:"(anonymous_5)",decl:{start:{line:34,column:33},end:{line:34,column:34}},loc:{start:{line:34,column:44},end:{line:34,column:64}},line:34},6:{name:"(anonymous_6)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:29},end:{line:45,column:5}},line:36},7:{name:"(anonymous_7)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:20},end:{line:64,column:5}},line:46},8:{name:"(anonymous_8)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:38},end:{line:71,column:5}},line:65},9:{name:"(anonymous_9)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:26},end:{line:90,column:5}},line:72},10:{name:"(anonymous_10)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:17},end:{line:96,column:5}},line:91},11:{name:"(anonymous_11)",decl:{start:{line:92,column:30},end:{line:92,column:31}},loc:{start:{line:92,column:41},end:{line:94,column:9}},line:92},12:{name:"(anonymous_12)",decl:{start:{line:97,column:4},end:{line:97,column:5}},loc:{start:{line:97,column:29},end:{line:115,column:5}},line:97},13:{name:"(anonymous_13)",decl:{start:{line:116,column:4},end:{line:116,column:5}},loc:{start:{line:116,column:18},end:{line:126,column:5}},line:116},14:{name:"(anonymous_14)",decl:{start:{line:117,column:36},end:{line:117,column:37}},loc:{start:{line:117,column:42},end:{line:119,column:9}},line:117},15:{name:"(anonymous_15)",decl:{start:{line:127,column:4},end:{line:127,column:5}},loc:{start:{line:127,column:25},end:{line:139,column:5}},line:127},16:{name:"(anonymous_16)",decl:{start:{line:129,column:30},end:{line:129,column:31}},loc:{start:{line:129,column:50},end:{line:132,column:9}},line:129},17:{name:"(anonymous_17)",decl:{start:{line:140,column:4},end:{line:140,column:5}},loc:{start:{line:140,column:19},end:{line:142,column:5}},line:140},18:{name:"(anonymous_18)",decl:{start:{line:141,column:30},end:{line:141,column:31}},loc:{start:{line:141,column:50},end:{line:141,column:121}},line:141},19:{name:"(anonymous_19)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:37},end:{line:164,column:5}},line:143},20:{name:"(anonymous_20)",decl:{start:{line:145,column:54},end:{line:145,column:55}},loc:{start:{line:145,column:65},end:{line:145,column:131}},line:145},21:{name:"(anonymous_21)",decl:{start:{line:165,column:4},end:{line:165,column:5}},loc:{start:{line:165,column:34},end:{line:171,column:5}},line:165},22:{name:"(anonymous_22)",decl:{start:{line:172,column:4},end:{line:172,column:5}},loc:{start:{line:172,column:31},end:{line:179,column:5}},line:172},23:{name:"(anonymous_23)",decl:{start:{line:180,column:4},end:{line:180,column:5}},loc:{start:{line:180,column:33},end:{line:229,column:5}},line:180},24:{name:"(anonymous_24)",decl:{start:{line:230,column:4},end:{line:230,column:5}},loc:{start:{line:230,column:28},end:{line:233,column:5}},line:230}},branchMap:{0:{loc:{start:{line:1,column:17},end:{line:6,column:1}},type:"binary-expr",locations:[{start:{line:1,column:18},end:{line:1,column:22}},{start:{line:1,column:26},end:{line:1,column:41}},{start:{line:1,column:46},end:{line:6,column:1}}],line:1},1:{loc:{start:{line:2,column:34},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:42},end:{line:2,column:48}},{start:{line:2,column:51},end:{line:2,column:125}}],line:2},2:{loc:{start:{line:2,column:51},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:67},end:{line:2,column:118}},{start:{line:2,column:121},end:{line:2,column:125}}],line:2},3:{loc:{start:{line:3,column:4},end:{line:4,column:150}},type:"if",locations:[{start:{line:3,column:4},end:{line:4,column:150}},{start:{line:3,column:4},end:{line:4,column:150}}],line:3},4:{loc:{start:{line:3,column:8},end:{line:3,column:77}},type:"binary-expr",locations:[{start:{line:3,column:8},end:{line:3,column:35}},{start:{line:3,column:39},end:{line:3,column:77}}],line:3},5:{loc:{start:{line:4,column:58},end:{line:4,column:150}},type:"if",locations:[{start:{line:4,column:58},end:{line:4,column:150}},{start:{line:4,column:58},end:{line:4,column:150}}],line:4},6:{loc:{start:{line:4,column:85},end:{line:4,column:149}},type:"binary-expr",locations:[{start:{line:4,column:86},end:{line:4,column:143}},{start:{line:4,column:148},end:{line:4,column:149}}],line:4},7:{loc:{start:{line:4,column:86},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:94},end:{line:4,column:98}},{start:{line:4,column:101},end:{line:4,column:143}}],line:4},8:{loc:{start:{line:4,column:101},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:109},end:{line:4,column:126}},{start:{line:4,column:129},end:{line:4,column:143}}],line:4},9:{loc:{start:{line:5,column:11},end:{line:5,column:62}},type:"binary-expr",locations:[{start:{line:5,column:11},end:{line:5,column:16}},{start:{line:5,column:20},end:{line:5,column:21}},{start:{line:5,column:25},end:{line:5,column:62}}],line:5},10:{loc:{start:{line:37,column:8},end:{line:44,column:9}},type:"if",locations:[{start:{line:37,column:8},end:{line:44,column:9}},{start:{line:37,column:8},end:{line:44,column:9}}],line:37},11:{loc:{start:{line:50,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:63,column:9}},{start:{line:50,column:8},end:{line:63,column:9}}],line:50},12:{loc:{start:{line:53,column:12},end:{line:62,column:13}},type:"if",locations:[{start:{line:53,column:12},end:{line:62,column:13}},{start:{line:53,column:12},end:{line:62,column:13}}],line:53},13:{loc:{start:{line:55,column:16},end:{line:55,column:87}},type:"cond-expr",locations:[{start:{line:55,column:67},end:{line:55,column:73}},{start:{line:55,column:76},end:{line:55,column:87}}],line:55},14:{loc:{start:{line:55,column:16},end:{line:55,column:64}},type:"binary-expr",locations:[{start:{line:55,column:16},end:{line:55,column:47}},{start:{line:55,column:51},end:{line:55,column:64}}],line:55},15:{loc:{start:{line:59,column:16},end:{line:61,column:17}},type:"if",locations:[{start:{line:59,column:16},end:{line:61,column:17}},{start:{line:59,column:16},end:{line:61,column:17}}],line:59},16:{loc:{start:{line:59,column:20},end:{line:59,column:61}},type:"binary-expr",locations:[{start:{line:59,column:20},end:{line:59,column:35}},{start:{line:59,column:39},end:{line:59,column:61}}],line:59},17:{loc:{start:{line:67,column:8},end:{line:69,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:69,column:9}},{start:{line:67,column:8},end:{line:69,column:9}}],line:67},18:{loc:{start:{line:99,column:8},end:{line:100,column:35}},type:"if",locations:[{start:{line:99,column:8},end:{line:100,column:35}},{start:{line:99,column:8},end:{line:100,column:35}}],line:99},19:{loc:{start:{line:101,column:8},end:{line:102,column:35}},type:"if",locations:[{start:{line:101,column:8},end:{line:102,column:35}},{start:{line:101,column:8},end:{line:102,column:35}}],line:101},20:{loc:{start:{line:103,column:8},end:{line:104,column:41}},type:"if",locations:[{start:{line:103,column:8},end:{line:104,column:41}},{start:{line:103,column:8},end:{line:104,column:41}}],line:103},21:{loc:{start:{line:105,column:8},end:{line:106,column:49}},type:"if",locations:[{start:{line:105,column:8},end:{line:106,column:49}},{start:{line:105,column:8},end:{line:106,column:49}}],line:105},22:{loc:{start:{line:107,column:8},end:{line:108,column:37}},type:"if",locations:[{start:{line:107,column:8},end:{line:108,column:37}},{start:{line:107,column:8},end:{line:108,column:37}}],line:107},23:{loc:{start:{line:109,column:8},end:{line:110,column:45}},type:"if",locations:[{start:{line:109,column:8},end:{line:110,column:45}},{start:{line:109,column:8},end:{line:110,column:45}}],line:109},24:{loc:{start:{line:111,column:8},end:{line:112,column:47}},type:"if",locations:[{start:{line:111,column:8},end:{line:112,column:47}},{start:{line:111,column:8},end:{line:112,column:47}}],line:111},25:{loc:{start:{line:113,column:8},end:{line:114,column:45}},type:"if",locations:[{start:{line:113,column:8},end:{line:114,column:45}},{start:{line:113,column:8},end:{line:114,column:45}}],line:113},26:{loc:{start:{line:123,column:8},end:{line:125,column:9}},type:"if",locations:[{start:{line:123,column:8},end:{line:125,column:9}},{start:{line:123,column:8},end:{line:125,column:9}}],line:123},27:{loc:{start:{line:133,column:8},end:{line:138,column:9}},type:"if",locations:[{start:{line:133,column:8},end:{line:138,column:9}},{start:{line:133,column:8},end:{line:138,column:9}}],line:133},28:{loc:{start:{line:136,column:13},end:{line:138,column:9}},type:"if",locations:[{start:{line:136,column:13},end:{line:138,column:9}},{start:{line:136,column:13},end:{line:138,column:9}}],line:136},29:{loc:{start:{line:146,column:8},end:{line:148,column:9}},type:"if",locations:[{start:{line:146,column:8},end:{line:148,column:9}},{start:{line:146,column:8},end:{line:148,column:9}}],line:146},30:{loc:{start:{line:154,column:8},end:{line:162,column:9}},type:"if",locations:[{start:{line:154,column:8},end:{line:162,column:9}},{start:{line:154,column:8},end:{line:162,column:9}}],line:154},31:{loc:{start:{line:157,column:13},end:{line:162,column:9}},type:"if",locations:[{start:{line:157,column:13},end:{line:162,column:9}},{start:{line:157,column:13},end:{line:162,column:9}}],line:157},32:{loc:{start:{line:157,column:17},end:{line:157,column:86}},type:"binary-expr",locations:[{start:{line:157,column:17},end:{line:157,column:42}},{start:{line:157,column:46},end:{line:157,column:86}}],line:157},33:{loc:{start:{line:173,column:8},end:{line:178,column:9}},type:"if",locations:[{start:{line:173,column:8},end:{line:178,column:9}},{start:{line:173,column:8},end:{line:178,column:9}}],line:173},34:{loc:{start:{line:182,column:20},end:{line:188,column:32}},type:"cond-expr",locations:[{start:{line:183,column:14},end:{line:185,column:32}},{start:{line:186,column:14},end:{line:188,column:32}}],line:182},35:{loc:{start:{line:189,column:8},end:{line:193,column:9}},type:"if",locations:[{start:{line:189,column:8},end:{line:193,column:9}},{start:{line:189,column:8},end:{line:193,column:9}}],line:189},36:{loc:{start:{line:194,column:8},end:{line:228,column:9}},type:"if",locations:[{start:{line:194,column:8},end:{line:228,column:9}},{start:{line:194,column:8},end:{line:228,column:9}}],line:194},37:{loc:{start:{line:195,column:48},end:{line:197,column:67}},type:"cond-expr",locations:[{start:{line:196,column:18},end:{line:196,column:48}},{start:{line:197,column:18},end:{line:197,column:67}}],line:195},38:{loc:{start:{line:198,column:52},end:{line:198,column:120}},type:"binary-expr",locations:[{start:{line:198,column:52},end:{line:198,column:95}},{start:{line:198,column:99},end:{line:198,column:120}}],line:198},39:{loc:{start:{line:199,column:12},end:{line:207,column:13}},type:"if",locations:[{start:{line:199,column:12},end:{line:207,column:13}},{start:{line:199,column:12},end:{line:207,column:13}}],line:199},40:{loc:{start:{line:199,column:16},end:{line:199,column:78}},type:"binary-expr",locations:[{start:{line:199,column:16},end:{line:199,column:43}},{start:{line:199,column:47},end:{line:199,column:78}}],line:199},41:{loc:{start:{line:212,column:13},end:{line:228,column:9}},type:"if",locations:[{start:{line:212,column:13},end:{line:228,column:9}},{start:{line:212,column:13},end:{line:228,column:9}}],line:212},42:{loc:{start:{line:213,column:45},end:{line:215,column:67}},type:"cond-expr",locations:[{start:{line:214,column:18},end:{line:214,column:48}},{start:{line:215,column:18},end:{line:215,column:67}}],line:213},43:{loc:{start:{line:216,column:12},end:{line:224,column:13}},type:"if",locations:[{start:{line:216,column:12},end:{line:224,column:13}},{start:{line:216,column:12},end:{line:224,column:13}}],line:216}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0,141:0,142:0,143:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0],33:[0,0],34:[0,0],35:[0,0],36:[0,0],37:[0,0],38:[0,0],39:[0,0],40:[0,0],41:[0,0],42:[0,0],43:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts"],names:[],mappings:"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",sourcesContent:["import bind from 'bind-decorator';\nimport HandlerView from './HandlerView';\nimport SelectedArea from './SelectedAreaView';\nimport ScaleView from './ScaleView';\nimport EventObserver from '../observer/observer';\nimport { sliderOptions } from '../model/sliderOptions';\nimport { definedOptions } from '../model/definedOptions';\n\nexport default class MainView {\n  public observer = new EventObserver();\n\n  private sliderBody = document.createElement('div');\n\n  private parent!: HTMLElement;\n\n  private selectedArea!: SelectedArea;\n\n  private scale!: ScaleView;\n\n  private handlers: HandlerView[] = [];\n\n  private options!: definedOptions;\n\n  private handlerTargetId = '';\n\n  constructor(parent: HTMLElement, options: definedOptions) {\n    this.init(parent, options);\n  }\n\n  public update(valueData: sliderOptions): void {\n    const { isVertical, hasRange } = this.options;\n    this.updateOptions(valueData);\n    this.setOrientation(isVertical);\n    this.setRange(hasRange);\n    this.updateLabels();\n    this.setHandlerPosition();\n    this.selectedArea.updateSelectedRange(hasRange, isVertical, this.getHandlersElements());\n    this.scale.updateScale(this.options);\n  }\n\n  public getHandlers(): HandlerView[] {\n    return this.handlers;\n  }\n\n  public getHandlersElements(): HTMLElement[] {\n    return this.handlers.map(handler => handler.getElement());\n  }\n\n  public setOrientation(vertical: boolean): void {\n    if (vertical) {\n      this.parent.classList.remove('slider_horizontal');\n      this.parent.classList.add('slider_vertical');\n    } else {\n      this.parent.classList.remove('slider_vertical');\n      this.parent.classList.add('slider_horizontal');\n    }\n  }\n\n  public setRange(range: boolean): void {\n    const maxHandlerElementIsDefined = this.handlers[1] !== undefined;\n    const minHandlerElement = this.handlers[0].getElement();\n    if (maxHandlerElementIsDefined) {\n      const maxHandlerElement = this.handlers[1].getElement();\n      const maxHandlerLabel = this.handlers[1].getLabelElement();\n      if (!range) {\n        maxHandlerElement.remove();\n        maxHandlerLabel?.remove();\n      } else {\n        minHandlerElement.after(maxHandlerElement);\n        if (maxHandlerLabel && this.options.hasLabels) {\n          maxHandlerElement.before(maxHandlerLabel);\n        }\n      }\n    }\n  }\n\n  public getCoordinates(element: HTMLElement, vertical: boolean): number {\n    const box = element.getBoundingClientRect();\n    if (vertical) {\n      return box.bottom + pageYOffset;\n    }\n    return box.left + pageXOffset;\n  }\n\n  private init(parent: HTMLElement, options: definedOptions): void {\n    this.options = options;\n    this.parent = parent;\n    this.sliderBody.classList.add('slider__body');\n    this.parent.append(this.sliderBody);\n    this.setOrientation(this.options.isVertical);\n    this.setHandlers();\n    this.updateLabels();\n    this.setHandlerPosition();\n    this.bindEvents();\n    this.selectedArea = new SelectedArea({\n      sliderBody: this.sliderBody,\n      hasRange: this.options.hasRange,\n      isVertical: this.options.isVertical,\n      handlers: this.getHandlersElements(),\n    });\n    this.scale = new ScaleView(this.parent);\n    this.scale.setScale(this.options);\n  }\n\n  private bindEvents(): void {\n    this.handlers.forEach(handler => {\n      handler.getElement().addEventListener('mousedown', this.handleHandlerMouseDown);\n    });\n    this.sliderBody.addEventListener('mousedown', this.handleSliderBodyMouseDown);\n  }\n\n  private updateOptions(valueData: sliderOptions): void {\n    const { min, max, values, isVertical, step, hasRange, hasLabels, hasScale } = valueData;\n    if (min !== undefined) this.options.min = min;\n    if (max !== undefined) this.options.max = max;\n    if (values !== undefined) this.options.values = values;\n    if (isVertical !== undefined) this.options.isVertical = isVertical;\n    if (step !== undefined) this.options.step = step;\n    if (hasRange !== undefined) this.options.hasRange = hasRange;\n    if (hasLabels !== undefined) this.options.hasLabels = hasLabels;\n    if (hasScale !== undefined) this.options.hasScale = hasScale;\n  }\n\n  private setHandlers(): void {\n    this.options.values.forEach(() => {\n      this.handlers.push(new HandlerView(this.sliderBody, this.options.hasLabels));\n    });\n    this.handlers[0].getElement().id = 'handler_min';\n    this.handlers[1].getElement().id = 'handler_max';\n    this.handlers[0].appendHandler();\n    if (this.options.hasRange) {\n      this.handlers[1].appendHandler();\n    }\n  }\n\n  private setHandlerPosition(): void {\n    const { values, min, max, isVertical } = this.options;\n    this.handlers.forEach((handler, index) => {\n      const handlerPositionOptions = { value: values[index], min, max, isVertical };\n      handler.setPosition(handlerPositionOptions);\n    });\n    if (this.options.values[0] === this.options.max) {\n      this.handlers[0].getElement().style.zIndex = '100';\n    } else if (this.options.values[0] === this.options.min) {\n      this.handlers[0].getElement().style.zIndex = '1';\n    }\n  }\n\n  private updateLabels(): void {\n    this.handlers.forEach((handler, index) =>\n      handler.updateLabel(this.options.hasLabels, this.options.values[index]),\n    );\n  }\n\n  @bind\n  private handleSliderBodyMouseDown(event: MouseEvent): void {\n    let clickCoordinate = event.pageX;\n    const handlersCoordinates = this.handlers.map(handler =>\n      this.getCoordinates(handler.getElement(), this.options.isVertical),\n    );\n    if (this.options.isVertical) {\n      clickCoordinate = event.pageY;\n    }\n    const handlerDistance = [\n      Math.abs(clickCoordinate - handlersCoordinates[0]),\n      Math.abs(clickCoordinate - handlersCoordinates[1]),\n    ];\n    const handlersAreOnSamePosition = handlerDistance[0] === handlerDistance[1];\n    if (handlerDistance[0] < handlerDistance[1]) {\n      this.handlerTargetId = 'handler_min';\n    } else if (handlersAreOnSamePosition && clickCoordinate < handlersCoordinates[0]) {\n      this.handlerTargetId = 'handler_min';\n    } else {\n      this.handlerTargetId = 'handler_max';\n    }\n\n    this.moveAt(clickCoordinate, this.handlerTargetId);\n  }\n\n  @bind\n  private handleHandlerMouseDown(event: MouseEvent): void {\n    event.stopPropagation();\n    const target = event.target as HTMLDivElement;\n    this.handlerTargetId = target.id;\n    document.addEventListener('mousemove', this.handleDocumentMouseMove);\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n\n  @bind\n  private handleDocumentMouseMove(e: MouseEvent): void {\n    if (this.options.isVertical) {\n      this.moveAt(e.pageY, this.handlerTargetId);\n    } else {\n      this.moveAt(e.pageX, this.handlerTargetId);\n    }\n  }\n\n  private moveAt(coordinate: number, targetId: string): void {\n    const sliderCoordinate = this.getCoordinates(this.sliderBody, this.options.isVertical);\n    let value = this.options.isVertical\n      ? ((sliderCoordinate - coordinate) / this.sliderBody.offsetHeight) *\n          (this.options.max - this.options.min) +\n        this.options.min\n      : ((coordinate - sliderCoordinate) / this.sliderBody.offsetWidth) *\n          (this.options.max - this.options.min) +\n        this.options.min;\n    if (!this.options.hasRange) {\n      this.observer.broadcast({\n        values: [value, this.options.values[1]],\n      });\n    }\n    if (targetId === 'handler_min') {\n      const minValueGreaterThanMaxValue =\n        this.options.min < 0\n          ? value > this.options.values[1]\n          : value + this.options.min > this.options.values[1];\n      const MaxRangeValueNotEqualToMaxLimit =\n        this.options.values[1] !== this.options.max && this.options.hasRange;\n      if (minValueGreaterThanMaxValue && MaxRangeValueNotEqualToMaxLimit) {\n        value = this.options.values[1];\n        this.handlers[0].getElement().style.zIndex = '10';\n        this.handlers[1].getElement().style.zIndex = '100';\n      } else {\n        this.handlers[0].getElement().style.zIndex = '100';\n        this.handlers[1].getElement().style.zIndex = '10';\n      }\n      this.observer.broadcast({\n        values: [value, this.options.values[1]],\n      });\n    } else if (targetId === 'handler_max') {\n      const maxValueLessThanMinValue =\n        this.options.min < 0\n          ? value < this.options.values[0]\n          : value + this.options.min < this.options.values[0];\n      if (maxValueLessThanMinValue) {\n        value = this.options.values[0];\n        this.handlers[0].getElement().style.zIndex = '100';\n        this.handlers[1].getElement().style.zIndex = '10';\n      } else {\n        this.handlers[0].getElement().style.zIndex = '10';\n        this.handlers[1].getElement().style.zIndex = '100';\n      }\n      this.observer.broadcast({\n        values: [this.options.values[0], value],\n      });\n    }\n  }\n\n  @bind\n  private handleDocumentMouseUp(): void {\n    document.removeEventListener('mousemove', this.handleDocumentMouseMove);\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}(),S=(G.s[0]++,void G.b[0][0]++&&(G.b[0][1]++,(void 0).__decorate)||(G.b[0][2]++,function(e,n,A,t){G.f[0]++;var l,i=(G.s[1]++,arguments.length),o=(G.s[2]++,i<3?(G.b[1][0]++,n):(G.b[1][1]++,null===t?(G.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(G.b[2][1]++,t)));if(G.s[3]++,G.b[4][0]++,"object"==typeof Reflect&&(G.b[4][1]++,"function"==typeof Reflect.decorate))G.b[3][0]++,G.s[4]++,o=Reflect.decorate(e,n,A,t);else{G.b[3][1]++,G.s[5]++;for(var s=e.length-1;s>=0;s--)G.s[6]++,(l=e[s])?(G.b[5][0]++,G.s[7]++,G.b[6][0]++,o=(i<3?(G.b[7][0]++,l(o)):(G.b[7][1]++,i>3?(G.b[8][0]++,l(n,A,o)):(G.b[8][1]++,l(n,A))))||(G.b[6][1]++,o)):G.b[5][1]++}return G.s[8]++,G.b[9][0]++,i>3&&(G.b[9][1]++,o)&&(G.b[9][2]++,Object.defineProperty(n,A,o)),o}));class Q{constructor(e,n){G.f[1]++,G.s[9]++,this.observer=new r,G.s[10]++,this.sliderBody=document.createElement("div"),G.s[11]++,this.handlers=[],G.s[12]++,this.handlerTargetId="",G.s[13]++,this.init(e,n)}update(e){G.f[2]++;const{isVertical:n,hasRange:A}=(G.s[14]++,this.options);G.s[15]++,this.updateOptions(e),G.s[16]++,this.setOrientation(n),G.s[17]++,this.setRange(A),G.s[18]++,this.updateLabels(),G.s[19]++,this.setHandlerPosition(),G.s[20]++,this.selectedArea.updateSelectedRange(A,n,this.getHandlersElements()),G.s[21]++,this.scale.updateScale(this.options)}getHandlers(){return G.f[3]++,G.s[22]++,this.handlers}getHandlersElements(){return G.f[4]++,G.s[23]++,this.handlers.map(e=>(G.f[5]++,G.s[24]++,e.getElement()))}setOrientation(e){G.f[6]++,G.s[25]++,e?(G.b[10][0]++,G.s[26]++,this.parent.classList.remove("slider_horizontal"),G.s[27]++,this.parent.classList.add("slider_vertical")):(G.b[10][1]++,G.s[28]++,this.parent.classList.remove("slider_vertical"),G.s[29]++,this.parent.classList.add("slider_horizontal"))}setRange(e){var n;G.f[7]++;const A=(G.s[30]++,void 0!==this.handlers[1]),t=(G.s[31]++,this.handlers[0].getElement());if(G.s[32]++,A){G.b[11][0]++;const A=(G.s[33]++,this.handlers[1].getElement()),l=(G.s[34]++,this.handlers[1].getLabelElement());G.s[35]++,e?(G.b[12][1]++,G.s[38]++,t.after(A),G.s[39]++,G.b[16][0]++,l&&(G.b[16][1]++,this.options.hasLabels)?(G.b[15][0]++,G.s[40]++,A.before(l)):G.b[15][1]++):(G.b[12][0]++,G.s[36]++,A.remove(),G.s[37]++,G.b[14][0]++,null===(n=l)||(G.b[14][1]++,void 0===n)?G.b[13][0]++:(G.b[13][1]++,n.remove()))}else G.b[11][1]++}getCoordinates(e,n){G.f[8]++;const A=(G.s[41]++,e.getBoundingClientRect());return G.s[42]++,n?(G.b[17][0]++,G.s[43]++,A.bottom+pageYOffset):(G.b[17][1]++,G.s[44]++,A.left+pageXOffset)}init(e,n){G.f[9]++,G.s[45]++,this.options=n,G.s[46]++,this.parent=e,G.s[47]++,this.sliderBody.classList.add("slider__body"),G.s[48]++,this.parent.append(this.sliderBody),G.s[49]++,this.setOrientation(this.options.isVertical),G.s[50]++,this.setHandlers(),G.s[51]++,this.updateLabels(),G.s[52]++,this.setHandlerPosition(),G.s[53]++,this.bindEvents(),G.s[54]++,this.selectedArea=new b({sliderBody:this.sliderBody,hasRange:this.options.hasRange,isVertical:this.options.isVertical,handlers:this.getHandlersElements()}),G.s[55]++,this.scale=new y(this.parent),G.s[56]++,this.scale.setScale(this.options)}bindEvents(){G.f[10]++,G.s[57]++,this.handlers.forEach(e=>{G.f[11]++,G.s[58]++,e.getElement().addEventListener("mousedown",this.handleHandlerMouseDown)}),G.s[59]++,this.sliderBody.addEventListener("mousedown",this.handleSliderBodyMouseDown)}updateOptions(e){G.f[12]++;const{min:n,max:A,values:t,isVertical:l,step:i,hasRange:o,hasLabels:s,hasScale:a}=(G.s[60]++,e);G.s[61]++,void 0!==n?(G.b[18][0]++,G.s[62]++,this.options.min=n):G.b[18][1]++,G.s[63]++,void 0!==A?(G.b[19][0]++,G.s[64]++,this.options.max=A):G.b[19][1]++,G.s[65]++,void 0!==t?(G.b[20][0]++,G.s[66]++,this.options.values=t):G.b[20][1]++,G.s[67]++,void 0!==l?(G.b[21][0]++,G.s[68]++,this.options.isVertical=l):G.b[21][1]++,G.s[69]++,void 0!==i?(G.b[22][0]++,G.s[70]++,this.options.step=i):G.b[22][1]++,G.s[71]++,void 0!==o?(G.b[23][0]++,G.s[72]++,this.options.hasRange=o):G.b[23][1]++,G.s[73]++,void 0!==s?(G.b[24][0]++,G.s[74]++,this.options.hasLabels=s):G.b[24][1]++,G.s[75]++,void 0!==a?(G.b[25][0]++,G.s[76]++,this.options.hasScale=a):G.b[25][1]++}setHandlers(){G.f[13]++,G.s[77]++,this.options.values.forEach(()=>{G.f[14]++,G.s[78]++,this.handlers.push(new g(this.sliderBody,this.options.hasLabels))}),G.s[79]++,this.handlers[0].getElement().id="handler_min",G.s[80]++,this.handlers[1].getElement().id="handler_max",G.s[81]++,this.handlers[0].appendHandler(),G.s[82]++,this.options.hasRange?(G.b[26][0]++,G.s[83]++,this.handlers[1].appendHandler()):G.b[26][1]++}setHandlerPosition(){G.f[15]++;const{values:e,min:n,max:A,isVertical:t}=(G.s[84]++,this.options);G.s[85]++,this.handlers.forEach((l,i)=>{G.f[16]++;const o=(G.s[86]++,{value:e[i],min:n,max:A,isVertical:t});G.s[87]++,l.setPosition(o)}),G.s[88]++,this.options.values[0]===this.options.max?(G.b[27][0]++,G.s[89]++,this.handlers[0].getElement().style.zIndex="100"):(G.b[27][1]++,G.s[90]++,this.options.values[0]===this.options.min?(G.b[28][0]++,G.s[91]++,this.handlers[0].getElement().style.zIndex="1"):G.b[28][1]++)}updateLabels(){G.f[17]++,G.s[92]++,this.handlers.forEach((e,n)=>(G.f[18]++,G.s[93]++,e.updateLabel(this.options.hasLabels,this.options.values[n])))}handleSliderBodyMouseDown(e){G.f[19]++;let n=(G.s[94]++,e.pageX);const A=(G.s[95]++,this.handlers.map(e=>(G.f[20]++,G.s[96]++,this.getCoordinates(e.getElement(),this.options.isVertical))));G.s[97]++,this.options.isVertical?(G.b[29][0]++,G.s[98]++,n=e.pageY):G.b[29][1]++;const t=(G.s[99]++,[Math.abs(n-A[0]),Math.abs(n-A[1])]),l=(G.s[100]++,t[0]===t[1]);G.s[101]++,t[0]<t[1]?(G.b[30][0]++,G.s[102]++,this.handlerTargetId="handler_min"):(G.b[30][1]++,G.s[103]++,G.b[32][0]++,l&&(G.b[32][1]++,n<A[0])?(G.b[31][0]++,G.s[104]++,this.handlerTargetId="handler_min"):(G.b[31][1]++,G.s[105]++,this.handlerTargetId="handler_max")),G.s[106]++,this.moveAt(n,this.handlerTargetId)}handleHandlerMouseDown(e){G.f[21]++,G.s[107]++,e.stopPropagation();const n=(G.s[108]++,e.target);G.s[109]++,this.handlerTargetId=n.id,G.s[110]++,document.addEventListener("mousemove",this.handleDocumentMouseMove),G.s[111]++,document.addEventListener("mouseup",this.handleDocumentMouseUp)}handleDocumentMouseMove(e){G.f[22]++,G.s[112]++,this.options.isVertical?(G.b[33][0]++,G.s[113]++,this.moveAt(e.pageY,this.handlerTargetId)):(G.b[33][1]++,G.s[114]++,this.moveAt(e.pageX,this.handlerTargetId))}moveAt(e,n){G.f[23]++;const A=(G.s[115]++,this.getCoordinates(this.sliderBody,this.options.isVertical));let t=(G.s[116]++,this.options.isVertical?(G.b[34][0]++,(A-e)/this.sliderBody.offsetHeight*(this.options.max-this.options.min)+this.options.min):(G.b[34][1]++,(e-A)/this.sliderBody.offsetWidth*(this.options.max-this.options.min)+this.options.min));if(G.s[117]++,this.options.hasRange?G.b[35][1]++:(G.b[35][0]++,G.s[118]++,this.observer.broadcast({values:[t,this.options.values[1]]})),G.s[119]++,"handler_min"===n){G.b[36][0]++;const e=(G.s[120]++,this.options.min<0?(G.b[37][0]++,t>this.options.values[1]):(G.b[37][1]++,t+this.options.min>this.options.values[1])),n=(G.s[121]++,G.b[38][0]++,this.options.values[1]!==this.options.max&&(G.b[38][1]++,this.options.hasRange));G.s[122]++,G.b[40][0]++,e&&(G.b[40][1]++,n)?(G.b[39][0]++,G.s[123]++,t=this.options.values[1],G.s[124]++,this.handlers[0].getElement().style.zIndex="10",G.s[125]++,this.handlers[1].getElement().style.zIndex="100"):(G.b[39][1]++,G.s[126]++,this.handlers[0].getElement().style.zIndex="100",G.s[127]++,this.handlers[1].getElement().style.zIndex="10"),G.s[128]++,this.observer.broadcast({values:[t,this.options.values[1]]})}else if(G.b[36][1]++,G.s[129]++,"handler_max"===n){G.b[41][0]++;const e=(G.s[130]++,this.options.min<0?(G.b[42][0]++,t<this.options.values[0]):(G.b[42][1]++,t+this.options.min<this.options.values[0]));G.s[131]++,e?(G.b[43][0]++,G.s[132]++,t=this.options.values[0],G.s[133]++,this.handlers[0].getElement().style.zIndex="100",G.s[134]++,this.handlers[1].getElement().style.zIndex="10"):(G.b[43][1]++,G.s[135]++,this.handlers[0].getElement().style.zIndex="10",G.s[136]++,this.handlers[1].getElement().style.zIndex="100"),G.s[137]++,this.observer.broadcast({values:[this.options.values[0],t]})}else G.b[41][1]++}handleDocumentMouseUp(){G.f[24]++,G.s[138]++,document.removeEventListener("mousemove",this.handleDocumentMouseMove),G.s[139]++,document.removeEventListener("mouseup",this.handleDocumentMouseUp)}}G.s[140]++,S([p.a],Q.prototype,"handleSliderBodyMouseDown",null),G.s[141]++,S([p.a],Q.prototype,"handleHandlerMouseDown",null),G.s[142]++,S([p.a],Q.prototype,"handleDocumentMouseMove",null),G.s[143]++,S([p.a],Q.prototype,"handleDocumentMouseUp",null);var B=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",n="afc7c3169d6956331c945778a0329292730f499f",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:33}},1:{start:{line:7,column:8},end:{line:7,column:27}},2:{start:{line:10,column:8},end:{line:10,column:27}},3:{start:{line:11,column:8},end:{line:11,column:29}},4:{start:{line:12,column:8},end:{line:12,column:71}},5:{start:{line:13,column:8},end:{line:13,column:27}},6:{start:{line:14,column:8},end:{line:14,column:26}},7:{start:{line:17,column:8},end:{line:19,column:11}},8:{start:{line:18,column:12},end:{line:18,column:41}},9:{start:{line:22,column:8},end:{line:24,column:11}},10:{start:{line:23,column:12},end:{line:23,column:40}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:31},end:{line:5,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:16},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:24},end:{line:15,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:18},end:{line:20,column:5}},line:16},4:{name:"(anonymous_4)",decl:{start:{line:17,column:37},end:{line:17,column:38}},loc:{start:{line:17,column:52},end:{line:19,column:9}},line:17},5:{name:"(anonymous_5)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:17},end:{line:25,column:5}},line:21},6:{name:"(anonymous_6)",decl:{start:{line:22,column:38},end:{line:22,column:39}},loc:{start:{line:22,column:53},end:{line:24,column:9}},line:22}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts"],names:[],mappings:"AACA,OAAO,QAAQ,MAAM,kBAAkB,CAAC;AAGxC,MAAM,CAAC,OAAO,OAAO,SAAS;IAO5B,YAAY,MAAmB,EAAE,KAAgB;QAC/C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEO,IAAI,CAAC,MAAmB,EAAE,KAAgB;QAChD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACxD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACzD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;CACF",sourcesContent:["import MainModel from '../model/MainModel';\nimport MainView from '../view/MainView';\nimport { sliderOptions } from '../model/sliderOptions';\n\nexport default class Presenter {\n  private model!: MainModel;\n\n  private view!: MainView;\n\n  private parent!: HTMLElement;\n\n  constructor(parent: HTMLElement, model: MainModel) {\n    this.init(parent, model);\n  }\n\n  public getParent(): HTMLElement {\n    return this.parent;\n  }\n\n  private init(parent: HTMLElement, model: MainModel): void {\n    this.model = model;\n    this.parent = parent;\n    this.view = new MainView(this.parent, this.model.getOptions());\n    this.updateModel();\n    this.updateView();\n  }\n\n  private updateModel(): void {\n    this.view.observer.subscribe((valueData: sliderOptions) => {\n      this.model.update(valueData);\n    });\n  }\n\n  private updateView(): void {\n    this.model.observer.subscribe((valueData: sliderOptions) => {\n      this.view.update(valueData);\n    });\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class O{constructor(e,n){B.f[0]++,B.s[0]++,this.init(e,n)}getParent(){return B.f[1]++,B.s[1]++,this.parent}init(e,n){B.f[2]++,B.s[2]++,this.model=n,B.s[3]++,this.parent=e,B.s[4]++,this.view=new Q(this.parent,this.model.getOptions()),B.s[5]++,this.updateModel(),B.s[6]++,this.updateView()}updateModel(){B.f[3]++,B.s[7]++,this.view.observer.subscribe(e=>{B.f[4]++,B.s[8]++,this.model.update(e)})}updateView(){B.f[5]++,B.s[9]++,this.model.observer.subscribe(e=>{B.f[6]++,B.s[10]++,this.view.update(e)})}}A.d(n,"a",(function(){return K}));var x=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",n="b8413302e0b63c8c9ad4cdb82b14a9587c8ae51d",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",statementMap:{0:{start:{line:6,column:8},end:{line:6,column:44}},1:{start:{line:7,column:8},end:{line:7,column:35}},2:{start:{line:10,column:8},end:{line:12,column:11}},3:{start:{line:11,column:12},end:{line:11,column:47}},4:{start:{line:15,column:8},end:{line:15,column:42}},5:{start:{line:18,column:8},end:{line:18,column:58}},6:{start:{line:21,column:8},end:{line:21,column:36}},7:{start:{line:22,column:8},end:{line:22,column:36}},8:{start:{line:25,column:8},end:{line:25,column:38}},9:{start:{line:28,column:8},end:{line:28,column:37}},10:{start:{line:31,column:8},end:{line:31,column:36}},11:{start:{line:34,column:8},end:{line:34,column:34}},12:{start:{line:37,column:8},end:{line:37,column:43}},13:{start:{line:40,column:8},end:{line:40,column:44}},14:{start:{line:43,column:8},end:{line:43,column:37}},15:{start:{line:46,column:8},end:{line:46,column:35}},16:{start:{line:49,column:8},end:{line:49,column:38}},17:{start:{line:52,column:8},end:{line:52,column:36}},18:{start:{line:55,column:8},end:{line:55,column:37}},19:{start:{line:58,column:8},end:{line:58,column:35}},20:{start:{line:61,column:8},end:{line:61,column:44}},21:{start:{line:62,column:8},end:{line:62,column:59}},22:{start:{line:63,column:8},end:{line:63,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:33},end:{line:8,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:19},end:{line:13,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:10,column:38},end:{line:10,column:39}},loc:{start:{line:10,column:53},end:{line:12,column:9}},line:10},3:{name:"(anonymous_3)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:16},end:{line:16,column:5}},line:14},4:{name:"(anonymous_4)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:16},end:{line:19,column:5}},line:17},5:{name:"(anonymous_5)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:21},end:{line:23,column:5}},line:20},6:{name:"(anonymous_6)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:16},end:{line:26,column:5}},line:24},7:{name:"(anonymous_7)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:22},end:{line:29,column:5}},line:27},8:{name:"(anonymous_8)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:14},end:{line:32,column:5}},line:30},9:{name:"(anonymous_9)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:19},end:{line:35,column:5}},line:33},10:{name:"(anonymous_10)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:21},end:{line:38,column:5}},line:36},11:{name:"(anonymous_11)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:29},end:{line:41,column:5}},line:39},12:{name:"(anonymous_12)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:15},end:{line:44,column:5}},line:42},13:{name:"(anonymous_13)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:20},end:{line:47,column:5}},line:45},14:{name:"(anonymous_14)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:16},end:{line:50,column:5}},line:48},15:{name:"(anonymous_15)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:21},end:{line:53,column:5}},line:51},16:{name:"(anonymous_16)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:15},end:{line:56,column:5}},line:54},17:{name:"(anonymous_17)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:20},end:{line:59,column:5}},line:57},18:{name:"(anonymous_18)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:26},end:{line:64,column:5}},line:60}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts"],names:[],mappings:"AAAA,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAC3C,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,OAAO,aAAa,MAAM,sBAAsB,CAAC;AAEjD,MAAM,CAAC,OAAO,OAAO,MAAM;IAOzB,YAAY,MAAmB,EAAE,OAAsB;QAFhD,aAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;QAGpC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEM,YAAY;QACjB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACzD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;IACpC,CAAC;IAEM,SAAS;QACd,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IACpD,CAAC;IAEM,SAAS,CAAC,KAAe;QAC9B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;IAEM,SAAS,CAAC,MAAgB;QAC/B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,KAAa;QAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAEM,cAAc,CAAC,QAAiB;QACrC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAEM,QAAQ,CAAC,KAAc;QAC5B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;IAEM,SAAS,CAAC,KAAc;QAC7B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAEM,QAAQ,CAAC,KAAc;QAC5B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEO,IAAI,CAAC,MAAmB,EAAE,OAAsB;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;CACF",sourcesContent:["import MainModel from '../model/MainModel';\nimport Presenter from './Presenter';\nimport { sliderOptions } from '../model/sliderOptions';\nimport EventObserver from '../observer/observer';\n\nexport default class Facade {\n  private model!: MainModel;\n\n  private presenter!: Presenter;\n\n  public observer = new EventObserver();\n\n  constructor(parent: HTMLElement, options: sliderOptions) {\n    this.init(parent, options);\n  }\n\n  public updateValues(): void {\n    this.model.observer.subscribe((valueData: sliderOptions) => {\n      this.observer.broadcast(valueData);\n    });\n  }\n\n  public getParent(): HTMLElement {\n    return this.presenter.getParent();\n  }\n\n  public getMinMax(): number[] {\n    return [this.model.getMin(), this.model.getMax()];\n  }\n\n  public setMinMax(value: number[]): void {\n    this.model.setMin(value[0]);\n    this.model.setMax(value[1]);\n  }\n\n  public getValues(): number[] {\n    return this.model.getValues();\n  }\n\n  public setValues(values: number[]): void {\n    this.model.setValues(values);\n  }\n\n  public getStep(): number {\n    return this.model.getStep();\n  }\n\n  public setStep(value: number): void {\n    this.model.setStep(value);\n  }\n\n  public getOrientation(): boolean {\n    return this.model.getOrientation();\n  }\n\n  public setOrientation(vertical: boolean): void {\n    this.model.setOrientation(vertical);\n  }\n\n  public getRange(): boolean {\n    return this.model.getRange();\n  }\n\n  public setRange(range: boolean): void {\n    this.model.setRange(range);\n  }\n\n  public getLabels(): boolean {\n    return this.model.getLabels();\n  }\n\n  public setLabels(label: boolean): void {\n    this.model.setLabels(label);\n  }\n\n  public getScale(): boolean {\n    return this.model.getScale();\n  }\n\n  public setScale(scale: boolean): void {\n    this.model.setScale(scale);\n  }\n\n  private init(parent: HTMLElement, options: sliderOptions): void {\n    this.model = new MainModel(options);\n    this.presenter = new Presenter(parent, this.model);\n    this.updateValues();\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class K{constructor(e,n){x.f[0]++,x.s[0]++,this.observer=new r,x.s[1]++,this.init(e,n)}updateValues(){x.f[1]++,x.s[2]++,this.model.observer.subscribe(e=>{x.f[2]++,x.s[3]++,this.observer.broadcast(e)})}getParent(){return x.f[3]++,x.s[4]++,this.presenter.getParent()}getMinMax(){return x.f[4]++,x.s[5]++,[this.model.getMin(),this.model.getMax()]}setMinMax(e){x.f[5]++,x.s[6]++,this.model.setMin(e[0]),x.s[7]++,this.model.setMax(e[1])}getValues(){return x.f[6]++,x.s[8]++,this.model.getValues()}setValues(e){x.f[7]++,x.s[9]++,this.model.setValues(e)}getStep(){return x.f[8]++,x.s[10]++,this.model.getStep()}setStep(e){x.f[9]++,x.s[11]++,this.model.setStep(e)}getOrientation(){return x.f[10]++,x.s[12]++,this.model.getOrientation()}setOrientation(e){x.f[11]++,x.s[13]++,this.model.setOrientation(e)}getRange(){return x.f[12]++,x.s[14]++,this.model.getRange()}setRange(e){x.f[13]++,x.s[15]++,this.model.setRange(e)}getLabels(){return x.f[14]++,x.s[16]++,this.model.getLabels()}setLabels(e){x.f[15]++,x.s[17]++,this.model.setLabels(e)}getScale(){return x.f[16]++,x.s[18]++,this.model.getScale()}setScale(e){x.f[17]++,x.s[19]++,this.model.setScale(e)}init(e,n){x.f[18]++,x.s[20]++,this.model=new m(n),x.s[21]++,this.presenter=new O(e,this.model),x.s[22]++,this.updateValues()}}},function(e,n,A){"use strict";var t,l=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},i=function(){var e={};return function(n){if(void 0===e[n]){var A=document.querySelector(n);if(window.HTMLIFrameElement&&A instanceof window.HTMLIFrameElement)try{A=A.contentDocument.head}catch(e){A=null}e[n]=A}return e[n]}}(),o=[];function s(e){for(var n=-1,A=0;A<o.length;A++)if(o[A].identifier===e){n=A;break}return n}function a(e,n){for(var A={},t=[],l=0;l<e.length;l++){var i=e[l],a=n.base?i[0]+n.base:i[0],C=A[a]||0,r="".concat(a," ").concat(C);A[a]=C+1;var c=s(r),u={css:i[1],media:i[2],sourceMap:i[3]};-1!==c?(o[c].references++,o[c].updater(u)):o.push({identifier:r,updater:p(u,n),references:1}),t.push(r)}return t}function C(e){var n=document.createElement("style"),t=e.attributes||{};if(void 0===t.nonce){var l=A.nc;l&&(t.nonce=l)}if(Object.keys(t).forEach((function(e){n.setAttribute(e,t[e])})),"function"==typeof e.insert)e.insert(n);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var r,c=(r=[],function(e,n){return r[e]=n,r.filter(Boolean).join("\n")});function u(e,n,A,t){var l=A?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(e.styleSheet)e.styleSheet.cssText=c(n,l);else{var i=document.createTextNode(l),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function d(e,n,A){var t=A.css,l=A.media,i=A.sourceMap;if(l?e.setAttribute("media",l):e.removeAttribute("media"),i&&btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var m=null,h=0;function p(e,n){var A,t,l;if(n.singleton){var i=h++;A=m||(m=C(n)),t=u.bind(null,A,i,!1),l=u.bind(null,A,i,!0)}else A=C(n),t=d.bind(null,A,n),l=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(A)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else l()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=l());var A=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var t=0;t<A.length;t++){var l=s(A[t]);o[l].references--}for(var i=a(e,n),C=0;C<A.length;C++){var r=s(A[C]);0===o[r].references&&(o[r].updater(),o.splice(r,1))}A=i}}}},function(e,n,A){A(4),e.exports=A(22)},function(e,n,A){"use strict";A.r(n),function(e){A(6),A(8);var n,t,l,i,o,s,a=A(1),C=(n="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",t="b14157655183ea7237d108a4f05e00f8156b3f89",l=new(0,function(){}.constructor)("return this")(),o={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",statementMap:{0:{start:{line:4,column:0},end:{line:9,column:3}},1:{start:{line:5,column:4},end:{line:8,column:6}},2:{start:{line:6,column:23},end:{line:6,column:55}},3:{start:{line:7,column:8},end:{line:7,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:2},end:{line:4,column:3}},loc:{start:{line:4,column:8},end:{line:9,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:5,column:18},end:{line:5,column:19}},loc:{start:{line:5,column:37},end:{line:8,column:5}},line:5}},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts"],names:[],mappings:"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,4BAA4B,CAAC;AACpC,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAExC,CAAC,CAAC,GAAG,EAAE;IACL,CAAC,CAAC,EAAE,CAAC,MAAM,GAAG,UAAU,OAAY;QAClC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC",sourcesContent:["import './scss/main.scss';\nimport './assets/favicons/favicons';\nimport Facade from './presenter/Facade';\n\n$(() => {\n  $.fn.slider = function (options: any): Facade {\n    const facade: Facade = new Facade(this.get(0), options);\n    return facade;\n  };\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(s=l[i="__coverage__"]||(l[i]={}))[n]&&s[n].hash===t?s[n]:(o.hash=t,s[n]=o));C.s[0]++,e(()=>{C.f[0]++,C.s[1]++,e.fn.slider=function(e){C.f[1]++;const n=(C.s[2]++,new a.a(this.get(0),e));return C.s[3]++,n}})}.call(this,A(5))},function(e,n,A){var t;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(n,A){"use strict";"object"==typeof e.exports?e.exports=n.document?A(n,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return A(e)}:A(n)}("undefined"!=typeof window?window:this,(function(A,l){"use strict";var i=[],o=A.document,s=Object.getPrototypeOf,a=i.slice,C=i.concat,r=i.push,c=i.indexOf,u={},d=u.toString,m=u.hasOwnProperty,h=m.toString,p=h.call(Object),f={},I=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},v=function(e){return null!=e&&e===e.window},g={type:!0,src:!0,nonce:!0,noModule:!0};function E(e,n,A){var t,l,i=(A=A||o).createElement("script");if(i.text=e,n)for(t in g)(l=n[t]||n.getAttribute&&n.getAttribute(t))&&i.setAttribute(t,l);A.head.appendChild(i).parentNode.removeChild(i)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[d.call(e)]||"object":typeof e}var M=function(e,n){return new M.fn.init(e,n)},y=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function G(e){var n=!!e&&"length"in e&&e.length,A=b(e);return!I(e)&&!v(e)&&("array"===A||0===n||"number"==typeof n&&n>0&&n-1 in e)}M.fn=M.prototype={jquery:"3.4.1",constructor:M,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var n=M.merge(this.constructor(),e);return n.prevObject=this,n},each:function(e){return M.each(this,e)},map:function(e){return this.pushStack(M.map(this,(function(n,A){return e.call(n,A,n)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var n=this.length,A=+e+(e<0?n:0);return this.pushStack(A>=0&&A<n?[this[A]]:[])},end:function(){return this.prevObject||this.constructor()},push:r,sort:i.sort,splice:i.splice},M.extend=M.fn.extend=function(){var e,n,A,t,l,i,o=arguments[0]||{},s=1,a=arguments.length,C=!1;for("boolean"==typeof o&&(C=o,o=arguments[s]||{},s++),"object"==typeof o||I(o)||(o={}),s===a&&(o=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(n in e)t=e[n],"__proto__"!==n&&o!==t&&(C&&t&&(M.isPlainObject(t)||(l=Array.isArray(t)))?(A=o[n],i=l&&!Array.isArray(A)?[]:l||M.isPlainObject(A)?A:{},l=!1,o[n]=M.extend(C,i,t)):void 0!==t&&(o[n]=t));return o},M.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var n,A;return!(!e||"[object Object]"!==d.call(e))&&(!(n=s(e))||"function"==typeof(A=m.call(n,"constructor")&&n.constructor)&&h.call(A)===p)},isEmptyObject:function(e){var n;for(n in e)return!1;return!0},globalEval:function(e,n){E(e,{nonce:n&&n.nonce})},each:function(e,n){var A,t=0;if(G(e))for(A=e.length;t<A&&!1!==n.call(e[t],t,e[t]);t++);else for(t in e)if(!1===n.call(e[t],t,e[t]))break;return e},trim:function(e){return null==e?"":(e+"").replace(y,"")},makeArray:function(e,n){var A=n||[];return null!=e&&(G(Object(e))?M.merge(A,"string"==typeof e?[e]:e):r.call(A,e)),A},inArray:function(e,n,A){return null==n?-1:c.call(n,e,A)},merge:function(e,n){for(var A=+n.length,t=0,l=e.length;t<A;t++)e[l++]=n[t];return e.length=l,e},grep:function(e,n,A){for(var t=[],l=0,i=e.length,o=!A;l<i;l++)!n(e[l],l)!==o&&t.push(e[l]);return t},map:function(e,n,A){var t,l,i=0,o=[];if(G(e))for(t=e.length;i<t;i++)null!=(l=n(e[i],i,A))&&o.push(l);else for(i in e)null!=(l=n(e[i],i,A))&&o.push(l);return C.apply([],o)},guid:1,support:f}),"function"==typeof Symbol&&(M.fn[Symbol.iterator]=i[Symbol.iterator]),M.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,n){u["[object "+n+"]"]=n.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var n,A,t,l,i,o,s,a,C,r,c,u,d,m,h,p,f,I,v,g="sizzle"+1*new Date,E=e.document,b=0,M=0,y=ae(),G=ae(),S=ae(),Q=ae(),B=function(e,n){return e===n&&(c=!0),0},O={}.hasOwnProperty,x=[],K=x.pop,D=x.push,w=x.push,L=x.slice,k=function(e,n){for(var A=0,t=e.length;A<t;A++)if(e[A]===n)return A;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",U="[\\x20\\t\\r\\n\\f]",Y="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",V="\\["+U+"*("+Y+")(?:"+U+"*([*^$|!~]?=)"+U+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+Y+"))|)"+U+"*\\]",T=":("+Y+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",R=new RegExp(U+"+","g"),W=new RegExp("^"+U+"+|((?:^|[^\\\\])(?:\\\\.)*)"+U+"+$","g"),P=new RegExp("^"+U+"*,"+U+"*"),H=new RegExp("^"+U+"*([>+~]|"+U+")"+U+"*"),j=new RegExp(U+"|>"),F=new RegExp(T),N=new RegExp("^"+Y+"$"),q={ID:new RegExp("^#("+Y+")"),CLASS:new RegExp("^\\.("+Y+")"),TAG:new RegExp("^("+Y+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+T),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+U+"*(even|odd|(([+-]|)(\\d*)n|)"+U+"*(?:([+-]|)"+U+"*(\\d+)|))"+U+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+U+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+U+"*((?:-\\d)?\\d*)"+U+"*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,ne=new RegExp("\\\\([\\da-f]{1,6}"+U+"?|("+U+")|.)","ig"),Ae=function(e,n,A){var t="0x"+n-65536;return t!=t||A?n:t<0?String.fromCharCode(t+65536):String.fromCharCode(t>>10|55296,1023&t|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,le=function(e,n){return n?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){u()},oe=ge((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{w.apply(x=L.call(E.childNodes),E.childNodes),x[E.childNodes.length].nodeType}catch(e){w={apply:x.length?function(e,n){D.apply(e,L.call(n))}:function(e,n){for(var A=e.length,t=0;e[A++]=n[t++];);e.length=A-1}}}function se(e,n,t,l){var i,s,C,r,c,m,f,I=n&&n.ownerDocument,b=n?n.nodeType:9;if(t=t||[],"string"!=typeof e||!e||1!==b&&9!==b&&11!==b)return t;if(!l&&((n?n.ownerDocument||n:E)!==d&&u(n),n=n||d,h)){if(11!==b&&(c=Z.exec(e)))if(i=c[1]){if(9===b){if(!(C=n.getElementById(i)))return t;if(C.id===i)return t.push(C),t}else if(I&&(C=I.getElementById(i))&&v(n,C)&&C.id===i)return t.push(C),t}else{if(c[2])return w.apply(t,n.getElementsByTagName(e)),t;if((i=c[3])&&A.getElementsByClassName&&n.getElementsByClassName)return w.apply(t,n.getElementsByClassName(i)),t}if(A.qsa&&!Q[e+" "]&&(!p||!p.test(e))&&(1!==b||"object"!==n.nodeName.toLowerCase())){if(f=e,I=n,1===b&&j.test(e)){for((r=n.getAttribute("id"))?r=r.replace(te,le):n.setAttribute("id",r=g),s=(m=o(e)).length;s--;)m[s]="#"+r+" "+ve(m[s]);f=m.join(","),I=ee.test(e)&&fe(n.parentNode)||n}try{return w.apply(t,I.querySelectorAll(f)),t}catch(n){Q(e,!0)}finally{r===g&&n.removeAttribute("id")}}}return a(e.replace(W,"$1"),n,t,l)}function ae(){var e=[];return function n(A,l){return e.push(A+" ")>t.cacheLength&&delete n[e.shift()],n[A+" "]=l}}function Ce(e){return e[g]=!0,e}function re(e){var n=d.createElement("fieldset");try{return!!e(n)}catch(e){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function ce(e,n){for(var A=e.split("|"),l=A.length;l--;)t.attrHandle[A[l]]=n}function ue(e,n){var A=n&&e,t=A&&1===e.nodeType&&1===n.nodeType&&e.sourceIndex-n.sourceIndex;if(t)return t;if(A)for(;A=A.nextSibling;)if(A===n)return-1;return e?1:-1}function de(e){return function(n){return"input"===n.nodeName.toLowerCase()&&n.type===e}}function me(e){return function(n){var A=n.nodeName.toLowerCase();return("input"===A||"button"===A)&&n.type===e}}function he(e){return function(n){return"form"in n?n.parentNode&&!1===n.disabled?"label"in n?"label"in n.parentNode?n.parentNode.disabled===e:n.disabled===e:n.isDisabled===e||n.isDisabled!==!e&&oe(n)===e:n.disabled===e:"label"in n&&n.disabled===e}}function pe(e){return Ce((function(n){return n=+n,Ce((function(A,t){for(var l,i=e([],A.length,n),o=i.length;o--;)A[l=i[o]]&&(A[l]=!(t[l]=A[l]))}))}))}function fe(e){return e&&void 0!==e.getElementsByTagName&&e}for(n in A=se.support={},i=se.isXML=function(e){var n=e.namespaceURI,A=(e.ownerDocument||e).documentElement;return!z.test(n||A&&A.nodeName||"HTML")},u=se.setDocument=function(e){var n,l,o=e?e.ownerDocument||e:E;return o!==d&&9===o.nodeType&&o.documentElement?(m=(d=o).documentElement,h=!i(d),E!==d&&(l=d.defaultView)&&l.top!==l&&(l.addEventListener?l.addEventListener("unload",ie,!1):l.attachEvent&&l.attachEvent("onunload",ie)),A.attributes=re((function(e){return e.className="i",!e.getAttribute("className")})),A.getElementsByTagName=re((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),A.getElementsByClassName=J.test(d.getElementsByClassName),A.getById=re((function(e){return m.appendChild(e).id=g,!d.getElementsByName||!d.getElementsByName(g).length})),A.getById?(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){return e.getAttribute("id")===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&h){var A=n.getElementById(e);return A?[A]:[]}}):(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){var A=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return A&&A.value===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&h){var A,t,l,i=n.getElementById(e);if(i){if((A=i.getAttributeNode("id"))&&A.value===e)return[i];for(l=n.getElementsByName(e),t=0;i=l[t++];)if((A=i.getAttributeNode("id"))&&A.value===e)return[i]}return[]}}),t.find.TAG=A.getElementsByTagName?function(e,n){return void 0!==n.getElementsByTagName?n.getElementsByTagName(e):A.qsa?n.querySelectorAll(e):void 0}:function(e,n){var A,t=[],l=0,i=n.getElementsByTagName(e);if("*"===e){for(;A=i[l++];)1===A.nodeType&&t.push(A);return t}return i},t.find.CLASS=A.getElementsByClassName&&function(e,n){if(void 0!==n.getElementsByClassName&&h)return n.getElementsByClassName(e)},f=[],p=[],(A.qsa=J.test(d.querySelectorAll))&&(re((function(e){m.appendChild(e).innerHTML="<a id='"+g+"'></a><select id='"+g+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+U+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+U+"*(?:value|"+_+")"),e.querySelectorAll("[id~="+g+"-]").length||p.push("~="),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+g+"+*").length||p.push(".#.+[+~]")})),re((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var n=d.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+U+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(A.matchesSelector=J.test(I=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&re((function(e){A.disconnectedMatch=I.call(e,"*"),I.call(e,"[s!='']:x"),f.push("!=",T)})),p=p.length&&new RegExp(p.join("|")),f=f.length&&new RegExp(f.join("|")),n=J.test(m.compareDocumentPosition),v=n||J.test(m.contains)?function(e,n){var A=9===e.nodeType?e.documentElement:e,t=n&&n.parentNode;return e===t||!(!t||1!==t.nodeType||!(A.contains?A.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,n){if(n)for(;n=n.parentNode;)if(n===e)return!0;return!1},B=n?function(e,n){if(e===n)return c=!0,0;var t=!e.compareDocumentPosition-!n.compareDocumentPosition;return t||(1&(t=(e.ownerDocument||e)===(n.ownerDocument||n)?e.compareDocumentPosition(n):1)||!A.sortDetached&&n.compareDocumentPosition(e)===t?e===d||e.ownerDocument===E&&v(E,e)?-1:n===d||n.ownerDocument===E&&v(E,n)?1:r?k(r,e)-k(r,n):0:4&t?-1:1)}:function(e,n){if(e===n)return c=!0,0;var A,t=0,l=e.parentNode,i=n.parentNode,o=[e],s=[n];if(!l||!i)return e===d?-1:n===d?1:l?-1:i?1:r?k(r,e)-k(r,n):0;if(l===i)return ue(e,n);for(A=e;A=A.parentNode;)o.unshift(A);for(A=n;A=A.parentNode;)s.unshift(A);for(;o[t]===s[t];)t++;return t?ue(o[t],s[t]):o[t]===E?-1:s[t]===E?1:0},d):d},se.matches=function(e,n){return se(e,null,null,n)},se.matchesSelector=function(e,n){if((e.ownerDocument||e)!==d&&u(e),A.matchesSelector&&h&&!Q[n+" "]&&(!f||!f.test(n))&&(!p||!p.test(n)))try{var t=I.call(e,n);if(t||A.disconnectedMatch||e.document&&11!==e.document.nodeType)return t}catch(e){Q(n,!0)}return se(n,d,null,[e]).length>0},se.contains=function(e,n){return(e.ownerDocument||e)!==d&&u(e),v(e,n)},se.attr=function(e,n){(e.ownerDocument||e)!==d&&u(e);var l=t.attrHandle[n.toLowerCase()],i=l&&O.call(t.attrHandle,n.toLowerCase())?l(e,n,!h):void 0;return void 0!==i?i:A.attributes||!h?e.getAttribute(n):(i=e.getAttributeNode(n))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(te,le)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var n,t=[],l=0,i=0;if(c=!A.detectDuplicates,r=!A.sortStable&&e.slice(0),e.sort(B),c){for(;n=e[i++];)n===e[i]&&(l=t.push(i));for(;l--;)e.splice(t[l],1)}return r=null,e},l=se.getText=function(e){var n,A="",t=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)A+=l(e)}else if(3===i||4===i)return e.nodeValue}else for(;n=e[t++];)A+=l(n);return A},(t=se.selectors={cacheLength:50,createPseudo:Ce,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,Ae),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,Ae),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var n,A=!e[6]&&e[2];return q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":A&&F.test(A)&&(n=o(A,!0))&&(n=A.indexOf(")",A.length-n)-A.length)&&(e[0]=e[0].slice(0,n),e[2]=A.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var n=e.replace(ne,Ae).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===n}},CLASS:function(e){var n=y[e+" "];return n||(n=new RegExp("(^|"+U+")"+e+"("+U+"|$)"))&&y(e,(function(e){return n.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,n,A){return function(t){var l=se.attr(t,e);return null==l?"!="===n:!n||(l+="","="===n?l===A:"!="===n?l!==A:"^="===n?A&&0===l.indexOf(A):"*="===n?A&&l.indexOf(A)>-1:"$="===n?A&&l.slice(-A.length)===A:"~="===n?(" "+l.replace(R," ")+" ").indexOf(A)>-1:"|="===n&&(l===A||l.slice(0,A.length+1)===A+"-"))}},CHILD:function(e,n,A,t,l){var i="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===n;return 1===t&&0===l?function(e){return!!e.parentNode}:function(n,A,a){var C,r,c,u,d,m,h=i!==o?"nextSibling":"previousSibling",p=n.parentNode,f=s&&n.nodeName.toLowerCase(),I=!a&&!s,v=!1;if(p){if(i){for(;h;){for(u=n;u=u[h];)if(s?u.nodeName.toLowerCase()===f:1===u.nodeType)return!1;m=h="only"===e&&!m&&"nextSibling"}return!0}if(m=[o?p.firstChild:p.lastChild],o&&I){for(v=(d=(C=(r=(c=(u=p)[g]||(u[g]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===b&&C[1])&&C[2],u=d&&p.childNodes[d];u=++d&&u&&u[h]||(v=d=0)||m.pop();)if(1===u.nodeType&&++v&&u===n){r[e]=[b,d,v];break}}else if(I&&(v=d=(C=(r=(c=(u=n)[g]||(u[g]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===b&&C[1]),!1===v)for(;(u=++d&&u&&u[h]||(v=d=0)||m.pop())&&((s?u.nodeName.toLowerCase()!==f:1!==u.nodeType)||!++v||(I&&((r=(c=u[g]||(u[g]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]=[b,v]),u!==n)););return(v-=l)===t||v%t==0&&v/t>=0}}},PSEUDO:function(e,n){var A,l=t.pseudos[e]||t.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return l[g]?l(n):l.length>1?(A=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?Ce((function(e,A){for(var t,i=l(e,n),o=i.length;o--;)e[t=k(e,i[o])]=!(A[t]=i[o])})):function(e){return l(e,0,A)}):l}},pseudos:{not:Ce((function(e){var n=[],A=[],t=s(e.replace(W,"$1"));return t[g]?Ce((function(e,n,A,l){for(var i,o=t(e,null,l,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(n[s]=i))})):function(e,l,i){return n[0]=e,t(n,null,i,A),n[0]=null,!A.pop()}})),has:Ce((function(e){return function(n){return se(e,n).length>0}})),contains:Ce((function(e){return e=e.replace(ne,Ae),function(n){return(n.textContent||l(n)).indexOf(e)>-1}})),lang:Ce((function(e){return N.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(ne,Ae).toLowerCase(),function(n){var A;do{if(A=h?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return(A=A.toLowerCase())===e||0===A.indexOf(e+"-")}while((n=n.parentNode)&&1===n.nodeType);return!1}})),target:function(n){var A=e.location&&e.location.hash;return A&&A.slice(1)===n.id},root:function(e){return e===m},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&!!e.checked||"option"===n&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&"button"===e.type||"button"===n},text:function(e){var n;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(n=e.getAttribute("type"))||"text"===n.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,n){return[n-1]})),eq:pe((function(e,n,A){return[A<0?A+n:A]})),even:pe((function(e,n){for(var A=0;A<n;A+=2)e.push(A);return e})),odd:pe((function(e,n){for(var A=1;A<n;A+=2)e.push(A);return e})),lt:pe((function(e,n,A){for(var t=A<0?A+n:A>n?n:A;--t>=0;)e.push(t);return e})),gt:pe((function(e,n,A){for(var t=A<0?A+n:A;++t<n;)e.push(t);return e}))}}).pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[n]=de(n);for(n in{submit:!0,reset:!0})t.pseudos[n]=me(n);function Ie(){}function ve(e){for(var n=0,A=e.length,t="";n<A;n++)t+=e[n].value;return t}function ge(e,n,A){var t=n.dir,l=n.next,i=l||t,o=A&&"parentNode"===i,s=M++;return n.first?function(n,A,l){for(;n=n[t];)if(1===n.nodeType||o)return e(n,A,l);return!1}:function(n,A,a){var C,r,c,u=[b,s];if(a){for(;n=n[t];)if((1===n.nodeType||o)&&e(n,A,a))return!0}else for(;n=n[t];)if(1===n.nodeType||o)if(r=(c=n[g]||(n[g]={}))[n.uniqueID]||(c[n.uniqueID]={}),l&&l===n.nodeName.toLowerCase())n=n[t]||n;else{if((C=r[i])&&C[0]===b&&C[1]===s)return u[2]=C[2];if(r[i]=u,u[2]=e(n,A,a))return!0}return!1}}function Ee(e){return e.length>1?function(n,A,t){for(var l=e.length;l--;)if(!e[l](n,A,t))return!1;return!0}:e[0]}function be(e,n,A,t,l){for(var i,o=[],s=0,a=e.length,C=null!=n;s<a;s++)(i=e[s])&&(A&&!A(i,t,l)||(o.push(i),C&&n.push(s)));return o}function Me(e,n,A,t,l,i){return t&&!t[g]&&(t=Me(t)),l&&!l[g]&&(l=Me(l,i)),Ce((function(i,o,s,a){var C,r,c,u=[],d=[],m=o.length,h=i||function(e,n,A){for(var t=0,l=n.length;t<l;t++)se(e,n[t],A);return A}(n||"*",s.nodeType?[s]:s,[]),p=!e||!i&&n?h:be(h,u,e,s,a),f=A?l||(i?e:m||t)?[]:o:p;if(A&&A(p,f,s,a),t)for(C=be(f,d),t(C,[],s,a),r=C.length;r--;)(c=C[r])&&(f[d[r]]=!(p[d[r]]=c));if(i){if(l||e){if(l){for(C=[],r=f.length;r--;)(c=f[r])&&C.push(p[r]=c);l(null,f=[],C,a)}for(r=f.length;r--;)(c=f[r])&&(C=l?k(i,c):u[r])>-1&&(i[C]=!(o[C]=c))}}else f=be(f===o?f.splice(m,f.length):f),l?l(null,o,f,a):w.apply(o,f)}))}function ye(e){for(var n,A,l,i=e.length,o=t.relative[e[0].type],s=o||t.relative[" "],a=o?1:0,r=ge((function(e){return e===n}),s,!0),c=ge((function(e){return k(n,e)>-1}),s,!0),u=[function(e,A,t){var l=!o&&(t||A!==C)||((n=A).nodeType?r(e,A,t):c(e,A,t));return n=null,l}];a<i;a++)if(A=t.relative[e[a].type])u=[ge(Ee(u),A)];else{if((A=t.filter[e[a].type].apply(null,e[a].matches))[g]){for(l=++a;l<i&&!t.relative[e[l].type];l++);return Me(a>1&&Ee(u),a>1&&ve(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(W,"$1"),A,a<l&&ye(e.slice(a,l)),l<i&&ye(e=e.slice(l)),l<i&&ve(e))}u.push(A)}return Ee(u)}return Ie.prototype=t.filters=t.pseudos,t.setFilters=new Ie,o=se.tokenize=function(e,n){var A,l,i,o,s,a,C,r=G[e+" "];if(r)return n?0:r.slice(0);for(s=e,a=[],C=t.preFilter;s;){for(o in A&&!(l=P.exec(s))||(l&&(s=s.slice(l[0].length)||s),a.push(i=[])),A=!1,(l=H.exec(s))&&(A=l.shift(),i.push({value:A,type:l[0].replace(W," ")}),s=s.slice(A.length)),t.filter)!(l=q[o].exec(s))||C[o]&&!(l=C[o](l))||(A=l.shift(),i.push({value:A,type:o,matches:l}),s=s.slice(A.length));if(!A)break}return n?s.length:s?se.error(e):G(e,a).slice(0)},s=se.compile=function(e,n){var A,l=[],i=[],s=S[e+" "];if(!s){for(n||(n=o(e)),A=n.length;A--;)(s=ye(n[A]))[g]?l.push(s):i.push(s);(s=S(e,function(e,n){var A=n.length>0,l=e.length>0,i=function(i,o,s,a,r){var c,m,p,f=0,I="0",v=i&&[],g=[],E=C,M=i||l&&t.find.TAG("*",r),y=b+=null==E?1:Math.random()||.1,G=M.length;for(r&&(C=o===d||o||r);I!==G&&null!=(c=M[I]);I++){if(l&&c){for(m=0,o||c.ownerDocument===d||(u(c),s=!h);p=e[m++];)if(p(c,o||d,s)){a.push(c);break}r&&(b=y)}A&&((c=!p&&c)&&f--,i&&v.push(c))}if(f+=I,A&&I!==f){for(m=0;p=n[m++];)p(v,g,o,s);if(i){if(f>0)for(;I--;)v[I]||g[I]||(g[I]=K.call(a));g=be(g)}w.apply(a,g),r&&!i&&g.length>0&&f+n.length>1&&se.uniqueSort(a)}return r&&(b=y,C=E),v};return A?Ce(i):i}(i,l))).selector=e}return s},a=se.select=function(e,n,A,l){var i,a,C,r,c,u="function"==typeof e&&e,d=!l&&o(e=u.selector||e);if(A=A||[],1===d.length){if((a=d[0]=d[0].slice(0)).length>2&&"ID"===(C=a[0]).type&&9===n.nodeType&&h&&t.relative[a[1].type]){if(!(n=(t.find.ID(C.matches[0].replace(ne,Ae),n)||[])[0]))return A;u&&(n=n.parentNode),e=e.slice(a.shift().value.length)}for(i=q.needsContext.test(e)?0:a.length;i--&&(C=a[i],!t.relative[r=C.type]);)if((c=t.find[r])&&(l=c(C.matches[0].replace(ne,Ae),ee.test(a[0].type)&&fe(n.parentNode)||n))){if(a.splice(i,1),!(e=l.length&&ve(a)))return w.apply(A,l),A;break}}return(u||s(e,d))(l,n,!h,A,!n||ee.test(e)&&fe(n.parentNode)||n),A},A.sortStable=g.split("").sort(B).join("")===g,A.detectDuplicates=!!c,u(),A.sortDetached=re((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),re((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,n,A){if(!A)return e.getAttribute(n,"type"===n.toLowerCase()?1:2)})),A.attributes&&re((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,n,A){if(!A&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),re((function(e){return null==e.getAttribute("disabled")}))||ce(_,(function(e,n,A){var t;if(!A)return!0===e[n]?n.toLowerCase():(t=e.getAttributeNode(n))&&t.specified?t.value:null})),se}(A);M.find=S,M.expr=S.selectors,M.expr[":"]=M.expr.pseudos,M.uniqueSort=M.unique=S.uniqueSort,M.text=S.getText,M.isXMLDoc=S.isXML,M.contains=S.contains,M.escapeSelector=S.escape;var Q=function(e,n,A){for(var t=[],l=void 0!==A;(e=e[n])&&9!==e.nodeType;)if(1===e.nodeType){if(l&&M(e).is(A))break;t.push(e)}return t},B=function(e,n){for(var A=[];e;e=e.nextSibling)1===e.nodeType&&e!==n&&A.push(e);return A},O=M.expr.match.needsContext;function x(e,n){return e.nodeName&&e.nodeName.toLowerCase()===n.toLowerCase()}var K=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,n,A){return I(n)?M.grep(e,(function(e,t){return!!n.call(e,t,e)!==A})):n.nodeType?M.grep(e,(function(e){return e===n!==A})):"string"!=typeof n?M.grep(e,(function(e){return c.call(n,e)>-1!==A})):M.filter(n,e,A)}M.filter=function(e,n,A){var t=n[0];return A&&(e=":not("+e+")"),1===n.length&&1===t.nodeType?M.find.matchesSelector(t,e)?[t]:[]:M.find.matches(e,M.grep(n,(function(e){return 1===e.nodeType})))},M.fn.extend({find:function(e){var n,A,t=this.length,l=this;if("string"!=typeof e)return this.pushStack(M(e).filter((function(){for(n=0;n<t;n++)if(M.contains(l[n],this))return!0})));for(A=this.pushStack([]),n=0;n<t;n++)M.find(e,l[n],A);return t>1?M.uniqueSort(A):A},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&O.test(e)?M(e):e||[],!1).length}});var w,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(M.fn.init=function(e,n,A){var t,l;if(!e)return this;if(A=A||w,"string"==typeof e){if(!(t="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!t[1]&&n)return!n||n.jquery?(n||A).find(e):this.constructor(n).find(e);if(t[1]){if(n=n instanceof M?n[0]:n,M.merge(this,M.parseHTML(t[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),K.test(t[1])&&M.isPlainObject(n))for(t in n)I(this[t])?this[t](n[t]):this.attr(t,n[t]);return this}return(l=o.getElementById(t[2]))&&(this[0]=l,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):I(e)?void 0!==A.ready?A.ready(e):e(M):M.makeArray(e,this)}).prototype=M.fn,w=M(o);var k=/^(?:parents|prev(?:Until|All))/,_={children:!0,contents:!0,next:!0,prev:!0};function U(e,n){for(;(e=e[n])&&1!==e.nodeType;);return e}M.fn.extend({has:function(e){var n=M(e,this),A=n.length;return this.filter((function(){for(var e=0;e<A;e++)if(M.contains(this,n[e]))return!0}))},closest:function(e,n){var A,t=0,l=this.length,i=[],o="string"!=typeof e&&M(e);if(!O.test(e))for(;t<l;t++)for(A=this[t];A&&A!==n;A=A.parentNode)if(A.nodeType<11&&(o?o.index(A)>-1:1===A.nodeType&&M.find.matchesSelector(A,e))){i.push(A);break}return this.pushStack(i.length>1?M.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?c.call(M(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,n){return this.pushStack(M.uniqueSort(M.merge(this.get(),M(e,n))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),M.each({parent:function(e){var n=e.parentNode;return n&&11!==n.nodeType?n:null},parents:function(e){return Q(e,"parentNode")},parentsUntil:function(e,n,A){return Q(e,"parentNode",A)},next:function(e){return U(e,"nextSibling")},prev:function(e){return U(e,"previousSibling")},nextAll:function(e){return Q(e,"nextSibling")},prevAll:function(e){return Q(e,"previousSibling")},nextUntil:function(e,n,A){return Q(e,"nextSibling",A)},prevUntil:function(e,n,A){return Q(e,"previousSibling",A)},siblings:function(e){return B((e.parentNode||{}).firstChild,e)},children:function(e){return B(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(x(e,"template")&&(e=e.content||e),M.merge([],e.childNodes))}},(function(e,n){M.fn[e]=function(A,t){var l=M.map(this,n,A);return"Until"!==e.slice(-5)&&(t=A),t&&"string"==typeof t&&(l=M.filter(t,l)),this.length>1&&(_[e]||M.uniqueSort(l),k.test(e)&&l.reverse()),this.pushStack(l)}}));var Y=/[^\x20\t\r\n\f]+/g;function V(e){return e}function T(e){throw e}function R(e,n,A,t){var l;try{e&&I(l=e.promise)?l.call(e).done(n).fail(A):e&&I(l=e.then)?l.call(e,n,A):n.apply(void 0,[e].slice(t))}catch(e){A.apply(void 0,[e])}}M.Callbacks=function(e){e="string"==typeof e?function(e){var n={};return M.each(e.match(Y)||[],(function(e,A){n[A]=!0})),n}(e):M.extend({},e);var n,A,t,l,i=[],o=[],s=-1,a=function(){for(l=l||e.once,t=n=!0;o.length;s=-1)for(A=o.shift();++s<i.length;)!1===i[s].apply(A[0],A[1])&&e.stopOnFalse&&(s=i.length,A=!1);e.memory||(A=!1),n=!1,l&&(i=A?[]:"")},C={add:function(){return i&&(A&&!n&&(s=i.length-1,o.push(A)),function n(A){M.each(A,(function(A,t){I(t)?e.unique&&C.has(t)||i.push(t):t&&t.length&&"string"!==b(t)&&n(t)}))}(arguments),A&&!n&&a()),this},remove:function(){return M.each(arguments,(function(e,n){for(var A;(A=M.inArray(n,i,A))>-1;)i.splice(A,1),A<=s&&s--})),this},has:function(e){return e?M.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return l=o=[],i=A="",this},disabled:function(){return!i},lock:function(){return l=o=[],A||n||(i=A=""),this},locked:function(){return!!l},fireWith:function(e,A){return l||(A=[e,(A=A||[]).slice?A.slice():A],o.push(A),n||a()),this},fire:function(){return C.fireWith(this,arguments),this},fired:function(){return!!t}};return C},M.extend({Deferred:function(e){var n=[["notify","progress",M.Callbacks("memory"),M.Callbacks("memory"),2],["resolve","done",M.Callbacks("once memory"),M.Callbacks("once memory"),0,"resolved"],["reject","fail",M.Callbacks("once memory"),M.Callbacks("once memory"),1,"rejected"]],t="pending",l={state:function(){return t},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return l.then(null,e)},pipe:function(){var e=arguments;return M.Deferred((function(A){M.each(n,(function(n,t){var l=I(e[t[4]])&&e[t[4]];i[t[1]]((function(){var e=l&&l.apply(this,arguments);e&&I(e.promise)?e.promise().progress(A.notify).done(A.resolve).fail(A.reject):A[t[0]+"With"](this,l?[e]:arguments)}))})),e=null})).promise()},then:function(e,t,l){var i=0;function o(e,n,t,l){return function(){var s=this,a=arguments,C=function(){var A,C;if(!(e<i)){if((A=t.apply(s,a))===n.promise())throw new TypeError("Thenable self-resolution");C=A&&("object"==typeof A||"function"==typeof A)&&A.then,I(C)?l?C.call(A,o(i,n,V,l),o(i,n,T,l)):(i++,C.call(A,o(i,n,V,l),o(i,n,T,l),o(i,n,V,n.notifyWith))):(t!==V&&(s=void 0,a=[A]),(l||n.resolveWith)(s,a))}},r=l?C:function(){try{C()}catch(A){M.Deferred.exceptionHook&&M.Deferred.exceptionHook(A,r.stackTrace),e+1>=i&&(t!==T&&(s=void 0,a=[A]),n.rejectWith(s,a))}};e?r():(M.Deferred.getStackHook&&(r.stackTrace=M.Deferred.getStackHook()),A.setTimeout(r))}}return M.Deferred((function(A){n[0][3].add(o(0,A,I(l)?l:V,A.notifyWith)),n[1][3].add(o(0,A,I(e)?e:V)),n[2][3].add(o(0,A,I(t)?t:T))})).promise()},promise:function(e){return null!=e?M.extend(e,l):l}},i={};return M.each(n,(function(e,A){var o=A[2],s=A[5];l[A[1]]=o.add,s&&o.add((function(){t=s}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),o.add(A[3].fire),i[A[0]]=function(){return i[A[0]+"With"](this===i?void 0:this,arguments),this},i[A[0]+"With"]=o.fireWith})),l.promise(i),e&&e.call(i,i),i},when:function(e){var n=arguments.length,A=n,t=Array(A),l=a.call(arguments),i=M.Deferred(),o=function(e){return function(A){t[e]=this,l[e]=arguments.length>1?a.call(arguments):A,--n||i.resolveWith(t,l)}};if(n<=1&&(R(e,i.done(o(A)).resolve,i.reject,!n),"pending"===i.state()||I(l[A]&&l[A].then)))return i.then();for(;A--;)R(l[A],o(A),i.reject);return i.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;M.Deferred.exceptionHook=function(e,n){A.console&&A.console.warn&&e&&W.test(e.name)&&A.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},M.readyException=function(e){A.setTimeout((function(){throw e}))};var P=M.Deferred();function H(){o.removeEventListener("DOMContentLoaded",H),A.removeEventListener("load",H),M.ready()}M.fn.ready=function(e){return P.then(e).catch((function(e){M.readyException(e)})),this},M.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--M.readyWait:M.isReady)||(M.isReady=!0,!0!==e&&--M.readyWait>0||P.resolveWith(o,[M]))}}),M.ready.then=P.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?A.setTimeout(M.ready):(o.addEventListener("DOMContentLoaded",H),A.addEventListener("load",H));var j=function(e,n,A,t,l,i,o){var s=0,a=e.length,C=null==A;if("object"===b(A))for(s in l=!0,A)j(e,n,s,A[s],!0,i,o);else if(void 0!==t&&(l=!0,I(t)||(o=!0),C&&(o?(n.call(e,t),n=null):(C=n,n=function(e,n,A){return C.call(M(e),A)})),n))for(;s<a;s++)n(e[s],A,o?t:t.call(e[s],s,n(e[s],A)));return l?e:C?n.call(e):a?n(e[0],A):i},F=/^-ms-/,N=/-([a-z])/g;function q(e,n){return n.toUpperCase()}function z(e){return e.replace(F,"ms-").replace(N,q)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=M.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var n=e[this.expando];return n||(n={},$(e)&&(e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,configurable:!0}))),n},set:function(e,n,A){var t,l=this.cache(e);if("string"==typeof n)l[z(n)]=A;else for(t in n)l[z(t)]=n[t];return l},get:function(e,n){return void 0===n?this.cache(e):e[this.expando]&&e[this.expando][z(n)]},access:function(e,n,A){return void 0===n||n&&"string"==typeof n&&void 0===A?this.get(e,n):(this.set(e,n,A),void 0!==A?A:n)},remove:function(e,n){var A,t=e[this.expando];if(void 0!==t){if(void 0!==n){A=(n=Array.isArray(n)?n.map(z):(n=z(n))in t?[n]:n.match(Y)||[]).length;for(;A--;)delete t[n[A]]}(void 0===n||M.isEmptyObject(t))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var n=e[this.expando];return void 0!==n&&!M.isEmptyObject(n)}};var J=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ne=/[A-Z]/g;function Ae(e,n,A){var t;if(void 0===A&&1===e.nodeType)if(t="data-"+n.replace(ne,"-$&").toLowerCase(),"string"==typeof(A=e.getAttribute(t))){try{A=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(A)}catch(e){}Z.set(e,n,A)}else A=void 0;return A}M.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,n,A){return Z.access(e,n,A)},removeData:function(e,n){Z.remove(e,n)},_data:function(e,n,A){return J.access(e,n,A)},_removeData:function(e,n){J.remove(e,n)}}),M.fn.extend({data:function(e,n){var A,t,l,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(l=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(A=o.length;A--;)o[A]&&0===(t=o[A].name).indexOf("data-")&&(t=z(t.slice(5)),Ae(i,t,l[t]));J.set(i,"hasDataAttrs",!0)}return l}return"object"==typeof e?this.each((function(){Z.set(this,e)})):j(this,(function(n){var A;if(i&&void 0===n)return void 0!==(A=Z.get(i,e))?A:void 0!==(A=Ae(i,e))?A:void 0;this.each((function(){Z.set(this,e,n)}))}),null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),M.extend({queue:function(e,n,A){var t;if(e)return n=(n||"fx")+"queue",t=J.get(e,n),A&&(!t||Array.isArray(A)?t=J.access(e,n,M.makeArray(A)):t.push(A)),t||[]},dequeue:function(e,n){n=n||"fx";var A=M.queue(e,n),t=A.length,l=A.shift(),i=M._queueHooks(e,n);"inprogress"===l&&(l=A.shift(),t--),l&&("fx"===n&&A.unshift("inprogress"),delete i.stop,l.call(e,(function(){M.dequeue(e,n)}),i)),!t&&i&&i.empty.fire()},_queueHooks:function(e,n){var A=n+"queueHooks";return J.get(e,A)||J.access(e,A,{empty:M.Callbacks("once memory").add((function(){J.remove(e,[n+"queue",A])}))})}}),M.fn.extend({queue:function(e,n){var A=2;return"string"!=typeof e&&(n=e,e="fx",A--),arguments.length<A?M.queue(this[0],e):void 0===n?this:this.each((function(){var A=M.queue(this,e,n);M._queueHooks(this,e),"fx"===e&&"inprogress"!==A[0]&&M.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){M.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var A,t=1,l=M.Deferred(),i=this,o=this.length,s=function(){--t||l.resolveWith(i,[i])};for("string"!=typeof e&&(n=e,e=void 0),e=e||"fx";o--;)(A=J.get(i[o],e+"queueHooks"))&&A.empty&&(t++,A.empty.add(s));return s(),l.promise(n)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,le=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=o.documentElement,se=function(e){return M.contains(e.ownerDocument,e)},ae={composed:!0};oe.getRootNode&&(se=function(e){return M.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var Ce=function(e,n){return"none"===(e=n||e).style.display||""===e.style.display&&se(e)&&"none"===M.css(e,"display")},re=function(e,n,A,t){var l,i,o={};for(i in n)o[i]=e.style[i],e.style[i]=n[i];for(i in l=A.apply(e,t||[]),n)e.style[i]=o[i];return l};function ce(e,n,A,t){var l,i,o=20,s=t?function(){return t.cur()}:function(){return M.css(e,n,"")},a=s(),C=A&&A[3]||(M.cssNumber[n]?"":"px"),r=e.nodeType&&(M.cssNumber[n]||"px"!==C&&+a)&&le.exec(M.css(e,n));if(r&&r[3]!==C){for(a/=2,C=C||r[3],r=+a||1;o--;)M.style(e,n,r+C),(1-i)*(1-(i=s()/a||.5))<=0&&(o=0),r/=i;r*=2,M.style(e,n,r+C),A=A||[]}return A&&(r=+r||+a||0,l=A[1]?r+(A[1]+1)*A[2]:+A[2],t&&(t.unit=C,t.start=r,t.end=l)),l}var ue={};function de(e){var n,A=e.ownerDocument,t=e.nodeName,l=ue[t];return l||(n=A.body.appendChild(A.createElement(t)),l=M.css(n,"display"),n.parentNode.removeChild(n),"none"===l&&(l="block"),ue[t]=l,l)}function me(e,n){for(var A,t,l=[],i=0,o=e.length;i<o;i++)(t=e[i]).style&&(A=t.style.display,n?("none"===A&&(l[i]=J.get(t,"display")||null,l[i]||(t.style.display="")),""===t.style.display&&Ce(t)&&(l[i]=de(t))):"none"!==A&&(l[i]="none",J.set(t,"display",A)));for(i=0;i<o;i++)null!=l[i]&&(e[i].style.display=l[i]);return e}M.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){Ce(this)?M(this).show():M(this).hide()}))}});var he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,Ie={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,n){var A;return A=void 0!==e.getElementsByTagName?e.getElementsByTagName(n||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(n||"*"):[],void 0===n||n&&x(e,n)?M.merge([e],A):A}function ge(e,n){for(var A=0,t=e.length;A<t;A++)J.set(e[A],"globalEval",!n||J.get(n[A],"globalEval"))}Ie.optgroup=Ie.option,Ie.tbody=Ie.tfoot=Ie.colgroup=Ie.caption=Ie.thead,Ie.th=Ie.td;var Ee,be,Me=/<|&#?\w+;/;function ye(e,n,A,t,l){for(var i,o,s,a,C,r,c=n.createDocumentFragment(),u=[],d=0,m=e.length;d<m;d++)if((i=e[d])||0===i)if("object"===b(i))M.merge(u,i.nodeType?[i]:i);else if(Me.test(i)){for(o=o||c.appendChild(n.createElement("div")),s=(pe.exec(i)||["",""])[1].toLowerCase(),a=Ie[s]||Ie._default,o.innerHTML=a[1]+M.htmlPrefilter(i)+a[2],r=a[0];r--;)o=o.lastChild;M.merge(u,o.childNodes),(o=c.firstChild).textContent=""}else u.push(n.createTextNode(i));for(c.textContent="",d=0;i=u[d++];)if(t&&M.inArray(i,t)>-1)l&&l.push(i);else if(C=se(i),o=ve(c.appendChild(i),"script"),C&&ge(o),A)for(r=0;i=o[r++];)fe.test(i.type||"")&&A.push(i);return c}Ee=o.createDocumentFragment().appendChild(o.createElement("div")),(be=o.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),Ee.appendChild(be),f.checkClone=Ee.cloneNode(!0).cloneNode(!0).lastChild.checked,Ee.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!Ee.cloneNode(!0).lastChild.defaultValue;var Ge=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;function Be(){return!0}function Oe(){return!1}function xe(e,n){return e===function(){try{return o.activeElement}catch(e){}}()==("focus"===n)}function Ke(e,n,A,t,l,i){var o,s;if("object"==typeof n){for(s in"string"!=typeof A&&(t=t||A,A=void 0),n)Ke(e,s,A,t,n[s],i);return e}if(null==t&&null==l?(l=A,t=A=void 0):null==l&&("string"==typeof A?(l=t,t=void 0):(l=t,t=A,A=void 0)),!1===l)l=Oe;else if(!l)return e;return 1===i&&(o=l,(l=function(e){return M().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=M.guid++)),e.each((function(){M.event.add(this,n,l,t,A)}))}function De(e,n,A){A?(J.set(e,n,!1),M.event.add(e,n,{namespace:!1,handler:function(e){var t,l,i=J.get(this,n);if(1&e.isTrigger&&this[n]){if(i.length)(M.event.special[n]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),J.set(this,n,i),t=A(this,n),this[n](),i!==(l=J.get(this,n))||t?J.set(this,n,!1):l={},i!==l)return e.stopImmediatePropagation(),e.preventDefault(),l.value}else i.length&&(J.set(this,n,{value:M.event.trigger(M.extend(i[0],M.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,n)&&M.event.add(e,n,Be)}M.event={global:{},add:function(e,n,A,t,l){var i,o,s,a,C,r,c,u,d,m,h,p=J.get(e);if(p)for(A.handler&&(A=(i=A).handler,l=i.selector),l&&M.find.matchesSelector(oe,l),A.guid||(A.guid=M.guid++),(a=p.events)||(a=p.events={}),(o=p.handle)||(o=p.handle=function(n){return void 0!==M&&M.event.triggered!==n.type?M.event.dispatch.apply(e,arguments):void 0}),C=(n=(n||"").match(Y)||[""]).length;C--;)d=h=(s=Qe.exec(n[C])||[])[1],m=(s[2]||"").split(".").sort(),d&&(c=M.event.special[d]||{},d=(l?c.delegateType:c.bindType)||d,c=M.event.special[d]||{},r=M.extend({type:d,origType:h,data:t,handler:A,guid:A.guid,selector:l,needsContext:l&&M.expr.match.needsContext.test(l),namespace:m.join(".")},i),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,t,m,o)||e.addEventListener&&e.addEventListener(d,o)),c.add&&(c.add.call(e,r),r.handler.guid||(r.handler.guid=A.guid)),l?u.splice(u.delegateCount++,0,r):u.push(r),M.event.global[d]=!0)},remove:function(e,n,A,t,l){var i,o,s,a,C,r,c,u,d,m,h,p=J.hasData(e)&&J.get(e);if(p&&(a=p.events)){for(C=(n=(n||"").match(Y)||[""]).length;C--;)if(d=h=(s=Qe.exec(n[C])||[])[1],m=(s[2]||"").split(".").sort(),d){for(c=M.event.special[d]||{},u=a[d=(t?c.delegateType:c.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=u.length;i--;)r=u[i],!l&&h!==r.origType||A&&A.guid!==r.guid||s&&!s.test(r.namespace)||t&&t!==r.selector&&("**"!==t||!r.selector)||(u.splice(i,1),r.selector&&u.delegateCount--,c.remove&&c.remove.call(e,r));o&&!u.length&&(c.teardown&&!1!==c.teardown.call(e,m,p.handle)||M.removeEvent(e,d,p.handle),delete a[d])}else for(d in a)M.event.remove(e,d+n[C],A,t,!0);M.isEmptyObject(a)&&J.remove(e,"handle events")}},dispatch:function(e){var n,A,t,l,i,o,s=M.event.fix(e),a=new Array(arguments.length),C=(J.get(this,"events")||{})[s.type]||[],r=M.event.special[s.type]||{};for(a[0]=s,n=1;n<arguments.length;n++)a[n]=arguments[n];if(s.delegateTarget=this,!r.preDispatch||!1!==r.preDispatch.call(this,s)){for(o=M.event.handlers.call(this,s,C),n=0;(l=o[n++])&&!s.isPropagationStopped();)for(s.currentTarget=l.elem,A=0;(i=l.handlers[A++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(t=((M.event.special[i.origType]||{}).handle||i.handler).apply(l.elem,a))&&!1===(s.result=t)&&(s.preventDefault(),s.stopPropagation()));return r.postDispatch&&r.postDispatch.call(this,s),s.result}},handlers:function(e,n){var A,t,l,i,o,s=[],a=n.delegateCount,C=e.target;if(a&&C.nodeType&&!("click"===e.type&&e.button>=1))for(;C!==this;C=C.parentNode||this)if(1===C.nodeType&&("click"!==e.type||!0!==C.disabled)){for(i=[],o={},A=0;A<a;A++)void 0===o[l=(t=n[A]).selector+" "]&&(o[l]=t.needsContext?M(l,this).index(C)>-1:M.find(l,this,null,[C]).length),o[l]&&i.push(t);i.length&&s.push({elem:C,handlers:i})}return C=this,a<n.length&&s.push({elem:C,handlers:n.slice(a)}),s},addProp:function(e,n){Object.defineProperty(M.Event.prototype,e,{enumerable:!0,configurable:!0,get:I(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(n){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:n})}})},fix:function(e){return e[M.expando]?e:new M.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var n=this||e;return he.test(n.type)&&n.click&&x(n,"input")&&De(n,"click",Be),!1},trigger:function(e){var n=this||e;return he.test(n.type)&&n.click&&x(n,"input")&&De(n,"click"),!0},_default:function(e){var n=e.target;return he.test(n.type)&&n.click&&x(n,"input")&&J.get(n,"click")||x(n,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},M.removeEvent=function(e,n,A){e.removeEventListener&&e.removeEventListener(n,A)},M.Event=function(e,n){if(!(this instanceof M.Event))return new M.Event(e,n);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Be:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,n&&M.extend(this,n),this.timeStamp=e&&e.timeStamp||Date.now(),this[M.expando]=!0},M.Event.prototype={constructor:M.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Be,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Be,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Be,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},M.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var n=e.button;return null==e.which&&Ge.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==n&&Se.test(e.type)?1&n?1:2&n?3:4&n?2:0:e.which}},M.event.addProp),M.each({focus:"focusin",blur:"focusout"},(function(e,n){M.event.special[e]={setup:function(){return De(this,e,xe),!1},trigger:function(){return De(this,e),!0},delegateType:n}})),M.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,n){M.event.special[e]={delegateType:n,bindType:n,handle:function(e){var A,t=this,l=e.relatedTarget,i=e.handleObj;return l&&(l===t||M.contains(t,l))||(e.type=i.origType,A=i.handler.apply(this,arguments),e.type=n),A}}})),M.fn.extend({on:function(e,n,A,t){return Ke(this,e,n,A,t)},one:function(e,n,A,t){return Ke(this,e,n,A,t,1)},off:function(e,n,A){var t,l;if(e&&e.preventDefault&&e.handleObj)return t=e.handleObj,M(e.delegateTarget).off(t.namespace?t.origType+"."+t.namespace:t.origType,t.selector,t.handler),this;if("object"==typeof e){for(l in e)this.off(l,n,e[l]);return this}return!1!==n&&"function"!=typeof n||(A=n,n=void 0),!1===A&&(A=Oe),this.each((function(){M.event.remove(this,e,A,n)}))}});var we=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Le=/<script|<style|<link/i,ke=/checked\s*(?:[^=]|=\s*.checked.)/i,_e=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ue(e,n){return x(e,"table")&&x(11!==n.nodeType?n:n.firstChild,"tr")&&M(e).children("tbody")[0]||e}function Ye(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ve(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Te(e,n){var A,t,l,i,o,s,a,C;if(1===n.nodeType){if(J.hasData(e)&&(i=J.access(e),o=J.set(n,i),C=i.events))for(l in delete o.handle,o.events={},C)for(A=0,t=C[l].length;A<t;A++)M.event.add(n,l,C[l][A]);Z.hasData(e)&&(s=Z.access(e),a=M.extend({},s),Z.set(n,a))}}function Re(e,n){var A=n.nodeName.toLowerCase();"input"===A&&he.test(e.type)?n.checked=e.checked:"input"!==A&&"textarea"!==A||(n.defaultValue=e.defaultValue)}function We(e,n,A,t){n=C.apply([],n);var l,i,o,s,a,r,c=0,u=e.length,d=u-1,m=n[0],h=I(m);if(h||u>1&&"string"==typeof m&&!f.checkClone&&ke.test(m))return e.each((function(l){var i=e.eq(l);h&&(n[0]=m.call(this,l,i.html())),We(i,n,A,t)}));if(u&&(i=(l=ye(n,e[0].ownerDocument,!1,e,t)).firstChild,1===l.childNodes.length&&(l=i),i||t)){for(s=(o=M.map(ve(l,"script"),Ye)).length;c<u;c++)a=l,c!==d&&(a=M.clone(a,!0,!0),s&&M.merge(o,ve(a,"script"))),A.call(e[c],a,c);if(s)for(r=o[o.length-1].ownerDocument,M.map(o,Ve),c=0;c<s;c++)a=o[c],fe.test(a.type||"")&&!J.access(a,"globalEval")&&M.contains(r,a)&&(a.src&&"module"!==(a.type||"").toLowerCase()?M._evalUrl&&!a.noModule&&M._evalUrl(a.src,{nonce:a.nonce||a.getAttribute("nonce")}):E(a.textContent.replace(_e,""),a,r))}return e}function Pe(e,n,A){for(var t,l=n?M.filter(n,e):e,i=0;null!=(t=l[i]);i++)A||1!==t.nodeType||M.cleanData(ve(t)),t.parentNode&&(A&&se(t)&&ge(ve(t,"script")),t.parentNode.removeChild(t));return e}M.extend({htmlPrefilter:function(e){return e.replace(we,"<$1></$2>")},clone:function(e,n,A){var t,l,i,o,s=e.cloneNode(!0),a=se(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||M.isXMLDoc(e)))for(o=ve(s),t=0,l=(i=ve(e)).length;t<l;t++)Re(i[t],o[t]);if(n)if(A)for(i=i||ve(e),o=o||ve(s),t=0,l=i.length;t<l;t++)Te(i[t],o[t]);else Te(e,s);return(o=ve(s,"script")).length>0&&ge(o,!a&&ve(e,"script")),s},cleanData:function(e){for(var n,A,t,l=M.event.special,i=0;void 0!==(A=e[i]);i++)if($(A)){if(n=A[J.expando]){if(n.events)for(t in n.events)l[t]?M.event.remove(A,t):M.removeEvent(A,t,n.handle);A[J.expando]=void 0}A[Z.expando]&&(A[Z.expando]=void 0)}}}),M.fn.extend({detach:function(e){return Pe(this,e,!0)},remove:function(e){return Pe(this,e)},text:function(e){return j(this,(function(e){return void 0===e?M.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return We(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ue(this,e).appendChild(e)}))},prepend:function(){return We(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=Ue(this,e);n.insertBefore(e,n.firstChild)}}))},before:function(){return We(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return We(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,n=0;null!=(e=this[n]);n++)1===e.nodeType&&(M.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,n){return e=null!=e&&e,n=null==n?e:n,this.map((function(){return M.clone(this,e,n)}))},html:function(e){return j(this,(function(e){var n=this[0]||{},A=0,t=this.length;if(void 0===e&&1===n.nodeType)return n.innerHTML;if("string"==typeof e&&!Le.test(e)&&!Ie[(pe.exec(e)||["",""])[1].toLowerCase()]){e=M.htmlPrefilter(e);try{for(;A<t;A++)1===(n=this[A]||{}).nodeType&&(M.cleanData(ve(n,!1)),n.innerHTML=e);n=0}catch(e){}}n&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return We(this,arguments,(function(n){var A=this.parentNode;M.inArray(this,e)<0&&(M.cleanData(ve(this)),A&&A.replaceChild(n,this))}),e)}}),M.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,n){M.fn[e]=function(e){for(var A,t=[],l=M(e),i=l.length-1,o=0;o<=i;o++)A=o===i?this:this.clone(!0),M(l[o])[n](A),r.apply(t,A.get());return this.pushStack(t)}}));var He=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),je=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=A),n.getComputedStyle(e)},Fe=new RegExp(ie.join("|"),"i");function Ne(e,n,A){var t,l,i,o,s=e.style;return(A=A||je(e))&&(""!==(o=A.getPropertyValue(n)||A[n])||se(e)||(o=M.style(e,n)),!f.pixelBoxStyles()&&He.test(o)&&Fe.test(n)&&(t=s.width,l=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=A.width,s.width=t,s.minWidth=l,s.maxWidth=i)),void 0!==o?o+"":o}function qe(e,n){return{get:function(){if(!e())return(this.get=n).apply(this,arguments);delete this.get}}}!function(){function e(){if(r){C.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",r.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(C).appendChild(r);var e=A.getComputedStyle(r);t="1%"!==e.top,a=12===n(e.marginLeft),r.style.right="60%",s=36===n(e.right),l=36===n(e.width),r.style.position="absolute",i=12===n(r.offsetWidth/3),oe.removeChild(C),r=null}}function n(e){return Math.round(parseFloat(e))}var t,l,i,s,a,C=o.createElement("div"),r=o.createElement("div");r.style&&(r.style.backgroundClip="content-box",r.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===r.style.backgroundClip,M.extend(f,{boxSizingReliable:function(){return e(),l},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),t},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var ze=["Webkit","Moz","ms"],$e=o.createElement("div").style,Xe={};function Je(e){var n=M.cssProps[e]||Xe[e];return n||(e in $e?e:Xe[e]=function(e){for(var n=e[0].toUpperCase()+e.slice(1),A=ze.length;A--;)if((e=ze[A]+n)in $e)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,en=/^--/,nn={position:"absolute",visibility:"hidden",display:"block"},An={letterSpacing:"0",fontWeight:"400"};function tn(e,n,A){var t=le.exec(n);return t?Math.max(0,t[2]-(A||0))+(t[3]||"px"):n}function ln(e,n,A,t,l,i){var o="width"===n?1:0,s=0,a=0;if(A===(t?"border":"content"))return 0;for(;o<4;o+=2)"margin"===A&&(a+=M.css(e,A+ie[o],!0,l)),t?("content"===A&&(a-=M.css(e,"padding"+ie[o],!0,l)),"margin"!==A&&(a-=M.css(e,"border"+ie[o]+"Width",!0,l))):(a+=M.css(e,"padding"+ie[o],!0,l),"padding"!==A?a+=M.css(e,"border"+ie[o]+"Width",!0,l):s+=M.css(e,"border"+ie[o]+"Width",!0,l));return!t&&i>=0&&(a+=Math.max(0,Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-i-a-s-.5))||0),a}function on(e,n,A){var t=je(e),l=(!f.boxSizingReliable()||A)&&"border-box"===M.css(e,"boxSizing",!1,t),i=l,o=Ne(e,n,t),s="offset"+n[0].toUpperCase()+n.slice(1);if(He.test(o)){if(!A)return o;o="auto"}return(!f.boxSizingReliable()&&l||"auto"===o||!parseFloat(o)&&"inline"===M.css(e,"display",!1,t))&&e.getClientRects().length&&(l="border-box"===M.css(e,"boxSizing",!1,t),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+ln(e,n,A||(l?"border":"content"),i,t,o)+"px"}function sn(e,n,A,t,l){return new sn.prototype.init(e,n,A,t,l)}M.extend({cssHooks:{opacity:{get:function(e,n){if(n){var A=Ne(e,"opacity");return""===A?"1":A}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,n,A,t){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var l,i,o,s=z(n),a=en.test(n),C=e.style;if(a||(n=Je(s)),o=M.cssHooks[n]||M.cssHooks[s],void 0===A)return o&&"get"in o&&void 0!==(l=o.get(e,!1,t))?l:C[n];"string"===(i=typeof A)&&(l=le.exec(A))&&l[1]&&(A=ce(e,n,l),i="number"),null!=A&&A==A&&("number"!==i||a||(A+=l&&l[3]||(M.cssNumber[s]?"":"px")),f.clearCloneStyle||""!==A||0!==n.indexOf("background")||(C[n]="inherit"),o&&"set"in o&&void 0===(A=o.set(e,A,t))||(a?C.setProperty(n,A):C[n]=A))}},css:function(e,n,A,t){var l,i,o,s=z(n);return en.test(n)||(n=Je(s)),(o=M.cssHooks[n]||M.cssHooks[s])&&"get"in o&&(l=o.get(e,!0,A)),void 0===l&&(l=Ne(e,n,t)),"normal"===l&&n in An&&(l=An[n]),""===A||A?(i=parseFloat(l),!0===A||isFinite(i)?i||0:l):l}}),M.each(["height","width"],(function(e,n){M.cssHooks[n]={get:function(e,A,t){if(A)return!Ze.test(M.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?on(e,n,t):re(e,nn,(function(){return on(e,n,t)}))},set:function(e,A,t){var l,i=je(e),o=!f.scrollboxSize()&&"absolute"===i.position,s=(o||t)&&"border-box"===M.css(e,"boxSizing",!1,i),a=t?ln(e,n,t,s,i):0;return s&&o&&(a-=Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(i[n])-ln(e,n,"border",!1,i)-.5)),a&&(l=le.exec(A))&&"px"!==(l[3]||"px")&&(e.style[n]=A,A=M.css(e,n)),tn(0,A,a)}}})),M.cssHooks.marginLeft=qe(f.reliableMarginLeft,(function(e,n){if(n)return(parseFloat(Ne(e,"marginLeft"))||e.getBoundingClientRect().left-re(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),M.each({margin:"",padding:"",border:"Width"},(function(e,n){M.cssHooks[e+n]={expand:function(A){for(var t=0,l={},i="string"==typeof A?A.split(" "):[A];t<4;t++)l[e+ie[t]+n]=i[t]||i[t-2]||i[0];return l}},"margin"!==e&&(M.cssHooks[e+n].set=tn)})),M.fn.extend({css:function(e,n){return j(this,(function(e,n,A){var t,l,i={},o=0;if(Array.isArray(n)){for(t=je(e),l=n.length;o<l;o++)i[n[o]]=M.css(e,n[o],!1,t);return i}return void 0!==A?M.style(e,n,A):M.css(e,n)}),e,n,arguments.length>1)}}),M.Tween=sn,sn.prototype={constructor:sn,init:function(e,n,A,t,l,i){this.elem=e,this.prop=A,this.easing=l||M.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=t,this.unit=i||(M.cssNumber[A]?"":"px")},cur:function(){var e=sn.propHooks[this.prop];return e&&e.get?e.get(this):sn.propHooks._default.get(this)},run:function(e){var n,A=sn.propHooks[this.prop];return this.options.duration?this.pos=n=M.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=n=e,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),A&&A.set?A.set(this):sn.propHooks._default.set(this),this}},sn.prototype.init.prototype=sn.prototype,sn.propHooks={_default:{get:function(e){var n;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(n=M.css(e.elem,e.prop,""))&&"auto"!==n?n:0},set:function(e){M.fx.step[e.prop]?M.fx.step[e.prop](e):1!==e.elem.nodeType||!M.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:M.style(e.elem,e.prop,e.now+e.unit)}}},sn.propHooks.scrollTop=sn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},M.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},M.fx=sn.prototype.init,M.fx.step={};var an,Cn,rn=/^(?:toggle|show|hide)$/,cn=/queueHooks$/;function un(){Cn&&(!1===o.hidden&&A.requestAnimationFrame?A.requestAnimationFrame(un):A.setTimeout(un,M.fx.interval),M.fx.tick())}function dn(){return A.setTimeout((function(){an=void 0})),an=Date.now()}function mn(e,n){var A,t=0,l={height:e};for(n=n?1:0;t<4;t+=2-n)l["margin"+(A=ie[t])]=l["padding"+A]=e;return n&&(l.opacity=l.width=e),l}function hn(e,n,A){for(var t,l=(pn.tweeners[n]||[]).concat(pn.tweeners["*"]),i=0,o=l.length;i<o;i++)if(t=l[i].call(A,n,e))return t}function pn(e,n,A){var t,l,i=0,o=pn.prefilters.length,s=M.Deferred().always((function(){delete a.elem})),a=function(){if(l)return!1;for(var n=an||dn(),A=Math.max(0,C.startTime+C.duration-n),t=1-(A/C.duration||0),i=0,o=C.tweens.length;i<o;i++)C.tweens[i].run(t);return s.notifyWith(e,[C,t,A]),t<1&&o?A:(o||s.notifyWith(e,[C,1,0]),s.resolveWith(e,[C]),!1)},C=s.promise({elem:e,props:M.extend({},n),opts:M.extend(!0,{specialEasing:{},easing:M.easing._default},A),originalProperties:n,originalOptions:A,startTime:an||dn(),duration:A.duration,tweens:[],createTween:function(n,A){var t=M.Tween(e,C.opts,n,A,C.opts.specialEasing[n]||C.opts.easing);return C.tweens.push(t),t},stop:function(n){var A=0,t=n?C.tweens.length:0;if(l)return this;for(l=!0;A<t;A++)C.tweens[A].run(1);return n?(s.notifyWith(e,[C,1,0]),s.resolveWith(e,[C,n])):s.rejectWith(e,[C,n]),this}}),r=C.props;for(!function(e,n){var A,t,l,i,o;for(A in e)if(l=n[t=z(A)],i=e[A],Array.isArray(i)&&(l=i[1],i=e[A]=i[0]),A!==t&&(e[t]=i,delete e[A]),(o=M.cssHooks[t])&&"expand"in o)for(A in i=o.expand(i),delete e[t],i)A in e||(e[A]=i[A],n[A]=l);else n[t]=l}(r,C.opts.specialEasing);i<o;i++)if(t=pn.prefilters[i].call(C,e,r,C.opts))return I(t.stop)&&(M._queueHooks(C.elem,C.opts.queue).stop=t.stop.bind(t)),t;return M.map(r,hn,C),I(C.opts.start)&&C.opts.start.call(e,C),C.progress(C.opts.progress).done(C.opts.done,C.opts.complete).fail(C.opts.fail).always(C.opts.always),M.fx.timer(M.extend(a,{elem:e,anim:C,queue:C.opts.queue})),C}M.Animation=M.extend(pn,{tweeners:{"*":[function(e,n){var A=this.createTween(e,n);return ce(A.elem,e,le.exec(n),A),A}]},tweener:function(e,n){I(e)?(n=e,e=["*"]):e=e.match(Y);for(var A,t=0,l=e.length;t<l;t++)A=e[t],pn.tweeners[A]=pn.tweeners[A]||[],pn.tweeners[A].unshift(n)},prefilters:[function(e,n,A){var t,l,i,o,s,a,C,r,c="width"in n||"height"in n,u=this,d={},m=e.style,h=e.nodeType&&Ce(e),p=J.get(e,"fxshow");for(t in A.queue||(null==(o=M._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,u.always((function(){u.always((function(){o.unqueued--,M.queue(e,"fx").length||o.empty.fire()}))}))),n)if(l=n[t],rn.test(l)){if(delete n[t],i=i||"toggle"===l,l===(h?"hide":"show")){if("show"!==l||!p||void 0===p[t])continue;h=!0}d[t]=p&&p[t]||M.style(e,t)}if((a=!M.isEmptyObject(n))||!M.isEmptyObject(d))for(t in c&&1===e.nodeType&&(A.overflow=[m.overflow,m.overflowX,m.overflowY],null==(C=p&&p.display)&&(C=J.get(e,"display")),"none"===(r=M.css(e,"display"))&&(C?r=C:(me([e],!0),C=e.style.display||C,r=M.css(e,"display"),me([e]))),("inline"===r||"inline-block"===r&&null!=C)&&"none"===M.css(e,"float")&&(a||(u.done((function(){m.display=C})),null==C&&(r=m.display,C="none"===r?"":r)),m.display="inline-block")),A.overflow&&(m.overflow="hidden",u.always((function(){m.overflow=A.overflow[0],m.overflowX=A.overflow[1],m.overflowY=A.overflow[2]}))),a=!1,d)a||(p?"hidden"in p&&(h=p.hidden):p=J.access(e,"fxshow",{display:C}),i&&(p.hidden=!h),h&&me([e],!0),u.done((function(){for(t in h||me([e]),J.remove(e,"fxshow"),d)M.style(e,t,d[t])}))),a=hn(h?p[t]:0,t,u),t in p||(p[t]=a.start,h&&(a.end=a.start,a.start=0))}],prefilter:function(e,n){n?pn.prefilters.unshift(e):pn.prefilters.push(e)}}),M.speed=function(e,n,A){var t=e&&"object"==typeof e?M.extend({},e):{complete:A||!A&&n||I(e)&&e,duration:e,easing:A&&n||n&&!I(n)&&n};return M.fx.off?t.duration=0:"number"!=typeof t.duration&&(t.duration in M.fx.speeds?t.duration=M.fx.speeds[t.duration]:t.duration=M.fx.speeds._default),null!=t.queue&&!0!==t.queue||(t.queue="fx"),t.old=t.complete,t.complete=function(){I(t.old)&&t.old.call(this),t.queue&&M.dequeue(this,t.queue)},t},M.fn.extend({fadeTo:function(e,n,A,t){return this.filter(Ce).css("opacity",0).show().end().animate({opacity:n},e,A,t)},animate:function(e,n,A,t){var l=M.isEmptyObject(e),i=M.speed(n,A,t),o=function(){var n=pn(this,M.extend({},e),i);(l||J.get(this,"finish"))&&n.stop(!0)};return o.finish=o,l||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,n,A){var t=function(e){var n=e.stop;delete e.stop,n(A)};return"string"!=typeof e&&(A=n,n=e,e=void 0),n&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var n=!0,l=null!=e&&e+"queueHooks",i=M.timers,o=J.get(this);if(l)o[l]&&o[l].stop&&t(o[l]);else for(l in o)o[l]&&o[l].stop&&cn.test(l)&&t(o[l]);for(l=i.length;l--;)i[l].elem!==this||null!=e&&i[l].queue!==e||(i[l].anim.stop(A),n=!1,i.splice(l,1));!n&&A||M.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var n,A=J.get(this),t=A[e+"queue"],l=A[e+"queueHooks"],i=M.timers,o=t?t.length:0;for(A.finish=!0,M.queue(this,e,[]),l&&l.stop&&l.stop.call(this,!0),n=i.length;n--;)i[n].elem===this&&i[n].queue===e&&(i[n].anim.stop(!0),i.splice(n,1));for(n=0;n<o;n++)t[n]&&t[n].finish&&t[n].finish.call(this);delete A.finish}))}}),M.each(["toggle","show","hide"],(function(e,n){var A=M.fn[n];M.fn[n]=function(e,t,l){return null==e||"boolean"==typeof e?A.apply(this,arguments):this.animate(mn(n,!0),e,t,l)}})),M.each({slideDown:mn("show"),slideUp:mn("hide"),slideToggle:mn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,n){M.fn[e]=function(e,A,t){return this.animate(n,e,A,t)}})),M.timers=[],M.fx.tick=function(){var e,n=0,A=M.timers;for(an=Date.now();n<A.length;n++)(e=A[n])()||A[n]!==e||A.splice(n--,1);A.length||M.fx.stop(),an=void 0},M.fx.timer=function(e){M.timers.push(e),M.fx.start()},M.fx.interval=13,M.fx.start=function(){Cn||(Cn=!0,un())},M.fx.stop=function(){Cn=null},M.fx.speeds={slow:600,fast:200,_default:400},M.fn.delay=function(e,n){return e=M.fx&&M.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,t){var l=A.setTimeout(n,e);t.stop=function(){A.clearTimeout(l)}}))},function(){var e=o.createElement("input"),n=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=n.selected,(e=o.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var fn,In=M.expr.attrHandle;M.fn.extend({attr:function(e,n){return j(this,M.attr,e,n,arguments.length>1)},removeAttr:function(e){return this.each((function(){M.removeAttr(this,e)}))}}),M.extend({attr:function(e,n,A){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?M.prop(e,n,A):(1===i&&M.isXMLDoc(e)||(l=M.attrHooks[n.toLowerCase()]||(M.expr.match.bool.test(n)?fn:void 0)),void 0!==A?null===A?void M.removeAttr(e,n):l&&"set"in l&&void 0!==(t=l.set(e,A,n))?t:(e.setAttribute(n,A+""),A):l&&"get"in l&&null!==(t=l.get(e,n))?t:null==(t=M.find.attr(e,n))?void 0:t)},attrHooks:{type:{set:function(e,n){if(!f.radioValue&&"radio"===n&&x(e,"input")){var A=e.value;return e.setAttribute("type",n),A&&(e.value=A),n}}}},removeAttr:function(e,n){var A,t=0,l=n&&n.match(Y);if(l&&1===e.nodeType)for(;A=l[t++];)e.removeAttribute(A)}}),fn={set:function(e,n,A){return!1===n?M.removeAttr(e,A):e.setAttribute(A,A),A}},M.each(M.expr.match.bool.source.match(/\w+/g),(function(e,n){var A=In[n]||M.find.attr;In[n]=function(e,n,t){var l,i,o=n.toLowerCase();return t||(i=In[o],In[o]=l,l=null!=A(e,n,t)?o:null,In[o]=i),l}}));var vn=/^(?:input|select|textarea|button)$/i,gn=/^(?:a|area)$/i;function En(e){return(e.match(Y)||[]).join(" ")}function bn(e){return e.getAttribute&&e.getAttribute("class")||""}function Mn(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Y)||[]}M.fn.extend({prop:function(e,n){return j(this,M.prop,e,n,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[M.propFix[e]||e]}))}}),M.extend({prop:function(e,n,A){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&M.isXMLDoc(e)||(n=M.propFix[n]||n,l=M.propHooks[n]),void 0!==A?l&&"set"in l&&void 0!==(t=l.set(e,A,n))?t:e[n]=A:l&&"get"in l&&null!==(t=l.get(e,n))?t:e[n]},propHooks:{tabIndex:{get:function(e){var n=M.find.attr(e,"tabindex");return n?parseInt(n,10):vn.test(e.nodeName)||gn.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(M.propHooks.selected={get:function(e){var n=e.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null},set:function(e){var n=e.parentNode;n&&(n.selectedIndex,n.parentNode&&n.parentNode.selectedIndex)}}),M.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){M.propFix[this.toLowerCase()]=this})),M.fn.extend({addClass:function(e){var n,A,t,l,i,o,s,a=0;if(I(e))return this.each((function(n){M(this).addClass(e.call(this,n,bn(this)))}));if((n=Mn(e)).length)for(;A=this[a++];)if(l=bn(A),t=1===A.nodeType&&" "+En(l)+" "){for(o=0;i=n[o++];)t.indexOf(" "+i+" ")<0&&(t+=i+" ");l!==(s=En(t))&&A.setAttribute("class",s)}return this},removeClass:function(e){var n,A,t,l,i,o,s,a=0;if(I(e))return this.each((function(n){M(this).removeClass(e.call(this,n,bn(this)))}));if(!arguments.length)return this.attr("class","");if((n=Mn(e)).length)for(;A=this[a++];)if(l=bn(A),t=1===A.nodeType&&" "+En(l)+" "){for(o=0;i=n[o++];)for(;t.indexOf(" "+i+" ")>-1;)t=t.replace(" "+i+" "," ");l!==(s=En(t))&&A.setAttribute("class",s)}return this},toggleClass:function(e,n){var A=typeof e,t="string"===A||Array.isArray(e);return"boolean"==typeof n&&t?n?this.addClass(e):this.removeClass(e):I(e)?this.each((function(A){M(this).toggleClass(e.call(this,A,bn(this),n),n)})):this.each((function(){var n,l,i,o;if(t)for(l=0,i=M(this),o=Mn(e);n=o[l++];)i.hasClass(n)?i.removeClass(n):i.addClass(n);else void 0!==e&&"boolean"!==A||((n=bn(this))&&J.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var n,A,t=0;for(n=" "+e+" ";A=this[t++];)if(1===A.nodeType&&(" "+En(bn(A))+" ").indexOf(n)>-1)return!0;return!1}});var yn=/\r/g;M.fn.extend({val:function(e){var n,A,t,l=this[0];return arguments.length?(t=I(e),this.each((function(A){var l;1===this.nodeType&&(null==(l=t?e.call(this,A,M(this).val()):e)?l="":"number"==typeof l?l+="":Array.isArray(l)&&(l=M.map(l,(function(e){return null==e?"":e+""}))),(n=M.valHooks[this.type]||M.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,l,"value")||(this.value=l))}))):l?(n=M.valHooks[l.type]||M.valHooks[l.nodeName.toLowerCase()])&&"get"in n&&void 0!==(A=n.get(l,"value"))?A:"string"==typeof(A=l.value)?A.replace(yn,""):null==A?"":A:void 0}}),M.extend({valHooks:{option:{get:function(e){var n=M.find.attr(e,"value");return null!=n?n:En(M.text(e))}},select:{get:function(e){var n,A,t,l=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],a=o?i+1:l.length;for(t=i<0?a:o?i:0;t<a;t++)if(((A=l[t]).selected||t===i)&&!A.disabled&&(!A.parentNode.disabled||!x(A.parentNode,"optgroup"))){if(n=M(A).val(),o)return n;s.push(n)}return s},set:function(e,n){for(var A,t,l=e.options,i=M.makeArray(n),o=l.length;o--;)((t=l[o]).selected=M.inArray(M.valHooks.option.get(t),i)>-1)&&(A=!0);return A||(e.selectedIndex=-1),i}}}}),M.each(["radio","checkbox"],(function(){M.valHooks[this]={set:function(e,n){if(Array.isArray(n))return e.checked=M.inArray(M(e).val(),n)>-1}},f.checkOn||(M.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in A;var Gn=/^(?:focusinfocus|focusoutblur)$/,Sn=function(e){e.stopPropagation()};M.extend(M.event,{trigger:function(e,n,t,l){var i,s,a,C,r,c,u,d,h=[t||o],p=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(s=d=a=t=t||o,3!==t.nodeType&&8!==t.nodeType&&!Gn.test(p+M.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),r=p.indexOf(":")<0&&"on"+p,(e=e[M.expando]?e:new M.Event(p,"object"==typeof e&&e)).isTrigger=l?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=t),n=null==n?[e]:M.makeArray(n,[e]),u=M.event.special[p]||{},l||!u.trigger||!1!==u.trigger.apply(t,n))){if(!l&&!u.noBubble&&!v(t)){for(C=u.delegateType||p,Gn.test(C+p)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(t.ownerDocument||o)&&h.push(a.defaultView||a.parentWindow||A)}for(i=0;(s=h[i++])&&!e.isPropagationStopped();)d=s,e.type=i>1?C:u.bindType||p,(c=(J.get(s,"events")||{})[e.type]&&J.get(s,"handle"))&&c.apply(s,n),(c=r&&s[r])&&c.apply&&$(s)&&(e.result=c.apply(s,n),!1===e.result&&e.preventDefault());return e.type=p,l||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),n)||!$(t)||r&&I(t[p])&&!v(t)&&((a=t[r])&&(t[r]=null),M.event.triggered=p,e.isPropagationStopped()&&d.addEventListener(p,Sn),t[p](),e.isPropagationStopped()&&d.removeEventListener(p,Sn),M.event.triggered=void 0,a&&(t[r]=a)),e.result}},simulate:function(e,n,A){var t=M.extend(new M.Event,A,{type:e,isSimulated:!0});M.event.trigger(t,null,n)}}),M.fn.extend({trigger:function(e,n){return this.each((function(){M.event.trigger(e,n,this)}))},triggerHandler:function(e,n){var A=this[0];if(A)return M.event.trigger(e,n,A,!0)}}),f.focusin||M.each({focus:"focusin",blur:"focusout"},(function(e,n){var A=function(e){M.event.simulate(n,e.target,M.event.fix(e))};M.event.special[n]={setup:function(){var t=this.ownerDocument||this,l=J.access(t,n);l||t.addEventListener(e,A,!0),J.access(t,n,(l||0)+1)},teardown:function(){var t=this.ownerDocument||this,l=J.access(t,n)-1;l?J.access(t,n,l):(t.removeEventListener(e,A,!0),J.remove(t,n))}}}));var Qn=A.location,Bn=Date.now(),On=/\?/;M.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new A.DOMParser).parseFromString(e,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||M.error("Invalid XML: "+e),n};var xn=/\[\]$/,Kn=/\r?\n/g,Dn=/^(?:submit|button|image|reset|file)$/i,wn=/^(?:input|select|textarea|keygen)/i;function Ln(e,n,A,t){var l;if(Array.isArray(n))M.each(n,(function(n,l){A||xn.test(e)?t(e,l):Ln(e+"["+("object"==typeof l&&null!=l?n:"")+"]",l,A,t)}));else if(A||"object"!==b(n))t(e,n);else for(l in n)Ln(e+"["+l+"]",n[l],A,t)}M.param=function(e,n){var A,t=[],l=function(e,n){var A=I(n)?n():n;t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==A?"":A)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!M.isPlainObject(e))M.each(e,(function(){l(this.name,this.value)}));else for(A in e)Ln(A,e[A],n,l);return t.join("&")},M.fn.extend({serialize:function(){return M.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=M.prop(this,"elements");return e?M.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!M(this).is(":disabled")&&wn.test(this.nodeName)&&!Dn.test(e)&&(this.checked||!he.test(e))})).map((function(e,n){var A=M(this).val();return null==A?null:Array.isArray(A)?M.map(A,(function(e){return{name:n.name,value:e.replace(Kn,"\r\n")}})):{name:n.name,value:A.replace(Kn,"\r\n")}})).get()}});var kn=/%20/g,_n=/#.*$/,Un=/([?&])_=[^&]*/,Yn=/^(.*?):[ \t]*([^\r\n]*)$/gm,Vn=/^(?:GET|HEAD)$/,Tn=/^\/\//,Rn={},Wn={},Pn="*/".concat("*"),Hn=o.createElement("a");function jn(e){return function(n,A){"string"!=typeof n&&(A=n,n="*");var t,l=0,i=n.toLowerCase().match(Y)||[];if(I(A))for(;t=i[l++];)"+"===t[0]?(t=t.slice(1)||"*",(e[t]=e[t]||[]).unshift(A)):(e[t]=e[t]||[]).push(A)}}function Fn(e,n,A,t){var l={},i=e===Wn;function o(s){var a;return l[s]=!0,M.each(e[s]||[],(function(e,s){var C=s(n,A,t);return"string"!=typeof C||i||l[C]?i?!(a=C):void 0:(n.dataTypes.unshift(C),o(C),!1)})),a}return o(n.dataTypes[0])||!l["*"]&&o("*")}function Nn(e,n){var A,t,l=M.ajaxSettings.flatOptions||{};for(A in n)void 0!==n[A]&&((l[A]?e:t||(t={}))[A]=n[A]);return t&&M.extend(!0,e,t),e}Hn.href=Qn.href,M.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Qn.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Qn.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Pn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":M.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,n){return n?Nn(Nn(e,M.ajaxSettings),n):Nn(M.ajaxSettings,e)},ajaxPrefilter:jn(Rn),ajaxTransport:jn(Wn),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var t,l,i,s,a,C,r,c,u,d,m=M.ajaxSetup({},n),h=m.context||m,p=m.context&&(h.nodeType||h.jquery)?M(h):M.event,f=M.Deferred(),I=M.Callbacks("once memory"),v=m.statusCode||{},g={},E={},b="canceled",y={readyState:0,getResponseHeader:function(e){var n;if(r){if(!s)for(s={};n=Yn.exec(i);)s[n[1].toLowerCase()+" "]=(s[n[1].toLowerCase()+" "]||[]).concat(n[2]);n=s[e.toLowerCase()+" "]}return null==n?null:n.join(", ")},getAllResponseHeaders:function(){return r?i:null},setRequestHeader:function(e,n){return null==r&&(e=E[e.toLowerCase()]=E[e.toLowerCase()]||e,g[e]=n),this},overrideMimeType:function(e){return null==r&&(m.mimeType=e),this},statusCode:function(e){var n;if(e)if(r)y.always(e[y.status]);else for(n in e)v[n]=[v[n],e[n]];return this},abort:function(e){var n=e||b;return t&&t.abort(n),G(0,n),this}};if(f.promise(y),m.url=((e||m.url||Qn.href)+"").replace(Tn,Qn.protocol+"//"),m.type=n.method||n.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(Y)||[""],null==m.crossDomain){C=o.createElement("a");try{C.href=m.url,C.href=C.href,m.crossDomain=Hn.protocol+"//"+Hn.host!=C.protocol+"//"+C.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=M.param(m.data,m.traditional)),Fn(Rn,m,n,y),r)return y;for(u in(c=M.event&&m.global)&&0==M.active++&&M.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Vn.test(m.type),l=m.url.replace(_n,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(kn,"+")):(d=m.url.slice(l.length),m.data&&(m.processData||"string"==typeof m.data)&&(l+=(On.test(l)?"&":"?")+m.data,delete m.data),!1===m.cache&&(l=l.replace(Un,"$1"),d=(On.test(l)?"&":"?")+"_="+Bn+++d),m.url=l+d),m.ifModified&&(M.lastModified[l]&&y.setRequestHeader("If-Modified-Since",M.lastModified[l]),M.etag[l]&&y.setRequestHeader("If-None-Match",M.etag[l])),(m.data&&m.hasContent&&!1!==m.contentType||n.contentType)&&y.setRequestHeader("Content-Type",m.contentType),y.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Pn+"; q=0.01":""):m.accepts["*"]),m.headers)y.setRequestHeader(u,m.headers[u]);if(m.beforeSend&&(!1===m.beforeSend.call(h,y,m)||r))return y.abort();if(b="abort",I.add(m.complete),y.done(m.success),y.fail(m.error),t=Fn(Wn,m,n,y)){if(y.readyState=1,c&&p.trigger("ajaxSend",[y,m]),r)return y;m.async&&m.timeout>0&&(a=A.setTimeout((function(){y.abort("timeout")}),m.timeout));try{r=!1,t.send(g,G)}catch(e){if(r)throw e;G(-1,e)}}else G(-1,"No Transport");function G(e,n,o,s){var C,u,d,g,E,b=n;r||(r=!0,a&&A.clearTimeout(a),t=void 0,i=s||"",y.readyState=e>0?4:0,C=e>=200&&e<300||304===e,o&&(g=function(e,n,A){for(var t,l,i,o,s=e.contents,a=e.dataTypes;"*"===a[0];)a.shift(),void 0===t&&(t=e.mimeType||n.getResponseHeader("Content-Type"));if(t)for(l in s)if(s[l]&&s[l].test(t)){a.unshift(l);break}if(a[0]in A)i=a[0];else{for(l in A){if(!a[0]||e.converters[l+" "+a[0]]){i=l;break}o||(o=l)}i=i||o}if(i)return i!==a[0]&&a.unshift(i),A[i]}(m,y,o)),g=function(e,n,A,t){var l,i,o,s,a,C={},r=e.dataTypes.slice();if(r[1])for(o in e.converters)C[o.toLowerCase()]=e.converters[o];for(i=r.shift();i;)if(e.responseFields[i]&&(A[e.responseFields[i]]=n),!a&&t&&e.dataFilter&&(n=e.dataFilter(n,e.dataType)),a=i,i=r.shift())if("*"===i)i=a;else if("*"!==a&&a!==i){if(!(o=C[a+" "+i]||C["* "+i]))for(l in C)if((s=l.split(" "))[1]===i&&(o=C[a+" "+s[0]]||C["* "+s[0]])){!0===o?o=C[l]:!0!==C[l]&&(i=s[0],r.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)n=o(n);else try{n=o(n)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+a+" to "+i}}}return{state:"success",data:n}}(m,g,y,C),C?(m.ifModified&&((E=y.getResponseHeader("Last-Modified"))&&(M.lastModified[l]=E),(E=y.getResponseHeader("etag"))&&(M.etag[l]=E)),204===e||"HEAD"===m.type?b="nocontent":304===e?b="notmodified":(b=g.state,u=g.data,C=!(d=g.error))):(d=b,!e&&b||(b="error",e<0&&(e=0))),y.status=e,y.statusText=(n||b)+"",C?f.resolveWith(h,[u,b,y]):f.rejectWith(h,[y,b,d]),y.statusCode(v),v=void 0,c&&p.trigger(C?"ajaxSuccess":"ajaxError",[y,m,C?u:d]),I.fireWith(h,[y,b]),c&&(p.trigger("ajaxComplete",[y,m]),--M.active||M.event.trigger("ajaxStop")))}return y},getJSON:function(e,n,A){return M.get(e,n,A,"json")},getScript:function(e,n){return M.get(e,void 0,n,"script")}}),M.each(["get","post"],(function(e,n){M[n]=function(e,A,t,l){return I(A)&&(l=l||t,t=A,A=void 0),M.ajax(M.extend({url:e,type:n,dataType:l,data:A,success:t},M.isPlainObject(e)&&e))}})),M._evalUrl=function(e,n){return M.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){M.globalEval(e,n)}})},M.fn.extend({wrapAll:function(e){var n;return this[0]&&(I(e)&&(e=e.call(this[0])),n=M(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return I(e)?this.each((function(n){M(this).wrapInner(e.call(this,n))})):this.each((function(){var n=M(this),A=n.contents();A.length?A.wrapAll(e):n.append(e)}))},wrap:function(e){var n=I(e);return this.each((function(A){M(this).wrapAll(n?e.call(this,A):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){M(this).replaceWith(this.childNodes)})),this}}),M.expr.pseudos.hidden=function(e){return!M.expr.pseudos.visible(e)},M.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},M.ajaxSettings.xhr=function(){try{return new A.XMLHttpRequest}catch(e){}};var qn={0:200,1223:204},zn=M.ajaxSettings.xhr();f.cors=!!zn&&"withCredentials"in zn,f.ajax=zn=!!zn,M.ajaxTransport((function(e){var n,t;if(f.cors||zn&&!e.crossDomain)return{send:function(l,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||l["X-Requested-With"]||(l["X-Requested-With"]="XMLHttpRequest"),l)s.setRequestHeader(o,l[o]);n=function(e){return function(){n&&(n=t=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(qn[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),t=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=t:s.onreadystatechange=function(){4===s.readyState&&A.setTimeout((function(){n&&t()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}})),M.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),M.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return M.globalEval(e),e}}}),M.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),M.ajaxTransport("script",(function(e){var n,A;if(e.crossDomain||e.scriptAttrs)return{send:function(t,l){n=M("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",A=function(e){n.remove(),A=null,e&&l("error"===e.type?404:200,e.type)}),o.head.appendChild(n[0])},abort:function(){A&&A()}}}));var $n,Xn=[],Jn=/(=)\?(?=&|$)|\?\?/;M.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xn.pop()||M.expando+"_"+Bn++;return this[e]=!0,e}}),M.ajaxPrefilter("json jsonp",(function(e,n,t){var l,i,o,s=!1!==e.jsonp&&(Jn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return l=e.jsonpCallback=I(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Jn,"$1"+l):!1!==e.jsonp&&(e.url+=(On.test(e.url)?"&":"?")+e.jsonp+"="+l),e.converters["script json"]=function(){return o||M.error(l+" was not called"),o[0]},e.dataTypes[0]="json",i=A[l],A[l]=function(){o=arguments},t.always((function(){void 0===i?M(A).removeProp(l):A[l]=i,e[l]&&(e.jsonpCallback=n.jsonpCallback,Xn.push(l)),o&&I(i)&&i(o[0]),o=i=void 0})),"script"})),f.createHTMLDocument=(($n=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$n.childNodes.length),M.parseHTML=function(e,n,A){return"string"!=typeof e?[]:("boolean"==typeof n&&(A=n,n=!1),n||(f.createHTMLDocument?((t=(n=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,n.head.appendChild(t)):n=o),i=!A&&[],(l=K.exec(e))?[n.createElement(l[1])]:(l=ye([e],n,i),i&&i.length&&M(i).remove(),M.merge([],l.childNodes)));var t,l,i},M.fn.load=function(e,n,A){var t,l,i,o=this,s=e.indexOf(" ");return s>-1&&(t=En(e.slice(s)),e=e.slice(0,s)),I(n)?(A=n,n=void 0):n&&"object"==typeof n&&(l="POST"),o.length>0&&M.ajax({url:e,type:l||"GET",dataType:"html",data:n}).done((function(e){i=arguments,o.html(t?M("<div>").append(M.parseHTML(e)).find(t):e)})).always(A&&function(e,n){o.each((function(){A.apply(this,i||[e.responseText,n,e])}))}),this},M.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,n){M.fn[n]=function(e){return this.on(n,e)}})),M.expr.pseudos.animated=function(e){return M.grep(M.timers,(function(n){return e===n.elem})).length},M.offset={setOffset:function(e,n,A){var t,l,i,o,s,a,C=M.css(e,"position"),r=M(e),c={};"static"===C&&(e.style.position="relative"),s=r.offset(),i=M.css(e,"top"),a=M.css(e,"left"),("absolute"===C||"fixed"===C)&&(i+a).indexOf("auto")>-1?(o=(t=r.position()).top,l=t.left):(o=parseFloat(i)||0,l=parseFloat(a)||0),I(n)&&(n=n.call(e,A,M.extend({},s))),null!=n.top&&(c.top=n.top-s.top+o),null!=n.left&&(c.left=n.left-s.left+l),"using"in n?n.using.call(e,c):r.css(c)}},M.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(n){M.offset.setOffset(this,e,n)}));var n,A,t=this[0];return t?t.getClientRects().length?(n=t.getBoundingClientRect(),A=t.ownerDocument.defaultView,{top:n.top+A.pageYOffset,left:n.left+A.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,n,A,t=this[0],l={top:0,left:0};if("fixed"===M.css(t,"position"))n=t.getBoundingClientRect();else{for(n=this.offset(),A=t.ownerDocument,e=t.offsetParent||A.documentElement;e&&(e===A.body||e===A.documentElement)&&"static"===M.css(e,"position");)e=e.parentNode;e&&e!==t&&1===e.nodeType&&((l=M(e).offset()).top+=M.css(e,"borderTopWidth",!0),l.left+=M.css(e,"borderLeftWidth",!0))}return{top:n.top-l.top-M.css(t,"marginTop",!0),left:n.left-l.left-M.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===M.css(e,"position");)e=e.offsetParent;return e||oe}))}}),M.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,n){var A="pageYOffset"===n;M.fn[e]=function(t){return j(this,(function(e,t,l){var i;if(v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===l)return i?i[n]:e[t];i?i.scrollTo(A?i.pageXOffset:l,A?l:i.pageYOffset):e[t]=l}),e,t,arguments.length)}})),M.each(["top","left"],(function(e,n){M.cssHooks[n]=qe(f.pixelPosition,(function(e,A){if(A)return A=Ne(e,n),He.test(A)?M(e).position()[n]+"px":A}))})),M.each({Height:"height",Width:"width"},(function(e,n){M.each({padding:"inner"+e,content:n,"":"outer"+e},(function(A,t){M.fn[t]=function(l,i){var o=arguments.length&&(A||"boolean"!=typeof l),s=A||(!0===l||!0===i?"margin":"border");return j(this,(function(n,A,l){var i;return v(n)?0===t.indexOf("outer")?n["inner"+e]:n.document.documentElement["client"+e]:9===n.nodeType?(i=n.documentElement,Math.max(n.body["scroll"+e],i["scroll"+e],n.body["offset"+e],i["offset"+e],i["client"+e])):void 0===l?M.css(n,A,s):M.style(n,A,l,s)}),n,o?l:void 0,o)}}))})),M.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,n){M.fn[n]=function(e,A){return arguments.length>0?this.on(n,null,e,A):this.trigger(n)}})),M.fn.extend({hover:function(e,n){return this.mouseenter(e).mouseleave(n||e)}}),M.fn.extend({bind:function(e,n,A){return this.on(e,null,n,A)},unbind:function(e,n){return this.off(e,null,n)},delegate:function(e,n,A,t){return this.on(n,e,A,t)},undelegate:function(e,n,A){return 1===arguments.length?this.off(e,"**"):this.off(n,e||"**",A)}}),M.proxy=function(e,n){var A,t,l;if("string"==typeof n&&(A=e[n],n=e,e=A),I(e))return t=a.call(arguments,2),(l=function(){return e.apply(n||this,t.concat(a.call(arguments)))}).guid=e.guid=e.guid||M.guid++,l},M.holdReady=function(e){e?M.readyWait++:M.ready(!0)},M.isArray=Array.isArray,M.parseJSON=JSON.parse,M.nodeName=x,M.isFunction=I,M.isWindow=v,M.camelCase=z,M.type=b,M.now=Date.now,M.isNumeric=function(e){var n=M.type(e);return("number"===n||"string"===n)&&!isNaN(e-parseFloat(e))},void 0===(t=function(){return M}.apply(n,[]))||(e.exports=t);var Zn=A.jQuery,eA=A.$;return M.noConflict=function(e){return A.$===M&&(A.$=eA),e&&A.jQuery===M&&(A.jQuery=Zn),M},l||(A.jQuery=A.$=M),M}))},function(e,n,A){var t=A(2),l=A(7);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.i,l,""]]);var i={insert:"head",singleton:!1},o=(t(l,i),l.locals?l.locals:{});e.exports=o},function(e,n,A){},function(e,n,A){const t=A(9);t.keys().forEach(t)},function(e,n,A){var t={"./android-chrome-192x192.png":10,"./android-chrome-512x512.png":11,"./apple-touch-icon.png":12,"./browserconfig.xml":13,"./favicon-16x16.png":14,"./favicon-32x32.png":15,"./favicon.ico":16,"./mstile-150x150.png":17,"./safari-favicon.svg":18,"./safari-pinned-tab.svg":19};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id=9},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/android-chrome-192x192.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/android-chrome-512x512.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/apple-touch-icon.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/browserconfig.xml"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon-16x16.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon-32x32.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon.ico"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/mstile-150x150.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/safari-favicon.svg"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/safari-pinned-tab.svg"},function(e,n,A){var t=A(2),l=A(21);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.i,l,""]]);var i={insert:"head",singleton:!1},o=(t(l,i),l.locals?l.locals:{});e.exports=o},function(e,n,A){},function(e,n,A){"use strict";A.r(n);A(20);var t,l,i,o,s,a,C=A(1),r=A(0),c=A.n(r),u=(t="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",l="552d3bc042757a3fb9561a180d8d7b4dc34302fb",i=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",statementMap:{0:{start:{line:1,column:17},end:{line:6,column:1}},1:{start:{line:2,column:12},end:{line:2,column:28}},2:{start:{line:2,column:34},end:{line:2,column:125}},3:{start:{line:3,column:4},end:{line:4,column:150}},4:{start:{line:3,column:79},end:{line:3,column:131}},5:{start:{line:4,column:9},end:{line:4,column:150}},6:{start:{line:4,column:58},end:{line:4,column:150}},7:{start:{line:4,column:81},end:{line:4,column:150}},8:{start:{line:5,column:4},end:{line:5,column:66}},9:{start:{line:10,column:8},end:{line:10,column:58}},10:{start:{line:11,column:8},end:{line:11,column:25}},11:{start:{line:12,column:8},end:{line:12,column:25}},12:{start:{line:13,column:8},end:{line:13,column:52}},13:{start:{line:14,column:8},end:{line:14,column:64}},14:{start:{line:15,column:8},end:{line:15,column:58}},15:{start:{line:16,column:8},end:{line:16,column:62}},16:{start:{line:17,column:8},end:{line:17,column:62}},17:{start:{line:18,column:8},end:{line:18,column:26}},18:{start:{line:21,column:8},end:{line:23,column:11}},19:{start:{line:22,column:12},end:{line:22,column:65}},20:{start:{line:24,column:8},end:{line:26,column:11}},21:{start:{line:25,column:12},end:{line:25,column:65}},22:{start:{line:27,column:8},end:{line:27,column:56}},23:{start:{line:28,column:8},end:{line:30,column:9}},24:{start:{line:29,column:12},end:{line:29,column:57}},25:{start:{line:31,column:8},end:{line:33,column:9}},26:{start:{line:32,column:12},end:{line:32,column:51}},27:{start:{line:34,column:8},end:{line:36,column:9}},28:{start:{line:35,column:12},end:{line:35,column:55}},29:{start:{line:37,column:8},end:{line:39,column:9}},30:{start:{line:38,column:12},end:{line:38,column:55}},31:{start:{line:42,column:8},end:{line:42,column:27}},32:{start:{line:45,column:8},end:{line:45,column:27}},33:{start:{line:48,column:8},end:{line:48,column:25}},34:{start:{line:51,column:8},end:{line:51,column:37}},35:{start:{line:54,column:8},end:{line:54,column:31}},36:{start:{line:57,column:8},end:{line:57,column:35}},37:{start:{line:60,column:8},end:{line:60,column:35}},38:{start:{line:64,column:8},end:{line:64,column:29}},39:{start:{line:65,column:8},end:{line:65,column:57}},40:{start:{line:66,column:8},end:{line:66,column:42}},41:{start:{line:67,column:8},end:{line:67,column:70}},42:{start:{line:68,column:30},end:{line:68,column:102}},43:{start:{line:69,column:8},end:{line:70,column:53}},44:{start:{line:70,column:12},end:{line:70,column:53}},45:{start:{line:71,column:8},end:{line:71,column:34}},46:{start:{line:72,column:8},end:{line:72,column:33}},47:{start:{line:73,column:8},end:{line:73,column:31}},48:{start:{line:74,column:8},end:{line:74,column:41}},49:{start:{line:75,column:8},end:{line:75,column:35}},50:{start:{line:76,column:8},end:{line:76,column:39}},51:{start:{line:77,column:8},end:{line:77,column:39}},52:{start:{line:78,column:8},end:{line:78,column:26}},53:{start:{line:79,column:8},end:{line:79,column:32}},54:{start:{line:80,column:8},end:{line:80,column:28}},55:{start:{line:83,column:8},end:{line:83,column:96}},56:{start:{line:83,column:37},end:{line:83,column:94}},57:{start:{line:84,column:8},end:{line:84,column:96}},58:{start:{line:84,column:37},end:{line:84,column:94}},59:{start:{line:85,column:8},end:{line:85,column:68}},60:{start:{line:86,column:8},end:{line:86,column:95}},61:{start:{line:87,column:8},end:{line:87,column:83}},62:{start:{line:88,column:8},end:{line:88,column:97}},63:{start:{line:89,column:8},end:{line:89,column:97}},64:{start:{line:92,column:26},end:{line:92,column:77}},65:{start:{line:92,column:51},end:{line:92,column:76}},66:{start:{line:93,column:8},end:{line:93,column:41}},67:{start:{line:96,column:26},end:{line:96,column:77}},68:{start:{line:96,column:51},end:{line:96,column:76}},69:{start:{line:97,column:8},end:{line:97,column:41}},70:{start:{line:100,column:24},end:{line:100,column:53}},71:{start:{line:101,column:8},end:{line:101,column:37}},72:{start:{line:104,column:31},end:{line:104,column:68}},73:{start:{line:105,column:8},end:{line:105,column:51}},74:{start:{line:108,column:25},end:{line:108,column:56}},75:{start:{line:109,column:8},end:{line:114,column:9}},76:{start:{line:110,column:12},end:{line:110,column:36}},77:{start:{line:113,column:12},end:{line:113,column:49}},78:{start:{line:115,column:8},end:{line:115,column:39}},79:{start:{line:118,column:27},end:{line:118,column:62}},80:{start:{line:119,column:8},end:{line:119,column:42}},81:{start:{line:122,column:26},end:{line:122,column:61}},82:{start:{line:123,column:8},end:{line:123,column:40}},83:{start:{line:126,column:8},end:{line:142,column:11}},84:{start:{line:127,column:12},end:{line:132,column:13}},85:{start:{line:128,column:35},end:{line:128,column:44}},86:{start:{line:129,column:16},end:{line:131,column:19}},87:{start:{line:130,column:20},end:{line:130,column:56}},88:{start:{line:133,column:12},end:{line:138,column:13}},89:{start:{line:134,column:31},end:{line:134,column:61}},90:{start:{line:135,column:16},end:{line:137,column:19}},91:{start:{line:136,column:20},end:{line:136,column:56}},92:{start:{line:139,column:12},end:{line:141,column:13}},93:{start:{line:140,column:16},end:{line:140,column:57}},94:{start:{line:145,column:22},end:{line:145,column:49}},95:{start:{line:146,column:8},end:{line:146,column:50}},96:{start:{line:147,column:8},end:{line:147,column:36}},97:{start:{line:148,column:25},end:{line:148,column:56}},98:{start:{line:149,column:25},end:{line:149,column:56}},99:{start:{line:150,column:8},end:{line:150,column:53}},100:{start:{line:151,column:8},end:{line:151,column:53}},101:{start:{line:152,column:8},end:{line:152,column:33}},102:{start:{line:153,column:8},end:{line:153,column:33}},103:{start:{line:154,column:8},end:{line:154,column:60}},104:{start:{line:155,column:8},end:{line:155,column:43}},105:{start:{line:158,column:22},end:{line:158,column:49}},106:{start:{line:159,column:8},end:{line:159,column:50}},107:{start:{line:160,column:8},end:{line:160,column:35}},108:{start:{line:161,column:25},end:{line:161,column:56}},109:{start:{line:162,column:25},end:{line:162,column:56}},110:{start:{line:163,column:8},end:{line:163,column:83}},111:{start:{line:164,column:8},end:{line:164,column:83}},112:{start:{line:165,column:8},end:{line:165,column:33}},113:{start:{line:166,column:8},end:{line:166,column:33}},114:{start:{line:167,column:8},end:{line:167,column:50}},115:{start:{line:168,column:8},end:{line:168,column:45}},116:{start:{line:169,column:8},end:{line:173,column:9}},117:{start:{line:170,column:12},end:{line:170,column:69}},118:{start:{line:171,column:12},end:{line:171,column:69}},119:{start:{line:172,column:12},end:{line:172,column:47}},120:{start:{line:176,column:22},end:{line:176,column:49}},121:{start:{line:177,column:8},end:{line:177,column:50}},122:{start:{line:178,column:8},end:{line:178,column:33}},123:{start:{line:179,column:8},end:{line:179,column:54}},124:{start:{line:180,column:8},end:{line:180,column:34}},125:{start:{line:181,column:8},end:{line:181,column:51}},126:{start:{line:184,column:22},end:{line:184,column:49}},127:{start:{line:185,column:8},end:{line:185,column:50}},128:{start:{line:186,column:8},end:{line:186,column:37}},129:{start:{line:187,column:8},end:{line:187,column:66}},130:{start:{line:188,column:8},end:{line:188,column:48}},131:{start:{line:189,column:8},end:{line:189,column:63}},132:{start:{line:192,column:22},end:{line:192,column:49}},133:{start:{line:193,column:8},end:{line:193,column:50}},134:{start:{line:194,column:8},end:{line:194,column:34}},135:{start:{line:195,column:8},end:{line:195,column:60}},136:{start:{line:196,column:8},end:{line:196,column:42}},137:{start:{line:197,column:8},end:{line:197,column:57}},138:{start:{line:200,column:22},end:{line:200,column:49}},139:{start:{line:201,column:8},end:{line:201,column:50}},140:{start:{line:202,column:8},end:{line:202,column:40}},141:{start:{line:203,column:8},end:{line:203,column:64}},142:{start:{line:204,column:8},end:{line:204,column:46}},143:{start:{line:205,column:8},end:{line:205,column:61}},144:{start:{line:208,column:22},end:{line:208,column:49}},145:{start:{line:209,column:8},end:{line:209,column:50}},146:{start:{line:210,column:8},end:{line:210,column:39}},147:{start:{line:211,column:8},end:{line:211,column:64}},148:{start:{line:212,column:8},end:{line:212,column:46}},149:{start:{line:213,column:8},end:{line:213,column:61}},150:{start:{line:216,column:0},end:{line:218,column:55}},151:{start:{line:219,column:0},end:{line:221,column:55}},152:{start:{line:222,column:0},end:{line:224,column:53}},153:{start:{line:225,column:0},end:{line:227,column:60}},154:{start:{line:228,column:0},end:{line:230,column:54}},155:{start:{line:231,column:0},end:{line:233,column:64}},156:{start:{line:234,column:0},end:{line:236,column:64}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:1,column:46},end:{line:1,column:47}},loc:{start:{line:1,column:87},end:{line:6,column:1}},line:1},1:{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:24},end:{line:19,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:23},end:{line:40,column:5}},line:20},3:{name:"(anonymous_3)",decl:{start:{line:21,column:28},end:{line:21,column:29}},loc:{start:{line:21,column:46},end:{line:23,column:9}},line:21},4:{name:"(anonymous_4)",decl:{start:{line:24,column:28},end:{line:24,column:29}},loc:{start:{line:24,column:46},end:{line:26,column:9}},line:24},5:{name:"(anonymous_5)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:22},end:{line:43,column:5}},line:41},6:{name:"(anonymous_6)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:21},end:{line:46,column:5}},line:44},7:{name:"(anonymous_7)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:19},end:{line:49,column:5}},line:47},8:{name:"(anonymous_8)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:29},end:{line:52,column:5}},line:50},9:{name:"(anonymous_9)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:23},end:{line:55,column:5}},line:53},10:{name:"(anonymous_10)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:27},end:{line:58,column:5}},line:56},11:{name:"(anonymous_11)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:27},end:{line:61,column:5}},line:59},12:{name:"(anonymous_12)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:17},end:{line:81,column:5}},line:62},13:{name:"(anonymous_13)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:17},end:{line:90,column:5}},line:82},14:{name:"(anonymous_14)",decl:{start:{line:83,column:28},end:{line:83,column:29}},loc:{start:{line:83,column:37},end:{line:83,column:94}},line:83},15:{name:"(anonymous_15)",decl:{start:{line:84,column:28},end:{line:84,column:29}},loc:{start:{line:84,column:37},end:{line:84,column:94}},line:84},16:{name:"(anonymous_16)",decl:{start:{line:91,column:4},end:{line:91,column:5}},loc:{start:{line:91,column:25},end:{line:94,column:5}},line:91},17:{name:"(anonymous_17)",decl:{start:{line:92,column:42},end:{line:92,column:43}},loc:{start:{line:92,column:51},end:{line:92,column:76}},line:92},18:{name:"(anonymous_18)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:25},end:{line:98,column:5}},line:95},19:{name:"(anonymous_19)",decl:{start:{line:96,column:42},end:{line:96,column:43}},loc:{start:{line:96,column:51},end:{line:96,column:76}},line:96},20:{name:"(anonymous_20)",decl:{start:{line:99,column:4},end:{line:99,column:5}},loc:{start:{line:99,column:23},end:{line:102,column:5}},line:99},21:{name:"(anonymous_21)",decl:{start:{line:103,column:4},end:{line:103,column:5}},loc:{start:{line:103,column:30},end:{line:106,column:5}},line:103},22:{name:"(anonymous_22)",decl:{start:{line:107,column:4},end:{line:107,column:5}},loc:{start:{line:107,column:24},end:{line:116,column:5}},line:107},23:{name:"(anonymous_23)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:34},end:{line:120,column:5}},line:117},24:{name:"(anonymous_24)",decl:{start:{line:121,column:4},end:{line:121,column:5}},loc:{start:{line:121,column:34},end:{line:124,column:5}},line:121},25:{name:"(anonymous_25)",decl:{start:{line:125,column:4},end:{line:125,column:5}},loc:{start:{line:125,column:19},end:{line:143,column:5}},line:125},26:{name:"(anonymous_26)",decl:{start:{line:126,column:39},end:{line:126,column:40}},loc:{start:{line:126,column:54},end:{line:142,column:9}},line:126},27:{name:"(anonymous_27)",decl:{start:{line:129,column:36},end:{line:129,column:37}},loc:{start:{line:129,column:54},end:{line:131,column:17}},line:129},28:{name:"(anonymous_28)",decl:{start:{line:135,column:36},end:{line:135,column:37}},loc:{start:{line:135,column:54},end:{line:137,column:17}},line:135},29:{name:"(anonymous_29)",decl:{start:{line:144,column:4},end:{line:144,column:5}},loc:{start:{line:144,column:25},end:{line:156,column:5}},line:144},30:{name:"(anonymous_30)",decl:{start:{line:157,column:4},end:{line:157,column:5}},loc:{start:{line:157,column:24},end:{line:174,column:5}},line:157},31:{name:"(anonymous_31)",decl:{start:{line:175,column:4},end:{line:175,column:5}},loc:{start:{line:175,column:22},end:{line:182,column:5}},line:175},32:{name:"(anonymous_32)",decl:{start:{line:183,column:4},end:{line:183,column:5}},loc:{start:{line:183,column:32},end:{line:190,column:5}},line:183},33:{name:"(anonymous_33)",decl:{start:{line:191,column:4},end:{line:191,column:5}},loc:{start:{line:191,column:26},end:{line:198,column:5}},line:191},34:{name:"(anonymous_34)",decl:{start:{line:199,column:4},end:{line:199,column:5}},loc:{start:{line:199,column:30},end:{line:206,column:5}},line:199},35:{name:"(anonymous_35)",decl:{start:{line:207,column:4},end:{line:207,column:5}},loc:{start:{line:207,column:30},end:{line:214,column:5}},line:207}},branchMap:{0:{loc:{start:{line:1,column:17},end:{line:6,column:1}},type:"binary-expr",locations:[{start:{line:1,column:18},end:{line:1,column:22}},{start:{line:1,column:26},end:{line:1,column:41}},{start:{line:1,column:46},end:{line:6,column:1}}],line:1},1:{loc:{start:{line:2,column:34},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:42},end:{line:2,column:48}},{start:{line:2,column:51},end:{line:2,column:125}}],line:2},2:{loc:{start:{line:2,column:51},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:67},end:{line:2,column:118}},{start:{line:2,column:121},end:{line:2,column:125}}],line:2},3:{loc:{start:{line:3,column:4},end:{line:4,column:150}},type:"if",locations:[{start:{line:3,column:4},end:{line:4,column:150}},{start:{line:3,column:4},end:{line:4,column:150}}],line:3},4:{loc:{start:{line:3,column:8},end:{line:3,column:77}},type:"binary-expr",locations:[{start:{line:3,column:8},end:{line:3,column:35}},{start:{line:3,column:39},end:{line:3,column:77}}],line:3},5:{loc:{start:{line:4,column:58},end:{line:4,column:150}},type:"if",locations:[{start:{line:4,column:58},end:{line:4,column:150}},{start:{line:4,column:58},end:{line:4,column:150}}],line:4},6:{loc:{start:{line:4,column:85},end:{line:4,column:149}},type:"binary-expr",locations:[{start:{line:4,column:86},end:{line:4,column:143}},{start:{line:4,column:148},end:{line:4,column:149}}],line:4},7:{loc:{start:{line:4,column:86},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:94},end:{line:4,column:98}},{start:{line:4,column:101},end:{line:4,column:143}}],line:4},8:{loc:{start:{line:4,column:101},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:109},end:{line:4,column:126}},{start:{line:4,column:129},end:{line:4,column:143}}],line:4},9:{loc:{start:{line:5,column:11},end:{line:5,column:62}},type:"binary-expr",locations:[{start:{line:5,column:11},end:{line:5,column:16}},{start:{line:5,column:20},end:{line:5,column:21}},{start:{line:5,column:25},end:{line:5,column:62}}],line:5},10:{loc:{start:{line:28,column:8},end:{line:30,column:9}},type:"if",locations:[{start:{line:28,column:8},end:{line:30,column:9}},{start:{line:28,column:8},end:{line:30,column:9}}],line:28},11:{loc:{start:{line:31,column:8},end:{line:33,column:9}},type:"if",locations:[{start:{line:31,column:8},end:{line:33,column:9}},{start:{line:31,column:8},end:{line:33,column:9}}],line:31},12:{loc:{start:{line:34,column:8},end:{line:36,column:9}},type:"if",locations:[{start:{line:34,column:8},end:{line:36,column:9}},{start:{line:34,column:8},end:{line:36,column:9}}],line:34},13:{loc:{start:{line:37,column:8},end:{line:39,column:9}},type:"if",locations:[{start:{line:37,column:8},end:{line:39,column:9}},{start:{line:37,column:8},end:{line:39,column:9}}],line:37},14:{loc:{start:{line:68,column:30},end:{line:68,column:102}},type:"cond-expr",locations:[{start:{line:68,column:77},end:{line:68,column:83}},{start:{line:68,column:86},end:{line:68,column:102}}],line:68},15:{loc:{start:{line:68,column:30},end:{line:68,column:74}},type:"binary-expr",locations:[{start:{line:68,column:30},end:{line:68,column:57}},{start:{line:68,column:61},end:{line:68,column:74}}],line:68},16:{loc:{start:{line:69,column:8},end:{line:70,column:53}},type:"if",locations:[{start:{line:69,column:8},end:{line:70,column:53}},{start:{line:69,column:8},end:{line:70,column:53}}],line:69},17:{loc:{start:{line:109,column:8},end:{line:114,column:9}},type:"if",locations:[{start:{line:109,column:8},end:{line:114,column:9}},{start:{line:109,column:8},end:{line:114,column:9}}],line:109},18:{loc:{start:{line:127,column:12},end:{line:132,column:13}},type:"if",locations:[{start:{line:127,column:12},end:{line:132,column:13}},{start:{line:127,column:12},end:{line:132,column:13}}],line:127},19:{loc:{start:{line:133,column:12},end:{line:138,column:13}},type:"if",locations:[{start:{line:133,column:12},end:{line:138,column:13}},{start:{line:133,column:12},end:{line:138,column:13}}],line:133},20:{loc:{start:{line:133,column:16},end:{line:133,column:74}},type:"binary-expr",locations:[{start:{line:133,column:16},end:{line:133,column:43}},{start:{line:133,column:47},end:{line:133,column:74}}],line:133},21:{loc:{start:{line:139,column:12},end:{line:141,column:13}},type:"if",locations:[{start:{line:139,column:12},end:{line:141,column:13}},{start:{line:139,column:12},end:{line:141,column:13}}],line:139},22:{loc:{start:{line:169,column:8},end:{line:173,column:9}},type:"if",locations:[{start:{line:169,column:8},end:{line:173,column:9}},{start:{line:169,column:8},end:{line:173,column:9}}],line:169}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0,141:0,142:0,143:0,144:0,145:0,146:0,147:0,148:0,149:0,150:0,151:0,152:0,153:0,154:0,155:0,156:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts"],names:[],mappings:"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",sourcesContent:["import bind from 'bind-decorator';\nimport Facade from '../../presenter/Facade';\nimport { sliderOptions } from '../../model/sliderOptions';\n\nexport default class ControlPanel {\n  private slider!: Facade;\n\n  private parent!: Node | null;\n\n  private controlPanel = document.createElement('div');\n\n  private minMax: HTMLInputElement[] = [];\n\n  private values: HTMLInputElement[] = [];\n\n  private step = document.createElement('input');\n\n  private orientationCheck = document.createElement('input');\n\n  private rangeCheck = document.createElement('input');\n\n  private showLabelCheck = document.createElement('input');\n\n  private showScaleCheck = document.createElement('input');\n\n  private hasRange!: boolean;\n\n  constructor(slider: Facade) {\n    this.init(slider);\n  }\n\n  public getSliderOptions(): void {\n    this.minMax.forEach((input, index) => {\n      input.value = String(this.slider.getMinMax()[index]);\n    });\n    this.values.forEach((input, index) => {\n      input.value = String(this.slider.getValues()[index]);\n    });\n    this.step.value = String(this.slider.getStep());\n    if (this.slider.getOrientation()) {\n      this.getOrientationCheckbox().checked = true;\n    }\n    if (this.slider.getRange()) {\n      this.getRangeCheckbox().checked = true;\n    }\n    if (this.slider.getLabels()) {\n      this.getShowLabelCheckbox().checked = true;\n    }\n    if (this.slider.getScale()) {\n      this.getShowScaleCheckbox().checked = true;\n    }\n  }\n\n  public getMinMaxInputs(): HTMLInputElement[] {\n    return this.minMax;\n  }\n\n  public getValueInputs(): HTMLInputElement[] {\n    return this.values;\n  }\n\n  public getStepInput(): HTMLInputElement {\n    return this.step;\n  }\n\n  public getOrientationCheckbox(): HTMLInputElement {\n    return this.orientationCheck;\n  }\n\n  public getRangeCheckbox(): HTMLInputElement {\n    return this.rangeCheck;\n  }\n\n  public getShowLabelCheckbox(): HTMLInputElement {\n    return this.showLabelCheck;\n  }\n\n  public getShowScaleCheckbox(): HTMLInputElement {\n    return this.showScaleCheck;\n  }\n\n  private init(slider: Facade): void {\n    this.slider = slider;\n    this.parent = this.slider.getParent().parentNode;\n    this.hasRange = slider.getRange();\n    this.controlPanel.classList.add('demo-slider__control-panel');\n    const parentElement = this.parent?.parentElement;\n    if (parentElement) parentElement.prepend(this.controlPanel);\n    this.createMaxMinInputs();\n    this.createValueInputs();\n    this.createStepInput();\n    this.createOrientationCheckbox();\n    this.createRangeCheckbox();\n    this.createShowLabelCheckbox();\n    this.createShowScaleCheckbox();\n    this.bindEvents();\n    this.getSliderOptions();\n    this.updateValues();\n  }\n\n  private bindEvents(): void {\n    this.minMax.forEach(input => input.addEventListener('change', this.handleMinMaxChange));\n    this.values.forEach(input => input.addEventListener('change', this.handleValuesChange));\n    this.step.addEventListener('change', this.handleStepChange);\n    this.getOrientationCheckbox().addEventListener('change', this.handleOrientationChange);\n    this.getRangeCheckbox().addEventListener('change', this.handleRangeChange);\n    this.getShowLabelCheckbox().addEventListener('change', this.handleLabelVisibilityChange);\n    this.getShowScaleCheckbox().addEventListener('change', this.handleScaleVisibilityChange);\n  }\n\n  @bind\n  private handleMinMaxChange(): void {\n    const newMinMax = this.minMax.map(input => parseInt(input.value, 10));\n    this.slider.setMinMax(newMinMax);\n  }\n\n  @bind\n  private handleValuesChange(): void {\n    const newValues = this.values.map(input => parseInt(input.value, 10));\n    this.slider.setValues(newValues);\n  }\n\n  @bind\n  private handleStepChange(): void {\n    const newStep = parseInt(this.step.value, 10);\n    this.slider.setStep(newStep);\n  }\n\n  @bind\n  private handleOrientationChange(): void {\n    const newOrientation = this.getOrientationCheckbox().checked;\n    this.slider.setOrientation(newOrientation);\n  }\n\n  @bind\n  private handleRangeChange(): void {\n    const newRange = this.getRangeCheckbox().checked;\n    if (!newRange) {\n      this.values[1].remove();\n    } else {\n      this.values[0].after(this.values[1]);\n    }\n    this.slider.setRange(newRange);\n  }\n\n  @bind\n  private handleLabelVisibilityChange(): void {\n    const showLabels = this.getShowLabelCheckbox().checked;\n    this.slider.setLabels(showLabels);\n  }\n\n  @bind\n  private handleScaleVisibilityChange(): void {\n    const showScale = this.getShowScaleCheckbox().checked;\n    this.slider.setScale(showScale);\n  }\n\n  private updateValues(): void {\n    this.slider.observer.subscribe((valueData: sliderOptions) => {\n      if (valueData.values) {\n        const { values } = valueData;\n        this.values.forEach((input, index) => {\n          input.value = String(values[index]);\n        });\n      }\n      if (valueData.min !== undefined && valueData.max !== undefined) {\n        const minMax = [valueData.min, valueData.max];\n        this.minMax.forEach((input, index) => {\n          input.value = String(minMax[index]);\n        });\n      }\n      if (valueData.step !== undefined) {\n        this.step.value = String(valueData.step);\n      }\n    });\n  }\n\n  private createMaxMinInputs(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Min/Max';\n    const inputMin = document.createElement('input');\n    const inputMax = document.createElement('input');\n    inputMin.classList.add('demo-slider__input');\n    inputMax.classList.add('demo-slider__input');\n    inputMin.type = 'number';\n    inputMax.type = 'number';\n    this.controlPanel.append(title, inputMin, inputMax);\n    this.minMax = [inputMin, inputMax];\n  }\n\n  private createValueInputs(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Values';\n    const inputMin = document.createElement('input');\n    const inputMax = document.createElement('input');\n    inputMin.classList.add('demo-slider__input', 'demo-slider__handler-value');\n    inputMax.classList.add('demo-slider__input', 'demo-slider__handler-value');\n    inputMin.type = 'number';\n    inputMax.type = 'number';\n    this.controlPanel.append(title, inputMin);\n    this.values.push(inputMin, inputMax);\n    if (this.hasRange === true) {\n      inputMin.classList.add('demo-slider__handler-value_min');\n      inputMax.classList.add('demo-slider__handler-value_max');\n      this.controlPanel.append(inputMax);\n    }\n  }\n\n  private createStepInput(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Step';\n    this.step.classList.add('demo-slider__input');\n    this.step.type = 'number';\n    this.controlPanel.append(title, this.step);\n  }\n\n  private createOrientationCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Vertical';\n    this.orientationCheck.classList.add('demo-slider__input');\n    this.orientationCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.orientationCheck);\n  }\n\n  private createRangeCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Range';\n    this.rangeCheck.classList.add('demo-slider__input');\n    this.rangeCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.rangeCheck);\n  }\n\n  private createShowLabelCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Show labels';\n    this.showLabelCheck.classList.add('demo-slider__input');\n    this.showLabelCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.showLabelCheck);\n  }\n\n  private createShowScaleCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Show scale';\n    this.showScaleCheck.classList.add('demo-slider__input');\n    this.showScaleCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.showScaleCheck);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[o="__coverage__"]||(i[o]={}))[t]&&a[t].hash===l?a[t]:(s.hash=l,a[t]=s)),d=(u.s[0]++,void u.b[0][0]++&&(u.b[0][1]++,(void 0).__decorate)||(u.b[0][2]++,function(e,n,A,t){u.f[0]++;var l,i=(u.s[1]++,arguments.length),o=(u.s[2]++,i<3?(u.b[1][0]++,n):(u.b[1][1]++,null===t?(u.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(u.b[2][1]++,t)));if(u.s[3]++,u.b[4][0]++,"object"==typeof Reflect&&(u.b[4][1]++,"function"==typeof Reflect.decorate))u.b[3][0]++,u.s[4]++,o=Reflect.decorate(e,n,A,t);else{u.b[3][1]++,u.s[5]++;for(var s=e.length-1;s>=0;s--)u.s[6]++,(l=e[s])?(u.b[5][0]++,u.s[7]++,u.b[6][0]++,o=(i<3?(u.b[7][0]++,l(o)):(u.b[7][1]++,i>3?(u.b[8][0]++,l(n,A,o)):(u.b[8][1]++,l(n,A))))||(u.b[6][1]++,o)):u.b[5][1]++}return u.s[8]++,u.b[9][0]++,i>3&&(u.b[9][1]++,o)&&(u.b[9][2]++,Object.defineProperty(n,A,o)),o}));class m{constructor(e){u.f[1]++,u.s[9]++,this.controlPanel=document.createElement("div"),u.s[10]++,this.minMax=[],u.s[11]++,this.values=[],u.s[12]++,this.step=document.createElement("input"),u.s[13]++,this.orientationCheck=document.createElement("input"),u.s[14]++,this.rangeCheck=document.createElement("input"),u.s[15]++,this.showLabelCheck=document.createElement("input"),u.s[16]++,this.showScaleCheck=document.createElement("input"),u.s[17]++,this.init(e)}getSliderOptions(){u.f[2]++,u.s[18]++,this.minMax.forEach((e,n)=>{u.f[3]++,u.s[19]++,e.value=String(this.slider.getMinMax()[n])}),u.s[20]++,this.values.forEach((e,n)=>{u.f[4]++,u.s[21]++,e.value=String(this.slider.getValues()[n])}),u.s[22]++,this.step.value=String(this.slider.getStep()),u.s[23]++,this.slider.getOrientation()?(u.b[10][0]++,u.s[24]++,this.getOrientationCheckbox().checked=!0):u.b[10][1]++,u.s[25]++,this.slider.getRange()?(u.b[11][0]++,u.s[26]++,this.getRangeCheckbox().checked=!0):u.b[11][1]++,u.s[27]++,this.slider.getLabels()?(u.b[12][0]++,u.s[28]++,this.getShowLabelCheckbox().checked=!0):u.b[12][1]++,u.s[29]++,this.slider.getScale()?(u.b[13][0]++,u.s[30]++,this.getShowScaleCheckbox().checked=!0):u.b[13][1]++}getMinMaxInputs(){return u.f[5]++,u.s[31]++,this.minMax}getValueInputs(){return u.f[6]++,u.s[32]++,this.values}getStepInput(){return u.f[7]++,u.s[33]++,this.step}getOrientationCheckbox(){return u.f[8]++,u.s[34]++,this.orientationCheck}getRangeCheckbox(){return u.f[9]++,u.s[35]++,this.rangeCheck}getShowLabelCheckbox(){return u.f[10]++,u.s[36]++,this.showLabelCheck}getShowScaleCheckbox(){return u.f[11]++,u.s[37]++,this.showScaleCheck}init(e){var n;u.f[12]++,u.s[38]++,this.slider=e,u.s[39]++,this.parent=this.slider.getParent().parentNode,u.s[40]++,this.hasRange=e.getRange(),u.s[41]++,this.controlPanel.classList.add("demo-slider__control-panel");const A=(u.s[42]++,u.b[15][0]++,null===(n=this.parent)||(u.b[15][1]++,void 0===n)?void u.b[14][0]++:(u.b[14][1]++,n.parentElement));u.s[43]++,A?(u.b[16][0]++,u.s[44]++,A.prepend(this.controlPanel)):u.b[16][1]++,u.s[45]++,this.createMaxMinInputs(),u.s[46]++,this.createValueInputs(),u.s[47]++,this.createStepInput(),u.s[48]++,this.createOrientationCheckbox(),u.s[49]++,this.createRangeCheckbox(),u.s[50]++,this.createShowLabelCheckbox(),u.s[51]++,this.createShowScaleCheckbox(),u.s[52]++,this.bindEvents(),u.s[53]++,this.getSliderOptions(),u.s[54]++,this.updateValues()}bindEvents(){u.f[13]++,u.s[55]++,this.minMax.forEach(e=>(u.f[14]++,u.s[56]++,e.addEventListener("change",this.handleMinMaxChange))),u.s[57]++,this.values.forEach(e=>(u.f[15]++,u.s[58]++,e.addEventListener("change",this.handleValuesChange))),u.s[59]++,this.step.addEventListener("change",this.handleStepChange),u.s[60]++,this.getOrientationCheckbox().addEventListener("change",this.handleOrientationChange),u.s[61]++,this.getRangeCheckbox().addEventListener("change",this.handleRangeChange),u.s[62]++,this.getShowLabelCheckbox().addEventListener("change",this.handleLabelVisibilityChange),u.s[63]++,this.getShowScaleCheckbox().addEventListener("change",this.handleScaleVisibilityChange)}handleMinMaxChange(){u.f[16]++;const e=(u.s[64]++,this.minMax.map(e=>(u.f[17]++,u.s[65]++,parseInt(e.value,10))));u.s[66]++,this.slider.setMinMax(e)}handleValuesChange(){u.f[18]++;const e=(u.s[67]++,this.values.map(e=>(u.f[19]++,u.s[68]++,parseInt(e.value,10))));u.s[69]++,this.slider.setValues(e)}handleStepChange(){u.f[20]++;const e=(u.s[70]++,parseInt(this.step.value,10));u.s[71]++,this.slider.setStep(e)}handleOrientationChange(){u.f[21]++;const e=(u.s[72]++,this.getOrientationCheckbox().checked);u.s[73]++,this.slider.setOrientation(e)}handleRangeChange(){u.f[22]++;const e=(u.s[74]++,this.getRangeCheckbox().checked);u.s[75]++,e?(u.b[17][1]++,u.s[77]++,this.values[0].after(this.values[1])):(u.b[17][0]++,u.s[76]++,this.values[1].remove()),u.s[78]++,this.slider.setRange(e)}handleLabelVisibilityChange(){u.f[23]++;const e=(u.s[79]++,this.getShowLabelCheckbox().checked);u.s[80]++,this.slider.setLabels(e)}handleScaleVisibilityChange(){u.f[24]++;const e=(u.s[81]++,this.getShowScaleCheckbox().checked);u.s[82]++,this.slider.setScale(e)}updateValues(){u.f[25]++,u.s[83]++,this.slider.observer.subscribe(e=>{if(u.f[26]++,u.s[84]++,e.values){u.b[18][0]++;const{values:n}=(u.s[85]++,e);u.s[86]++,this.values.forEach((e,A)=>{u.f[27]++,u.s[87]++,e.value=String(n[A])})}else u.b[18][1]++;if(u.s[88]++,u.b[20][0]++,void 0!==e.min&&(u.b[20][1]++,void 0!==e.max)){u.b[19][0]++;const n=(u.s[89]++,[e.min,e.max]);u.s[90]++,this.minMax.forEach((e,A)=>{u.f[28]++,u.s[91]++,e.value=String(n[A])})}else u.b[19][1]++;u.s[92]++,void 0!==e.step?(u.b[21][0]++,u.s[93]++,this.step.value=String(e.step)):u.b[21][1]++})}createMaxMinInputs(){u.f[29]++;const e=(u.s[94]++,document.createElement("p"));u.s[95]++,e.classList.add("demo-slider__title"),u.s[96]++,e.innerText="Min/Max";const n=(u.s[97]++,document.createElement("input")),A=(u.s[98]++,document.createElement("input"));u.s[99]++,n.classList.add("demo-slider__input"),u.s[100]++,A.classList.add("demo-slider__input"),u.s[101]++,n.type="number",u.s[102]++,A.type="number",u.s[103]++,this.controlPanel.append(e,n,A),u.s[104]++,this.minMax=[n,A]}createValueInputs(){u.f[30]++;const e=(u.s[105]++,document.createElement("p"));u.s[106]++,e.classList.add("demo-slider__title"),u.s[107]++,e.innerText="Values";const n=(u.s[108]++,document.createElement("input")),A=(u.s[109]++,document.createElement("input"));u.s[110]++,n.classList.add("demo-slider__input","demo-slider__handler-value"),u.s[111]++,A.classList.add("demo-slider__input","demo-slider__handler-value"),u.s[112]++,n.type="number",u.s[113]++,A.type="number",u.s[114]++,this.controlPanel.append(e,n),u.s[115]++,this.values.push(n,A),u.s[116]++,!0===this.hasRange?(u.b[22][0]++,u.s[117]++,n.classList.add("demo-slider__handler-value_min"),u.s[118]++,A.classList.add("demo-slider__handler-value_max"),u.s[119]++,this.controlPanel.append(A)):u.b[22][1]++}createStepInput(){u.f[31]++;const e=(u.s[120]++,document.createElement("p"));u.s[121]++,e.classList.add("demo-slider__title"),u.s[122]++,e.innerText="Step",u.s[123]++,this.step.classList.add("demo-slider__input"),u.s[124]++,this.step.type="number",u.s[125]++,this.controlPanel.append(e,this.step)}createOrientationCheckbox(){u.f[32]++;const e=(u.s[126]++,document.createElement("p"));u.s[127]++,e.classList.add("demo-slider__title"),u.s[128]++,e.innerText="Vertical",u.s[129]++,this.orientationCheck.classList.add("demo-slider__input"),u.s[130]++,this.orientationCheck.type="checkbox",u.s[131]++,this.controlPanel.append(e,this.orientationCheck)}createRangeCheckbox(){u.f[33]++;const e=(u.s[132]++,document.createElement("p"));u.s[133]++,e.classList.add("demo-slider__title"),u.s[134]++,e.innerText="Range",u.s[135]++,this.rangeCheck.classList.add("demo-slider__input"),u.s[136]++,this.rangeCheck.type="checkbox",u.s[137]++,this.controlPanel.append(e,this.rangeCheck)}createShowLabelCheckbox(){u.f[34]++;const e=(u.s[138]++,document.createElement("p"));u.s[139]++,e.classList.add("demo-slider__title"),u.s[140]++,e.innerText="Show labels",u.s[141]++,this.showLabelCheck.classList.add("demo-slider__input"),u.s[142]++,this.showLabelCheck.type="checkbox",u.s[143]++,this.controlPanel.append(e,this.showLabelCheck)}createShowScaleCheckbox(){u.f[35]++;const e=(u.s[144]++,document.createElement("p"));u.s[145]++,e.classList.add("demo-slider__title"),u.s[146]++,e.innerText="Show scale",u.s[147]++,this.showScaleCheck.classList.add("demo-slider__input"),u.s[148]++,this.showScaleCheck.type="checkbox",u.s[149]++,this.controlPanel.append(e,this.showScaleCheck)}}u.s[150]++,d([c.a],m.prototype,"handleMinMaxChange",null),u.s[151]++,d([c.a],m.prototype,"handleValuesChange",null),u.s[152]++,d([c.a],m.prototype,"handleStepChange",null),u.s[153]++,d([c.a],m.prototype,"handleOrientationChange",null),u.s[154]++,d([c.a],m.prototype,"handleRangeChange",null),u.s[155]++,d([c.a],m.prototype,"handleLabelVisibilityChange",null),u.s[156]++,d([c.a],m.prototype,"handleScaleVisibilityChange",null);var h=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",n="e012f8545b10017807f7fd6fa2d364a37b653f77",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",statementMap:{0:{start:{line:5,column:8},end:{line:5,column:52}},1:{start:{line:6,column:8},end:{line:6,column:59}},2:{start:{line:7,column:8},end:{line:7,column:56}},3:{start:{line:8,column:8},end:{line:8,column:27}},4:{start:{line:11,column:8},end:{line:11,column:31}},5:{start:{line:12,column:8},end:{line:12,column:44}},6:{start:{line:13,column:8},end:{line:13,column:64}},7:{start:{line:14,column:8},end:{line:14,column:53}},8:{start:{line:15,column:8},end:{line:15,column:47}},9:{start:{line:16,column:8},end:{line:16,column:51}},10:{start:{line:17,column:8},end:{line:17,column:47}},11:{start:{line:18,column:23},end:{line:18,column:60}},12:{start:{line:19,column:22},end:{line:19,column:46}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:4},end:{line:4,column:5}},loc:{start:{line:4,column:25},end:{line:9,column:5}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:18},end:{line:20,column:5}},line:10}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts"],names:[],mappings:"AACA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,YAAY,MAAM,6BAA6B,CAAC;AAEvD,MAAM,CAAC,OAAO,OAAO,UAAU;IAS7B,YAAY,OAAsB;QAN1B,WAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEvC,kBAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE9C,eAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAGjD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAEO,IAAI,CAAC,OAAsB;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC7C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,KAAK,GAAiB,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;CACF",sourcesContent:["import { sliderOptions } from '../model/sliderOptions';\nimport Facade from '../presenter/Facade';\nimport ControlPanel from './ControlPanel/ControlPanel';\n\nexport default class SliderInit {\n  private options!: sliderOptions;\n\n  private slider = document.createElement('div');\n\n  private sliderWrapper = document.createElement('div');\n\n  private demoSlider = document.createElement('div');\n\n  constructor(options: sliderOptions) {\n    this.init(options);\n  }\n\n  private init(options: sliderOptions) {\n    this.options = options;\n    this.slider.classList.add('slider');\n    this.sliderWrapper.classList.add('demo-slider__slider');\n    this.demoSlider.classList.add('demo-slider');\n    document.body.prepend(this.demoSlider);\n    this.demoSlider.append(this.sliderWrapper);\n    this.sliderWrapper.append(this.slider);\n    const facade: Facade = new Facade(this.slider, this.options);\n    const panel: ControlPanel = new ControlPanel(facade);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class p{constructor(e){h.f[0]++,h.s[0]++,this.slider=document.createElement("div"),h.s[1]++,this.sliderWrapper=document.createElement("div"),h.s[2]++,this.demoSlider=document.createElement("div"),h.s[3]++,this.init(e)}init(e){h.f[1]++,h.s[4]++,this.options=e,h.s[5]++,this.slider.classList.add("slider"),h.s[6]++,this.sliderWrapper.classList.add("demo-slider__slider"),h.s[7]++,this.demoSlider.classList.add("demo-slider"),h.s[8]++,document.body.prepend(this.demoSlider),h.s[9]++,this.demoSlider.append(this.sliderWrapper),h.s[10]++,this.sliderWrapper.append(this.slider);const n=(h.s[11]++,new C.a(this.slider,this.options));h.s[12]++,new m(n)}}var f=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",n="5fc25e9d594c33414acfe1e3bb2bbb16ef902335",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",statementMap:{0:{start:{line:3,column:29},end:{line:27,column:1}},1:{start:{line:28,column:0},end:{line:28,column:89}},2:{start:{line:28,column:52},end:{line:28,column:87}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:28,column:29},end:{line:28,column:30}},loc:{start:{line:28,column:52},end:{line:28,column:87}},line:28}},branchMap:{},s:{0:0,1:0,2:0},f:{0:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts"],names:[],mappings:"AAAA,OAAO,aAAa,CAAC;AACrB,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,MAAM,oBAAoB,GAAG;IAC3B;QACE,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,EAAE;QACP,IAAI,EAAE,EAAE;QACR,MAAM,EAAE,CAAC,EAAE,CAAC;QACZ,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,KAAK;KAClB;IACD;QACE,GAAG,EAAE,GAAG;QACR,UAAU,EAAE,IAAI;KACjB;IACD;QACE,GAAG,EAAE,GAAG;KACT;IACD;QACE,GAAG,EAAE,CAAC,EAAE;QACR,IAAI,EAAE,EAAE;QACR,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAChB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;KACf;CACF,CAAC;AAEF,oBAAoB,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC",sourcesContent:["import './demo.scss';\nimport SliderInit from './SliderInit';\n\nconst sliderConfigurations = [\n  {\n    max: 100,\n    min: 10,\n    step: 10,\n    values: [30],\n    hasLabels: true,\n    hasRange: false,\n    isVertical: false,\n  },\n  {\n    max: 200,\n    isVertical: true,\n  },\n  {\n    max: 200,\n  },\n  {\n    max: -50,\n    step: 15,\n    values: [63, 64],\n    hasRange: true,\n    hasScale: true,\n  },\n];\n\nsliderConfigurations.forEach(sliderConfiguration => new SliderInit(sliderConfiguration));\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();const I=(f.s[0]++,[{max:100,min:10,step:10,values:[30],hasLabels:!0,hasRange:!1,isVertical:!1},{max:200,isVertical:!0},{max:200},{max:-50,step:15,values:[63,64],hasRange:!0,hasScale:!0}]);f.s[1]++,I.forEach(e=>(f.f[0]++,f.s[2]++,new p(e)))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,