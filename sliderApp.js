!function(e){var n={};function A(t){if(n[t])return n[t].exports;var i=n[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,A),i.l=!0,i.exports}A.m=e,A.c=n,A.d=function(e,n,t){A.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},A.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},A.t=function(e,n){if(1&n&&(e=A(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(A.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)A.d(t,i,function(n){return e[n]}.bind(null,i));return t},A.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return A.d(n,"a",n),n},A.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},A.p="",A(A.s=2)}([function(e,n,A){"use strict";var t,i,l,o,s,a,r=(t="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",i="4c2e5eba5bed3e9fc30f3b858e0c57e1b40b7318",l=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:28}},1:{start:{line:6,column:8},end:{line:6,column:32}},2:{start:{line:9,column:8},end:{line:9,column:82}},3:{start:{line:9,column:63},end:{line:9,column:80}},4:{start:{line:12,column:8},end:{line:12,column:65}},5:{start:{line:12,column:47},end:{line:12,column:63}},6:{start:{line:15,column:8},end:{line:15,column:30}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:18},end:{line:4,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:18},end:{line:7,column:5}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:20},end:{line:10,column:5}},line:8},3:{name:"(anonymous_3)",decl:{start:{line:9,column:47},end:{line:9,column:48}},loc:{start:{line:9,column:63},end:{line:9,column:80}},line:9},4:{name:"(anonymous_4)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:20},end:{line:13,column:5}},line:11},5:{name:"(anonymous_5)",decl:{start:{line:12,column:31},end:{line:12,column:32}},loc:{start:{line:12,column:47},end:{line:12,column:63}},line:12},6:{name:"(anonymous_6)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:21},end:{line:16,column:5}},line:14}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts"],names:[],mappings:"AAAA,MAAM,CAAC,OAAO,OAAO,aAAa;IAGhC;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,SAAS,CAAC,EAAY;QACpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,WAAW,CAAC,EAAY;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED,SAAS,CAAC,IAAY;QACpB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;CACF",sourcesContent:["export default class EventObserver {\n  private observers: Function[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  subscribe(fn: Function): void {\n    this.observers.push(fn);\n  }\n\n  unsubscribe(fn: Function): void {\n    this.observers = this.observers.filter((subscriber) => subscriber !== fn);\n  }\n\n  broadcast(data: object): void {\n    this.observers.forEach((subscriber) => subscriber(data));\n  }\n\n  getSubscribers(): Function[] {\n    return this.observers;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=l[o="__coverage__"]||(l[o]={}))[t]&&a[t].hash===i?a[t]:(s.hash=i,a[t]=s));class C{constructor(){r.f[0]++,r.s[0]++,this.observers=[]}subscribe(e){r.f[1]++,r.s[1]++,this.observers.push(e)}unsubscribe(e){r.f[2]++,r.s[2]++,this.observers=this.observers.filter(n=>(r.f[3]++,r.s[3]++,n!==e))}broadcast(e){r.f[4]++,r.s[4]++,this.observers.forEach(n=>(r.f[5]++,r.s[5]++,n(e)))}getSubscribers(){return r.f[6]++,r.s[6]++,this.observers}}var c=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",n="378c480edab59575d09db23672312aa82f908551",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:44}},1:{start:{line:5,column:8},end:{line:13,column:10}},2:{start:{line:14,column:8},end:{line:14,column:27}},3:{start:{line:17,column:8},end:{line:18,column:39}},4:{start:{line:18,column:12},end:{line:18,column:39}},5:{start:{line:19,column:8},end:{line:20,column:39}},6:{start:{line:20,column:12},end:{line:20,column:39}},7:{start:{line:21,column:8},end:{line:22,column:45}},8:{start:{line:22,column:12},end:{line:22,column:45}},9:{start:{line:23,column:8},end:{line:24,column:54}},10:{start:{line:24,column:12},end:{line:24,column:54}},11:{start:{line:25,column:8},end:{line:26,column:41}},12:{start:{line:26,column:12},end:{line:26,column:41}},13:{start:{line:27,column:8},end:{line:28,column:46}},14:{start:{line:28,column:12},end:{line:28,column:46}},15:{start:{line:29,column:8},end:{line:30,column:48}},16:{start:{line:30,column:12},end:{line:30,column:48}},17:{start:{line:33,column:8},end:{line:35,column:9}},18:{start:{line:34,column:12},end:{line:34,column:36}},19:{start:{line:36,column:8},end:{line:36,column:32}},20:{start:{line:39,column:8},end:{line:39,column:31}},21:{start:{line:40,column:8},end:{line:45,column:11}},22:{start:{line:48,column:8},end:{line:50,column:9}},23:{start:{line:49,column:12},end:{line:49,column:36}},24:{start:{line:51,column:8},end:{line:53,column:9}},25:{start:{line:52,column:12},end:{line:52,column:56}},26:{start:{line:54,column:8},end:{line:54,column:32}},27:{start:{line:57,column:8},end:{line:57,column:31}},28:{start:{line:58,column:8},end:{line:63,column:11}},29:{start:{line:66,column:8},end:{line:66,column:63}},30:{start:{line:67,column:8},end:{line:67,column:33}},31:{start:{line:70,column:8},end:{line:70,column:50}},32:{start:{line:71,column:8},end:{line:74,column:11}},33:{start:{line:77,column:8},end:{line:77,column:90}},34:{start:{line:77,column:65},end:{line:77,column:88}},35:{start:{line:78,column:8},end:{line:78,column:34}},36:{start:{line:79,column:8},end:{line:79,column:28}},37:{start:{line:80,column:8},end:{line:80,column:35}},38:{start:{line:83,column:8},end:{line:87,column:11}},39:{start:{line:84,column:12},end:{line:86,column:13}},40:{start:{line:85,column:16},end:{line:85,column:69}},41:{start:{line:88,column:8},end:{line:88,column:34}},42:{start:{line:89,column:8},end:{line:89,column:28}},43:{start:{line:90,column:8},end:{line:92,column:11}},44:{start:{line:95,column:8},end:{line:95,column:39}},45:{start:{line:98,column:8},end:{line:98,column:43}},46:{start:{line:99,column:8},end:{line:102,column:11}},47:{start:{line:105,column:8},end:{line:105,column:37}},48:{start:{line:108,column:8},end:{line:108,column:38}},49:{start:{line:109,column:8},end:{line:112,column:11}},50:{start:{line:115,column:8},end:{line:115,column:38}},51:{start:{line:118,column:8},end:{line:118,column:39}},52:{start:{line:119,column:8},end:{line:121,column:11}},53:{start:{line:124,column:8},end:{line:124,column:72}},54:{start:{line:125,column:8},end:{line:125,column:72}},55:{start:{line:126,column:8},end:{line:126,column:76}},56:{start:{line:127,column:8},end:{line:127,column:84}},57:{start:{line:128,column:8},end:{line:128,column:92}},58:{start:{line:129,column:8},end:{line:129,column:100}},59:{start:{line:130,column:8},end:{line:130,column:96}},60:{start:{line:134,column:24},end:{line:134,column:75}},61:{start:{line:135,column:8},end:{line:138,column:9}},62:{start:{line:136,column:12},end:{line:136,column:51}},63:{start:{line:137,column:12},end:{line:137,column:32}},64:{start:{line:139,column:8},end:{line:147,column:9}},65:{start:{line:140,column:12},end:{line:143,column:13}},66:{start:{line:141,column:16},end:{line:141,column:55}},67:{start:{line:142,column:16},end:{line:142,column:36}},68:{start:{line:144,column:26},end:{line:144,column:127}},69:{start:{line:145,column:12},end:{line:145,column:93}},70:{start:{line:146,column:12},end:{line:146,column:32}},71:{start:{line:148,column:8},end:{line:150,column:9}},72:{start:{line:149,column:12},end:{line:149,column:25}},73:{start:{line:151,column:8},end:{line:151,column:97}},74:{start:{line:152,column:8},end:{line:152,column:28}},75:{start:{line:155,column:8},end:{line:157,column:9}},76:{start:{line:156,column:12},end:{line:156,column:112}},77:{start:{line:160,column:8},end:{line:160,column:154}},78:{start:{line:160,column:66},end:{line:160,column:151}},79:{start:{line:163,column:24},end:{line:163,column:53}},80:{start:{line:164,column:8},end:{line:166,column:9}},81:{start:{line:165,column:12},end:{line:165,column:27}},82:{start:{line:167,column:8},end:{line:169,column:9}},83:{start:{line:168,column:12},end:{line:168,column:21}},84:{start:{line:170,column:8},end:{line:170,column:20}},85:{start:{line:173,column:8},end:{line:173,column:43}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:25},end:{line:15,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:22},end:{line:31,column:5}},line:16},2:{name:"(anonymous_2)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:13},end:{line:37,column:5}},line:32},3:{name:"(anonymous_3)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:16},end:{line:46,column:5}},line:38},4:{name:"(anonymous_4)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:13},end:{line:55,column:5}},line:47},5:{name:"(anonymous_5)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:16},end:{line:64,column:5}},line:56},6:{name:"(anonymous_6)",decl:{start:{line:65,column:4},end:{line:65,column:5}},loc:{start:{line:65,column:14},end:{line:68,column:5}},line:65},7:{name:"(anonymous_7)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:18},end:{line:75,column:5}},line:69},8:{name:"(anonymous_8)",decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:16},end:{line:81,column:5}},line:76},9:{name:"(anonymous_9)",decl:{start:{line:77,column:54},end:{line:77,column:55}},loc:{start:{line:77,column:65},end:{line:77,column:88}},line:77},10:{name:"(anonymous_10)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:22},end:{line:93,column:5}},line:82},11:{name:"(anonymous_11)",decl:{start:{line:83,column:23},end:{line:83,column:24}},loc:{start:{line:83,column:41},end:{line:87,column:9}},line:83},12:{name:"(anonymous_12)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:21},end:{line:96,column:5}},line:94},13:{name:"(anonymous_13)",decl:{start:{line:97,column:4},end:{line:97,column:5}},loc:{start:{line:97,column:29},end:{line:103,column:5}},line:97},14:{name:"(anonymous_14)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:15},end:{line:106,column:5}},line:104},15:{name:"(anonymous_15)",decl:{start:{line:107,column:4},end:{line:107,column:5}},loc:{start:{line:107,column:20},end:{line:113,column:5}},line:107},16:{name:"(anonymous_16)",decl:{start:{line:114,column:4},end:{line:114,column:5}},loc:{start:{line:114,column:16},end:{line:116,column:5}},line:114},17:{name:"(anonymous_17)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:21},end:{line:122,column:5}},line:117},18:{name:"(anonymous_18)",decl:{start:{line:123,column:4},end:{line:123,column:5}},loc:{start:{line:123,column:18},end:{line:131,column:5}},line:123},19:{name:"(anonymous_19)",decl:{start:{line:132,column:4},end:{line:132,column:5}},loc:{start:{line:132,column:23},end:{line:153,column:5}},line:132},20:{name:"(anonymous_20)",decl:{start:{line:154,column:4},end:{line:154,column:5}},loc:{start:{line:154,column:25},end:{line:158,column:5}},line:154},21:{name:"(anonymous_21)",decl:{start:{line:159,column:4},end:{line:159,column:5}},loc:{start:{line:159,column:19},end:{line:161,column:5}},line:159},22:{name:"(anonymous_22)",decl:{start:{line:160,column:54},end:{line:160,column:55}},loc:{start:{line:160,column:66},end:{line:160,column:151}},line:160},23:{name:"(anonymous_23)",decl:{start:{line:162,column:4},end:{line:162,column:5}},loc:{start:{line:162,column:21},end:{line:171,column:5}},line:162},24:{name:"(anonymous_24)",decl:{start:{line:172,column:4},end:{line:172,column:5}},loc:{start:{line:172,column:32},end:{line:174,column:5}},line:172}},branchMap:{0:{loc:{start:{line:17,column:8},end:{line:18,column:39}},type:"if",locations:[{start:{line:17,column:8},end:{line:18,column:39}},{start:{line:17,column:8},end:{line:18,column:39}}],line:17},1:{loc:{start:{line:19,column:8},end:{line:20,column:39}},type:"if",locations:[{start:{line:19,column:8},end:{line:20,column:39}},{start:{line:19,column:8},end:{line:20,column:39}}],line:19},2:{loc:{start:{line:21,column:8},end:{line:22,column:45}},type:"if",locations:[{start:{line:21,column:8},end:{line:22,column:45}},{start:{line:21,column:8},end:{line:22,column:45}}],line:21},3:{loc:{start:{line:23,column:8},end:{line:24,column:54}},type:"if",locations:[{start:{line:23,column:8},end:{line:24,column:54}},{start:{line:23,column:8},end:{line:24,column:54}}],line:23},4:{loc:{start:{line:25,column:8},end:{line:26,column:41}},type:"if",locations:[{start:{line:25,column:8},end:{line:26,column:41}},{start:{line:25,column:8},end:{line:26,column:41}}],line:25},5:{loc:{start:{line:27,column:8},end:{line:28,column:46}},type:"if",locations:[{start:{line:27,column:8},end:{line:28,column:46}},{start:{line:27,column:8},end:{line:28,column:46}}],line:27},6:{loc:{start:{line:29,column:8},end:{line:30,column:48}},type:"if",locations:[{start:{line:29,column:8},end:{line:30,column:48}},{start:{line:29,column:8},end:{line:30,column:48}}],line:29},7:{loc:{start:{line:33,column:8},end:{line:35,column:9}},type:"if",locations:[{start:{line:33,column:8},end:{line:35,column:9}},{start:{line:33,column:8},end:{line:35,column:9}}],line:33},8:{loc:{start:{line:48,column:8},end:{line:50,column:9}},type:"if",locations:[{start:{line:48,column:8},end:{line:50,column:9}},{start:{line:48,column:8},end:{line:50,column:9}}],line:48},9:{loc:{start:{line:51,column:8},end:{line:53,column:9}},type:"if",locations:[{start:{line:51,column:8},end:{line:53,column:9}},{start:{line:51,column:8},end:{line:53,column:9}}],line:51},10:{loc:{start:{line:84,column:12},end:{line:86,column:13}},type:"if",locations:[{start:{line:84,column:12},end:{line:86,column:13}},{start:{line:84,column:12},end:{line:86,column:13}}],line:84},11:{loc:{start:{line:124,column:27},end:{line:124,column:71}},type:"cond-expr",locations:[{start:{line:124,column:41},end:{line:124,column:52}},{start:{line:124,column:55},end:{line:124,column:71}}],line:124},12:{loc:{start:{line:125,column:27},end:{line:125,column:71}},type:"cond-expr",locations:[{start:{line:125,column:41},end:{line:125,column:52}},{start:{line:125,column:55},end:{line:125,column:71}}],line:125},13:{loc:{start:{line:126,column:28},end:{line:126,column:75}},type:"cond-expr",locations:[{start:{line:126,column:43},end:{line:126,column:55}},{start:{line:126,column:58},end:{line:126,column:75}}],line:126},14:{loc:{start:{line:127,column:30},end:{line:127,column:83}},type:"cond-expr",locations:[{start:{line:127,column:47},end:{line:127,column:61}},{start:{line:127,column:64},end:{line:127,column:83}}],line:127},15:{loc:{start:{line:128,column:32},end:{line:128,column:91}},type:"cond-expr",locations:[{start:{line:128,column:51},end:{line:128,column:67}},{start:{line:128,column:70},end:{line:128,column:91}}],line:128},16:{loc:{start:{line:129,column:34},end:{line:129,column:99}},type:"cond-expr",locations:[{start:{line:129,column:55},end:{line:129,column:73}},{start:{line:129,column:76},end:{line:129,column:99}}],line:129},17:{loc:{start:{line:130,column:33},end:{line:130,column:95}},type:"cond-expr",locations:[{start:{line:130,column:53},end:{line:130,column:70}},{start:{line:130,column:73},end:{line:130,column:95}}],line:130},18:{loc:{start:{line:135,column:8},end:{line:138,column:9}},type:"if",locations:[{start:{line:135,column:8},end:{line:138,column:9}},{start:{line:135,column:8},end:{line:138,column:9}}],line:135},19:{loc:{start:{line:135,column:12},end:{line:135,column:76}},type:"binary-expr",locations:[{start:{line:135,column:12},end:{line:135,column:23}},{start:{line:135,column:27},end:{line:135,column:76}}],line:135},20:{loc:{start:{line:139,column:8},end:{line:147,column:9}},type:"if",locations:[{start:{line:139,column:8},end:{line:147,column:9}},{start:{line:139,column:8},end:{line:147,column:9}}],line:139},21:{loc:{start:{line:140,column:12},end:{line:143,column:13}},type:"if",locations:[{start:{line:140,column:12},end:{line:143,column:13}},{start:{line:140,column:12},end:{line:143,column:13}}],line:140},22:{loc:{start:{line:140,column:16},end:{line:140,column:62}},type:"binary-expr",locations:[{start:{line:140,column:16},end:{line:140,column:27}},{start:{line:140,column:31},end:{line:140,column:62}}],line:140},23:{loc:{start:{line:148,column:8},end:{line:150,column:9}},type:"if",locations:[{start:{line:148,column:8},end:{line:150,column:9}},{start:{line:148,column:8},end:{line:150,column:9}}],line:148},24:{loc:{start:{line:148,column:12},end:{line:148,column:80}},type:"binary-expr",locations:[{start:{line:148,column:12},end:{line:148,column:44}},{start:{line:148,column:48},end:{line:148,column:80}}],line:148},25:{loc:{start:{line:155,column:8},end:{line:157,column:9}},type:"if",locations:[{start:{line:155,column:8},end:{line:157,column:9}},{start:{line:155,column:8},end:{line:157,column:9}}],line:155},26:{loc:{start:{line:160,column:66},end:{line:160,column:151}},type:"cond-expr",locations:[{start:{line:160,column:90},end:{line:160,column:103}},{start:{line:160,column:106},end:{line:160,column:151}}],line:160},27:{loc:{start:{line:160,column:106},end:{line:160,column:151}},type:"cond-expr",locations:[{start:{line:160,column:130},end:{line:160,column:143}},{start:{line:160,column:146},end:{line:160,column:151}}],line:160},28:{loc:{start:{line:164,column:8},end:{line:166,column:9}},type:"if",locations:[{start:{line:164,column:8},end:{line:166,column:9}},{start:{line:164,column:8},end:{line:166,column:9}}],line:164},29:{loc:{start:{line:167,column:8},end:{line:169,column:9}},type:"if",locations:[{start:{line:167,column:8},end:{line:169,column:9}},{start:{line:167,column:8},end:{line:169,column:9}}],line:167}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts"],names:[],mappings:"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",sourcesContent:["import EventObserver from '../observer/observer';\nimport { sliderOptions } from './sliderOptions';\n\nexport default class MainModel {\n  public observer = new EventObserver();\n\n  private options = {\n    min: 0,\n    max: 100,\n    step: 1,\n    values: [10, 20],\n    isVertical: false,\n    hasRange: true,\n    hasLabels: true,\n  }\n\n  constructor(options: sliderOptions) {\n    this.init(options);\n  }\n\n  public update(valueData: sliderOptions): void {\n    if (valueData.min !== undefined) this.setMin(valueData.min);\n    if (valueData.max) this.setMax(valueData.max);\n    if (valueData.values) this.setValues(valueData.values);\n    if (valueData.isVertical !== undefined) this.setOrientation(valueData.isVertical);\n    if (valueData.step) this.setStep(valueData.step);\n    if (valueData.hasRange !== undefined) this.setRange(valueData.hasRange);\n    if (valueData.hasLabels !== undefined) this.setLabels(valueData.hasLabels);\n  }\n\n  public getMin(): number {\n    if (this.options.min > this.options.max) {\n      return this.options.max;\n    }\n    return this.options.min;\n  }\n\n  public setMin(min: number): void {\n    this.options.min = min;\n    this.broadcastUpdates({\n      min: this.getMin(),\n      max: this.getMax(),\n      values: this.getValues(),\n      step: this.getStep(),\n    });\n  }\n\n  public getMax(): number {\n    if (this.options.max < this.options.min) {\n      return this.options.min;\n    }\n    if (this.options.max === this.options.min) {\n      return this.options.max + this.options.step;\n    }\n    return this.options.max;\n  }\n\n  public setMax(max: number): void {\n    this.options.max = max;\n    this.broadcastUpdates({\n      min: this.getMin(),\n      max: this.getMax(),\n      values: this.getValues(),\n      step: this.getStep(),\n    });\n  }\n\n  public getStep(): number {\n    this.options.step = this.verifyStep(this.options.step);\n    return this.options.step;\n  }\n\n  public setStep(step: number): void {\n    this.options.step = this.verifyStep(step);\n    this.broadcastUpdates({\n      step: this.getStep(),\n      values: this.getValues(),\n    });\n  }\n\n  public getValues(): number[] {\n    this.options.values = this.options.values.map((value) => this.verifyValue(value));\n    this.verifyMinMaxValues();\n    this.verifyLimits();\n    return this.options.values;\n  }\n\n  public setValues(values: number[]): void {\n    values.forEach((value, index) => {\n      if (value !== this.options.values[index]) {\n        this.options.values[index] = this.verifyValue(value);\n      }\n    });\n    this.verifyMinMaxValues();\n    this.verifyLimits();\n    this.broadcastUpdates({\n      values: this.options.values,\n    });\n  }\n\n  public getOrientation(): boolean {\n    return this.options.isVertical;\n  }\n\n  public setOrientation(vertical: boolean): void {\n    this.options.isVertical = vertical;\n    this.broadcastUpdates({\n      values: this.getValues(),\n      isVertical: this.getOrientation(),\n    });\n  }\n\n  public getRange(): boolean {\n    return this.options.hasRange;\n  }\n\n  public setRange(range: boolean): void {\n    this.options.hasRange = range;\n    this.broadcastUpdates({\n      values: this.getValues(),\n      hasRange: this.getRange(),\n    });\n  }\n\n  public getLabels(): boolean {\n    return this.options.hasLabels;\n  }\n\n  public setLabels(label: boolean): void {\n    this.options.hasLabels = label;\n    this.broadcastUpdates({\n      hasLabels: this.getLabels(),\n    });\n  }\n\n  private init(options: sliderOptions): void {\n    this.options.max = options.max ? options.max : this.options.max;\n    this.options.min = options.min ? options.min : this.options.min;\n    this.options.step = options.step ? options.step : this.options.step;\n    this.options.values = options.values ? options.values : this.options.values;\n    this.options.hasRange = options.hasRange ? options.hasRange : this.options.hasRange;\n    this.options.isVertical = options.isVertical ? options.isVertical : this.options.isVertical;\n    this.options.hasLabels = options.hasLabels ? options.hasLabels : this.options.hasLabels;\n  }\n\n  private verifyValue(value: number): number {\n    let checkedValue;\n    const modulus = (this.getMax() - this.getMin()) % this.options.step;\n    if (modulus > 0 && (value + this.getMin()) > this.getMax() - modulus) {\n      checkedValue = this.getMax() - modulus;\n      return checkedValue;\n    }\n    if (this.getMin() < 0) {\n      if (modulus > 0 && value > this.getMax() - modulus) {\n        checkedValue = this.getMax() - modulus;\n        return checkedValue;\n      }\n      const shift = Math.abs(this.getMin()) - Math.round(Math.abs(this.getMin()) / this.options.step) * this.options.step;\n      checkedValue = Math.round(value / this.options.step) * this.options.step - shift;\n      return checkedValue;\n    }\n    if (value === this.options.values[0] || value === this.options.values[1]) {\n      return value;\n    }\n    checkedValue = Math.round(value / this.options.step) * this.options.step + this.getMin();\n    return checkedValue;\n  }\n\n  private verifyMinMaxValues(): void {\n    if (this.options.values[0] > this.options.values[1]) {\n      [this.options.values[0], this.options.values[1]] = [this.options.values[1], this.options.values[0]];\n    }\n  }\n\n  private verifyLimits(): void {\n    this.options.values = this.options.values.map((value) => (value < this.getMin() ? this.getMin() : value > this.getMax() ? this.getMax() : value));\n  }\n\n  private verifyStep(step: number): number {\n    const maxStep = this.getMax() - this.getMin();\n    if (step > maxStep) {\n      return maxStep;\n    } if (step <= 0) {\n      return 1;\n    }\n    return step;\n  }\n\n  private broadcastUpdates(valueData: sliderOptions): void {\n    this.observer.broadcast(valueData);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class u{constructor(e){c.f[0]++,c.s[0]++,this.observer=new C,c.s[1]++,this.options={min:0,max:100,step:1,values:[10,20],isVertical:!1,hasRange:!0,hasLabels:!0},c.s[2]++,this.init(e)}update(e){c.f[1]++,c.s[3]++,void 0!==e.min?(c.b[0][0]++,c.s[4]++,this.setMin(e.min)):c.b[0][1]++,c.s[5]++,e.max?(c.b[1][0]++,c.s[6]++,this.setMax(e.max)):c.b[1][1]++,c.s[7]++,e.values?(c.b[2][0]++,c.s[8]++,this.setValues(e.values)):c.b[2][1]++,c.s[9]++,void 0!==e.isVertical?(c.b[3][0]++,c.s[10]++,this.setOrientation(e.isVertical)):c.b[3][1]++,c.s[11]++,e.step?(c.b[4][0]++,c.s[12]++,this.setStep(e.step)):c.b[4][1]++,c.s[13]++,void 0!==e.hasRange?(c.b[5][0]++,c.s[14]++,this.setRange(e.hasRange)):c.b[5][1]++,c.s[15]++,void 0!==e.hasLabels?(c.b[6][0]++,c.s[16]++,this.setLabels(e.hasLabels)):c.b[6][1]++}getMin(){return c.f[2]++,c.s[17]++,this.options.min>this.options.max?(c.b[7][0]++,c.s[18]++,this.options.max):(c.b[7][1]++,c.s[19]++,this.options.min)}setMin(e){c.f[3]++,c.s[20]++,this.options.min=e,c.s[21]++,this.broadcastUpdates({min:this.getMin(),max:this.getMax(),values:this.getValues(),step:this.getStep()})}getMax(){return c.f[4]++,c.s[22]++,this.options.max<this.options.min?(c.b[8][0]++,c.s[23]++,this.options.min):(c.b[8][1]++,c.s[24]++,this.options.max===this.options.min?(c.b[9][0]++,c.s[25]++,this.options.max+this.options.step):(c.b[9][1]++,c.s[26]++,this.options.max))}setMax(e){c.f[5]++,c.s[27]++,this.options.max=e,c.s[28]++,this.broadcastUpdates({min:this.getMin(),max:this.getMax(),values:this.getValues(),step:this.getStep()})}getStep(){return c.f[6]++,c.s[29]++,this.options.step=this.verifyStep(this.options.step),c.s[30]++,this.options.step}setStep(e){c.f[7]++,c.s[31]++,this.options.step=this.verifyStep(e),c.s[32]++,this.broadcastUpdates({step:this.getStep(),values:this.getValues()})}getValues(){return c.f[8]++,c.s[33]++,this.options.values=this.options.values.map(e=>(c.f[9]++,c.s[34]++,this.verifyValue(e))),c.s[35]++,this.verifyMinMaxValues(),c.s[36]++,this.verifyLimits(),c.s[37]++,this.options.values}setValues(e){c.f[10]++,c.s[38]++,e.forEach((e,n)=>{c.f[11]++,c.s[39]++,e!==this.options.values[n]?(c.b[10][0]++,c.s[40]++,this.options.values[n]=this.verifyValue(e)):c.b[10][1]++}),c.s[41]++,this.verifyMinMaxValues(),c.s[42]++,this.verifyLimits(),c.s[43]++,this.broadcastUpdates({values:this.options.values})}getOrientation(){return c.f[12]++,c.s[44]++,this.options.isVertical}setOrientation(e){c.f[13]++,c.s[45]++,this.options.isVertical=e,c.s[46]++,this.broadcastUpdates({values:this.getValues(),isVertical:this.getOrientation()})}getRange(){return c.f[14]++,c.s[47]++,this.options.hasRange}setRange(e){c.f[15]++,c.s[48]++,this.options.hasRange=e,c.s[49]++,this.broadcastUpdates({values:this.getValues(),hasRange:this.getRange()})}getLabels(){return c.f[16]++,c.s[50]++,this.options.hasLabels}setLabels(e){c.f[17]++,c.s[51]++,this.options.hasLabels=e,c.s[52]++,this.broadcastUpdates({hasLabels:this.getLabels()})}init(e){c.f[18]++,c.s[53]++,this.options.max=e.max?(c.b[11][0]++,e.max):(c.b[11][1]++,this.options.max),c.s[54]++,this.options.min=e.min?(c.b[12][0]++,e.min):(c.b[12][1]++,this.options.min),c.s[55]++,this.options.step=e.step?(c.b[13][0]++,e.step):(c.b[13][1]++,this.options.step),c.s[56]++,this.options.values=e.values?(c.b[14][0]++,e.values):(c.b[14][1]++,this.options.values),c.s[57]++,this.options.hasRange=e.hasRange?(c.b[15][0]++,e.hasRange):(c.b[15][1]++,this.options.hasRange),c.s[58]++,this.options.isVertical=e.isVertical?(c.b[16][0]++,e.isVertical):(c.b[16][1]++,this.options.isVertical),c.s[59]++,this.options.hasLabels=e.hasLabels?(c.b[17][0]++,e.hasLabels):(c.b[17][1]++,this.options.hasLabels)}verifyValue(e){let n;c.f[19]++;const A=(c.s[60]++,(this.getMax()-this.getMin())%this.options.step);if(c.s[61]++,c.b[19][0]++,A>0&&(c.b[19][1]++,e+this.getMin()>this.getMax()-A))return c.b[18][0]++,c.s[62]++,n=this.getMax()-A,c.s[63]++,n;if(c.b[18][1]++,c.s[64]++,this.getMin()<0){if(c.b[20][0]++,c.s[65]++,c.b[22][0]++,A>0&&(c.b[22][1]++,e>this.getMax()-A))return c.b[21][0]++,c.s[66]++,n=this.getMax()-A,c.s[67]++,n;c.b[21][1]++;const t=(c.s[68]++,Math.abs(this.getMin())-Math.round(Math.abs(this.getMin())/this.options.step)*this.options.step);return c.s[69]++,n=Math.round(e/this.options.step)*this.options.step-t,c.s[70]++,n}return c.b[20][1]++,c.s[71]++,c.b[24][0]++,e===this.options.values[0]||(c.b[24][1]++,e===this.options.values[1])?(c.b[23][0]++,c.s[72]++,e):(c.b[23][1]++,c.s[73]++,n=Math.round(e/this.options.step)*this.options.step+this.getMin(),c.s[74]++,n)}verifyMinMaxValues(){c.f[20]++,c.s[75]++,this.options.values[0]>this.options.values[1]?(c.b[25][0]++,c.s[76]++,[this.options.values[0],this.options.values[1]]=[this.options.values[1],this.options.values[0]]):c.b[25][1]++}verifyLimits(){c.f[21]++,c.s[77]++,this.options.values=this.options.values.map(e=>(c.f[22]++,c.s[78]++,e<this.getMin()?(c.b[26][0]++,this.getMin()):(c.b[26][1]++,e>this.getMax()?(c.b[27][0]++,this.getMax()):(c.b[27][1]++,e))))}verifyStep(e){c.f[23]++;const n=(c.s[79]++,this.getMax()-this.getMin());return c.s[80]++,e>n?(c.b[28][0]++,c.s[81]++,n):(c.b[28][1]++,c.s[82]++,e<=0?(c.b[29][0]++,c.s[83]++,1):(c.b[29][1]++,c.s[84]++,e))}broadcastUpdates(e){c.f[24]++,c.s[85]++,this.observer.broadcast(e)}}var d=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",n="f6644cb54256bb325cd3bd0f057bfa194c41400a",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:51}},1:{start:{line:4,column:8},end:{line:4,column:20}},2:{start:{line:7,column:8},end:{line:7,column:26}},3:{start:{line:10,column:8},end:{line:10,column:48}},4:{start:{line:13,column:26},end:{line:15,column:72}},5:{start:{line:16,column:8},end:{line:16,column:25}},6:{start:{line:19,column:38},end:{line:19,column:68}},7:{start:{line:20,column:8},end:{line:20,column:37}},8:{start:{line:23,column:8},end:{line:23,column:50}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:18},end:{line:5,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:17},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:25},end:{line:11,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:37},end:{line:17,column:5}},line:12},4:{name:"(anonymous_4)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:41},end:{line:21,column:5}},line:18},5:{name:"(anonymous_5)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:11},end:{line:24,column:5}},line:22}},branchMap:{0:{loc:{start:{line:13,column:26},end:{line:15,column:72}},type:"cond-expr",locations:[{start:{line:14,column:14},end:{line:14,column:74}},{start:{line:15,column:14},end:{line:15,column:72}}],line:13},1:{loc:{start:{line:19,column:38},end:{line:19,column:68}},type:"cond-expr",locations:[{start:{line:19,column:51},end:{line:19,column:57}},{start:{line:19,column:60},end:{line:19,column:68}}],line:19}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts"],names:[],mappings:"AAAA,MAAM,CAAC,OAAO,OAAO,SAAS;IAG5B;QAFQ,UAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAG5C,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,aAAa,CAAC,KAAa;QAChC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAC;IAEM,YAAY,CAAC,UAAmB,EAAE,MAAmB;QAC1D,MAAM,SAAS,GAAG,UAAU;YAC1B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG;YAC9D,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;QAC/D,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,wBAAwB,CAAC,UAAmB;QACjD,MAAM,qBAAqB,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC7D,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;CACF",sourcesContent:["export default class LabelView {\n  private label = document.createElement('div');\n\n  constructor() {\n    this.init();\n  }\n\n  public getElement(): HTMLElement {\n    return this.label;\n  }\n\n  public setLabelValue(value: number): void {\n    this.label.innerText = value.toString();\n  }\n\n  public getLabelSize(isVertical: boolean, parent: HTMLElement): number {\n    const labelSize = isVertical\n      ? (this.getElement().offsetHeight / parent.offsetHeight) * 100\n      : (this.getElement().offsetWidth / parent.offsetWidth) * 100;\n    return labelSize;\n  }\n\n  public getFixedPositionProperty(isVertical: boolean): 'left' | 'bottom' {\n    const fixedPositionProperty = isVertical ? 'left' : 'bottom';\n    return fixedPositionProperty;\n  }\n\n  private init(): void {\n    this.label.classList.add('slider__label');\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class m{constructor(){d.f[0]++,d.s[0]++,this.label=document.createElement("div"),d.s[1]++,this.init()}getElement(){return d.f[1]++,d.s[2]++,this.label}setLabelValue(e){d.f[2]++,d.s[3]++,this.label.innerText=e.toString()}getLabelSize(e,n){d.f[3]++;const A=(d.s[4]++,e?(d.b[0][0]++,this.getElement().offsetHeight/n.offsetHeight*100):(d.b[0][1]++,this.getElement().offsetWidth/n.offsetWidth*100));return d.s[5]++,A}getFixedPositionProperty(e){d.f[4]++;const n=(d.s[6]++,e?(d.b[1][0]++,"left"):(d.b[1][1]++,"bottom"));return d.s[7]++,n}init(){d.f[5]++,d.s[8]++,this.label.classList.add("slider__label")}}var h=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",n="368d99e7ab21dbbac621202c8c04a79cee968eca",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:53}},1:{start:{line:5,column:8},end:{line:5,column:37}},2:{start:{line:8,column:28},end:{line:8,column:37}},3:{start:{line:9,column:33},end:{line:9,column:63}},4:{start:{line:10,column:28},end:{line:10,column:59}},5:{start:{line:11,column:25},end:{line:11,column:78}},6:{start:{line:12,column:8},end:{line:12,column:62}},7:{start:{line:13,column:8},end:{line:13,column:67}},8:{start:{line:14,column:8},end:{line:14,column:42}},9:{start:{line:15,column:8},end:{line:15,column:24}},10:{start:{line:19,column:8},end:{line:26,column:9}},11:{start:{line:20,column:12},end:{line:20,column:67}},12:{start:{line:21,column:12},end:{line:21,column:38}},13:{start:{line:22,column:12},end:{line:22,column:57}},14:{start:{line:25,column:12},end:{line:25,column:92}},15:{start:{line:29,column:8},end:{line:29,column:28}},16:{start:{line:33,column:8},end:{line:33,column:86}},17:{start:{line:36,column:8},end:{line:36,column:29}},18:{start:{line:37,column:8},end:{line:37,column:41}},19:{start:{line:38,column:8},end:{line:38,column:54}},20:{start:{line:39,column:8},end:{line:39,column:56}},21:{start:{line:40,column:8},end:{line:41,column:57}},22:{start:{line:41,column:12},end:{line:41,column:57}},23:{start:{line:44,column:28},end:{line:46,column:72}},24:{start:{line:47,column:8},end:{line:47,column:27}},25:{start:{line:50,column:8},end:{line:58,column:9}},26:{start:{line:51,column:12},end:{line:51,column:38}},27:{start:{line:52,column:30},end:{line:52,column:78}},28:{start:{line:53,column:42},end:{line:53,column:89}},29:{start:{line:54,column:37},end:{line:54,column:67}},30:{start:{line:55,column:34},end:{line:55,column:85}},31:{start:{line:56,column:12},end:{line:56,column:82}},32:{start:{line:57,column:12},end:{line:57,column:74}},33:{start:{line:61,column:8},end:{line:62,column:44}},34:{start:{line:62,column:12},end:{line:62,column:44}},35:{start:{line:65,column:8},end:{line:73,column:9}},36:{start:{line:66,column:26},end:{line:66,column:89}},37:{start:{line:67,column:12},end:{line:67,column:52}},38:{start:{line:68,column:12},end:{line:68,column:44}},39:{start:{line:71,column:26},end:{line:71,column:89}},40:{start:{line:72,column:12},end:{line:72,column:51}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:35},end:{line:6,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:45},end:{line:16,column:5}},line:7},2:{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:34},end:{line:27,column:5}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:17},end:{line:30,column:5}},line:28},4:{name:"(anonymous_4)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:22},end:{line:34,column:5}},line:31},5:{name:"(anonymous_5)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:28},end:{line:42,column:5}},line:35},6:{name:"(anonymous_6)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:31},end:{line:48,column:5}},line:43},7:{name:"(anonymous_7)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:58},end:{line:59,column:5}},line:49},8:{name:"(anonymous_8)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:25},end:{line:63,column:5}},line:60},9:{name:"(anonymous_9)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:31},end:{line:74,column:5}},line:64}},branchMap:{0:{loc:{start:{line:9,column:33},end:{line:9,column:63}},type:"cond-expr",locations:[{start:{line:9,column:46},end:{line:9,column:54}},{start:{line:9,column:57},end:{line:9,column:63}}],line:9},1:{loc:{start:{line:19,column:8},end:{line:26,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:26,column:9}},{start:{line:19,column:8},end:{line:26,column:9}}],line:19},2:{loc:{start:{line:20,column:25},end:{line:20,column:66}},type:"cond-expr",locations:[{start:{line:20,column:38},end:{line:20,column:48}},{start:{line:20,column:51},end:{line:20,column:66}}],line:20},3:{loc:{start:{line:25,column:12},end:{line:25,column:91}},type:"cond-expr",locations:[{start:{line:25,column:58},end:{line:25,column:64}},{start:{line:25,column:67},end:{line:25,column:91}}],line:25},4:{loc:{start:{line:25,column:12},end:{line:25,column:55}},type:"binary-expr",locations:[{start:{line:25,column:12},end:{line:25,column:38}},{start:{line:25,column:42},end:{line:25,column:55}}],line:25},5:{loc:{start:{line:33,column:15},end:{line:33,column:85}},type:"cond-expr",locations:[{start:{line:33,column:61},end:{line:33,column:67}},{start:{line:33,column:70},end:{line:33,column:85}}],line:33},6:{loc:{start:{line:33,column:15},end:{line:33,column:58}},type:"binary-expr",locations:[{start:{line:33,column:15},end:{line:33,column:41}},{start:{line:33,column:45},end:{line:33,column:58}}],line:33},7:{loc:{start:{line:39,column:21},end:{line:39,column:55}},type:"cond-expr",locations:[{start:{line:39,column:33},end:{line:39,column:48}},{start:{line:39,column:51},end:{line:39,column:55}}],line:39},8:{loc:{start:{line:40,column:8},end:{line:41,column:57}},type:"if",locations:[{start:{line:40,column:8},end:{line:41,column:57}},{start:{line:40,column:8},end:{line:41,column:57}}],line:40},9:{loc:{start:{line:44,column:28},end:{line:46,column:72}},type:"cond-expr",locations:[{start:{line:45,column:14},end:{line:45,column:74}},{start:{line:46,column:14},end:{line:46,column:72}}],line:44},10:{loc:{start:{line:50,column:8},end:{line:58,column:9}},type:"if",locations:[{start:{line:50,column:8},end:{line:58,column:9}},{start:{line:50,column:8},end:{line:58,column:9}}],line:50},11:{loc:{start:{line:54,column:37},end:{line:54,column:67}},type:"cond-expr",locations:[{start:{line:54,column:50},end:{line:54,column:58}},{start:{line:54,column:61},end:{line:54,column:67}}],line:54},12:{loc:{start:{line:61,column:8},end:{line:62,column:44}},type:"if",locations:[{start:{line:61,column:8},end:{line:62,column:44}},{start:{line:61,column:8},end:{line:62,column:44}}],line:61},13:{loc:{start:{line:65,column:8},end:{line:73,column:9}},type:"if",locations:[{start:{line:65,column:8},end:{line:73,column:9}},{start:{line:65,column:8},end:{line:73,column:9}}],line:65}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts"],names:[],mappings:"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",sourcesContent:["import LabelView from './LabelView';\n\nexport default class HandlerView {\n  private parent!: HTMLElement;\n\n  private handler = document.createElement('div');\n\n  private label!: LabelView | null;\n\n  constructor(parent: HTMLElement, showLabel: boolean) {\n    this.init(parent, showLabel);\n  }\n\n  public setPosition(value: number, min: number, max: number, isVertical: boolean): number {\n    const valuesCount = max - min;\n    const positionProperty = isVertical ? 'bottom' : 'left';\n    const handlerSize = this.getHandlerSize(isVertical);\n    const position = ((value - min) / valuesCount) * 100 - handlerSize / 2;\n    this.handler.style[positionProperty] = `${position}%`;\n    this.setLabelPosition(value, valuesCount, min, isVertical);\n    this.setDefaultStyles(isVertical);\n    return position;\n  }\n\n  public updateLabel(showLabel: boolean | undefined, value: number): void {\n    if (showLabel) {\n      this.label = this.label ? this.label : new LabelView();\n      this.setLabelValue(value);\n      this.handler.before(this.label.getElement());\n    } else {\n      this.label?.getElement().remove();\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.handler;\n  }\n\n  public getLabelElement(): HTMLElement | undefined {\n    return this.label?.getElement();\n  }\n\n  private init(parent: HTMLElement, showLabel: boolean): void {\n    this.parent = parent;\n    this.parent.append(this.handler);\n    this.handler.classList.add('slider__handler');\n    this.label = showLabel ? new LabelView() : null;\n    if (this.label) this.handler.before(this.label.getElement());\n  }\n\n  private getHandlerSize(isVertical: boolean): number {\n    const handlerSize = isVertical\n      ? (this.handler.offsetHeight / this.parent.offsetHeight) * 100\n      : (this.handler.offsetWidth / this.parent.offsetWidth) * 100;\n    return handlerSize;\n  }\n\n  private setLabelPosition(value: number, valuesCount: number, min: number, isVertical: boolean): void {\n    if (this.label) {\n      this.setLabelValue(value);\n      const labelSize = this.label.getLabelSize(isVertical, this.parent);\n      const fixedPositionProperty = this.label.getFixedPositionProperty(isVertical);\n      const positionProperty = isVertical ? 'bottom' : 'left';\n      const labelPosition = ((value - min) / valuesCount) * 100 - labelSize / 2;\n      this.label.getElement().style[positionProperty] = `${labelPosition}%`;\n      this.label.getElement().style[fixedPositionProperty] = '330%';\n    }\n  }\n\n  private setLabelValue(value: number): void {\n    if (this.label) this.label.setLabelValue(value);\n  }\n\n  private setDefaultStyles(vertical: boolean): void{\n    if (vertical) {\n      const shift = (this.handler.offsetHeight / 2) - (this.parent.offsetWidth / 2);\n      this.handler.style.left = `-${shift}px`;\n      this.handler.style.top = 'auto';\n    } else {\n      const shift = (this.handler.offsetWidth / 2) - (this.parent.offsetHeight / 2);\n      this.handler.style.top = `-${shift}px`;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class p{constructor(e,n){h.f[0]++,h.s[0]++,this.handler=document.createElement("div"),h.s[1]++,this.init(e,n)}setPosition(e,n,A,t){h.f[1]++;const i=(h.s[2]++,A-n),l=(h.s[3]++,t?(h.b[0][0]++,"bottom"):(h.b[0][1]++,"left")),o=(h.s[4]++,this.getHandlerSize(t)),s=(h.s[5]++,(e-n)/i*100-o/2);return h.s[6]++,this.handler.style[l]=`${s}%`,h.s[7]++,this.setLabelPosition(e,i,n,t),h.s[8]++,this.setDefaultStyles(t),h.s[9]++,s}updateLabel(e,n){var A;h.f[2]++,h.s[10]++,e?(h.b[1][0]++,h.s[11]++,this.label=this.label?(h.b[2][0]++,this.label):(h.b[2][1]++,new m),h.s[12]++,this.setLabelValue(n),h.s[13]++,this.handler.before(this.label.getElement())):(h.b[1][1]++,h.s[14]++,h.b[4][0]++,null===(A=this.label)||(h.b[4][1]++,void 0===A)?h.b[3][0]++:(h.b[3][1]++,A.getElement().remove()))}getElement(){return h.f[3]++,h.s[15]++,this.handler}getLabelElement(){var e;return h.f[4]++,h.s[16]++,h.b[6][0]++,null===(e=this.label)||(h.b[6][1]++,void 0===e)?void h.b[5][0]++:(h.b[5][1]++,e.getElement())}init(e,n){h.f[5]++,h.s[17]++,this.parent=e,h.s[18]++,this.parent.append(this.handler),h.s[19]++,this.handler.classList.add("slider__handler"),h.s[20]++,this.label=n?(h.b[7][0]++,new m):(h.b[7][1]++,null),h.s[21]++,this.label?(h.b[8][0]++,h.s[22]++,this.handler.before(this.label.getElement())):h.b[8][1]++}getHandlerSize(e){h.f[6]++;const n=(h.s[23]++,e?(h.b[9][0]++,this.handler.offsetHeight/this.parent.offsetHeight*100):(h.b[9][1]++,this.handler.offsetWidth/this.parent.offsetWidth*100));return h.s[24]++,n}setLabelPosition(e,n,A,t){if(h.f[7]++,h.s[25]++,this.label){h.b[10][0]++,h.s[26]++,this.setLabelValue(e);const i=(h.s[27]++,this.label.getLabelSize(t,this.parent)),l=(h.s[28]++,this.label.getFixedPositionProperty(t)),o=(h.s[29]++,t?(h.b[11][0]++,"bottom"):(h.b[11][1]++,"left")),s=(h.s[30]++,(e-A)/n*100-i/2);h.s[31]++,this.label.getElement().style[o]=`${s}%`,h.s[32]++,this.label.getElement().style[l]="330%"}else h.b[10][1]++}setLabelValue(e){h.f[8]++,h.s[33]++,this.label?(h.b[12][0]++,h.s[34]++,this.label.setLabelValue(e)):h.b[12][1]++}setDefaultStyles(e){if(h.f[9]++,h.s[35]++,e){h.b[13][0]++;const e=(h.s[36]++,this.handler.offsetHeight/2-this.parent.offsetWidth/2);h.s[37]++,this.handler.style.left=`-${e}px`,h.s[38]++,this.handler.style.top="auto"}else{h.b[13][1]++;const e=(h.s[39]++,this.handler.offsetWidth/2-this.parent.offsetHeight/2);h.s[40]++,this.handler.style.top=`-${e}px`}}}var f=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",n="814edc7669ffa24515e8c1d0a08493513922576f",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:59}},1:{start:{line:4,column:8},end:{line:4,column:67}},2:{start:{line:7,column:8},end:{line:18,column:9}},3:{start:{line:8,column:12},end:{line:8,column:65}},4:{start:{line:9,column:12},end:{line:9,column:74}},5:{start:{line:10,column:12},end:{line:10,column:57}},6:{start:{line:11,column:12},end:{line:11,column:51}},7:{start:{line:14,column:12},end:{line:14,column:68}},8:{start:{line:15,column:12},end:{line:15,column:71}},9:{start:{line:16,column:12},end:{line:16,column:68}},10:{start:{line:17,column:12},end:{line:17,column:51}},11:{start:{line:21,column:8},end:{line:21,column:34}},12:{start:{line:24,column:8},end:{line:24,column:29}},13:{start:{line:25,column:8},end:{line:25,column:47}},14:{start:{line:26,column:8},end:{line:35,column:9}},15:{start:{line:27,column:12},end:{line:27,column:65}},16:{start:{line:28,column:12},end:{line:28,column:57}},17:{start:{line:29,column:12},end:{line:29,column:51}},18:{start:{line:32,column:12},end:{line:32,column:71}},19:{start:{line:33,column:12},end:{line:33,column:68}},20:{start:{line:34,column:12},end:{line:34,column:51}},21:{start:{line:38,column:8},end:{line:46,column:9}},22:{start:{line:39,column:12},end:{line:41,column:44}},23:{start:{line:44,column:12},end:{line:45,column:98}},24:{start:{line:49,column:23},end:{line:49,column:51}},25:{start:{line:50,column:23},end:{line:50,column:52}},26:{start:{line:51,column:8},end:{line:53,column:172}},27:{start:{line:54,column:8},end:{line:56,column:140}},28:{start:{line:59,column:8},end:{line:70,column:9}},29:{start:{line:60,column:12},end:{line:60,column:52}},30:{start:{line:61,column:12},end:{line:63,column:13}},31:{start:{line:62,column:16},end:{line:62,column:53}},32:{start:{line:66,column:12},end:{line:66,column:53}},33:{start:{line:67,column:12},end:{line:69,column:13}},34:{start:{line:68,column:16},end:{line:68,column:55}},35:{start:{line:73,column:20},end:{line:73,column:51}},36:{start:{line:74,column:8},end:{line:76,column:9}},37:{start:{line:75,column:12},end:{line:75,column:44}},38:{start:{line:77,column:8},end:{line:77,column:38}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:65},end:{line:5,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:65},end:{line:19,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:22},end:{line:22,column:5}},line:20},3:{name:"(anonymous_3)",decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:58},end:{line:36,column:5}},line:23},4:{name:"(anonymous_4)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:41},end:{line:47,column:5}},line:37},5:{name:"(anonymous_5)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:55},end:{line:57,column:5}},line:48},6:{name:"(anonymous_6)",decl:{start:{line:58,column:4},end:{line:58,column:5}},loc:{start:{line:58,column:38},end:{line:71,column:5}},line:58},7:{name:"(anonymous_7)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:37},end:{line:78,column:5}},line:72}},branchMap:{0:{loc:{start:{line:7,column:8},end:{line:18,column:9}},type:"if",locations:[{start:{line:7,column:8},end:{line:18,column:9}},{start:{line:7,column:8},end:{line:18,column:9}}],line:7},1:{loc:{start:{line:26,column:8},end:{line:35,column:9}},type:"if",locations:[{start:{line:26,column:8},end:{line:35,column:9}},{start:{line:26,column:8},end:{line:35,column:9}}],line:26},2:{loc:{start:{line:38,column:8},end:{line:46,column:9}},type:"if",locations:[{start:{line:38,column:8},end:{line:46,column:9}},{start:{line:38,column:8},end:{line:46,column:9}}],line:38},3:{loc:{start:{line:49,column:23},end:{line:49,column:51}},type:"cond-expr",locations:[{start:{line:49,column:34},end:{line:49,column:42}},{start:{line:49,column:45},end:{line:49,column:51}}],line:49},4:{loc:{start:{line:50,column:23},end:{line:50,column:52}},type:"cond-expr",locations:[{start:{line:50,column:34},end:{line:50,column:42}},{start:{line:50,column:45},end:{line:50,column:52}}],line:50},5:{loc:{start:{line:51,column:43},end:{line:53,column:171}},type:"cond-expr",locations:[{start:{line:52,column:14},end:{line:52,column:141}},{start:{line:53,column:14},end:{line:53,column:171}}],line:51},6:{loc:{start:{line:54,column:43},end:{line:56,column:139}},type:"cond-expr",locations:[{start:{line:55,column:14},end:{line:55,column:140}},{start:{line:56,column:14},end:{line:56,column:139}}],line:54},7:{loc:{start:{line:59,column:8},end:{line:70,column:9}},type:"if",locations:[{start:{line:59,column:8},end:{line:70,column:9}},{start:{line:59,column:8},end:{line:70,column:9}}],line:59},8:{loc:{start:{line:61,column:12},end:{line:63,column:13}},type:"if",locations:[{start:{line:61,column:12},end:{line:63,column:13}},{start:{line:61,column:12},end:{line:63,column:13}}],line:61},9:{loc:{start:{line:67,column:12},end:{line:69,column:13}},type:"if",locations:[{start:{line:67,column:12},end:{line:69,column:13}},{start:{line:67,column:12},end:{line:69,column:13}}],line:67},10:{loc:{start:{line:74,column:8},end:{line:76,column:9}},type:"if",locations:[{start:{line:74,column:8},end:{line:76,column:9}},{start:{line:74,column:8},end:{line:76,column:9}}],line:74}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts"],names:[],mappings:"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",sourcesContent:["export default class SelectedArea {\n  private selectedRange = document.createElement('div');\n\n  private parent!: HTMLElement;\n\n  constructor(\n    parent: HTMLElement,\n    range: boolean,\n    vertical: boolean,\n    handlerMin: HTMLElement,\n    handlerMax: HTMLElement,\n  ) {\n    this.init(parent, range, vertical, handlerMin, handlerMax);\n  }\n\n  public updateSelectedRange(\n    range: boolean,\n    vertical: boolean,\n    handlerMax: HTMLElement,\n    handlerMin: HTMLElement,\n  ): void {\n    if (!range) {\n      this.selectedRange.classList.add('slider__selected');\n      this.selectedRange.classList.remove('slider__selected-range');\n      this.setPositionSingle(vertical, handlerMin);\n      this.setDefaultStyles(vertical, range);\n    } else {\n      this.selectedRange.classList.remove('slider__selected');\n      this.selectedRange.classList.add('slider__selected-range');\n      this.setPositionRange(vertical, handlerMax, handlerMin);\n      this.setDefaultStyles(vertical, range);\n    }\n  }\n\n  public getSelectedArea(): HTMLDivElement {\n    return this.selectedRange;\n  }\n\n  private init(\n    parent: HTMLElement,\n    range: boolean,\n    vertical: boolean,\n    handlerMin: HTMLElement,\n    handlerMax: HTMLElement,\n  ): void {\n    this.parent = parent;\n    this.parent.append(this.selectedRange);\n    if (!range) {\n      this.selectedRange.classList.add('slider__selected');\n      this.setPositionSingle(vertical, handlerMin);\n      this.setDefaultStyles(vertical, range);\n    } else {\n      this.selectedRange.classList.add('slider__selected-range');\n      this.setPositionRange(vertical, handlerMax, handlerMin);\n      this.setDefaultStyles(vertical, range);\n    }\n  }\n\n  private setPositionSingle(vertical: boolean, handler: HTMLElement): void {\n    if (vertical) {\n      (this.selectedRange.style.height = `${this.getCoordinate(this.parent, vertical)\n        - this.getCoordinate(handler, vertical)\n        + handler.offsetHeight}px`);\n    } else {\n      (this.selectedRange.style.width = `${(((this.getCoordinate(handler, vertical) + (handler.offsetWidth / 2))\n        - this.getCoordinate(this.parent, vertical)) / this.parent.offsetWidth) * 100}%`);\n    }\n  }\n\n  private setPositionRange(\n    vertical: boolean,\n    handlerMax: HTMLElement,\n    handlerMin: HTMLElement,\n  ): void {\n    const posMin = vertical ? 'bottom' : 'left';\n    const length = vertical ? 'height' : 'width';\n    this.selectedRange.style[posMin] = vertical\n      ? `${((this.getCoordinate(this.parent, vertical) - this.getCoordinate(handlerMin, vertical)) / this.parent.offsetHeight) * 100}%`\n      : `${((this.getCoordinate(handlerMin, vertical) - this.getCoordinate(this.parent, vertical) + (handlerMin.offsetWidth / 2)) / this.parent.offsetWidth) * 100}%`;\n    this.selectedRange.style[length] = vertical\n      ? `${((this.getCoordinate(handlerMin, vertical) - this.getCoordinate(handlerMax, vertical)) / this.parent.offsetHeight) * 100}%`\n      : `${((this.getCoordinate(handlerMax, vertical) - this.getCoordinate(handlerMin, vertical)) / this.parent.offsetWidth) * 100}%`;\n  }\n\n  private setDefaultStyles(vertical: boolean, range: boolean): void{\n    if (vertical) {\n      this.selectedRange.style.width = '100%';\n      if (range) {\n        this.selectedRange.style.left = '0%';\n      }\n    } else {\n      this.selectedRange.style.height = '100%';\n      if (range) {\n        this.selectedRange.style.bottom = '0%';\n      }\n    }\n  }\n\n  private getCoordinate(element: HTMLElement, vertical: boolean): number {\n    const box = element.getBoundingClientRect();\n    if (vertical) {\n      return box.bottom + pageYOffset;\n    }\n    return box.left + pageXOffset;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class I{constructor(e,n,A,t,i){f.f[0]++,f.s[0]++,this.selectedRange=document.createElement("div"),f.s[1]++,this.init(e,n,A,t,i)}updateSelectedRange(e,n,A,t){f.f[1]++,f.s[2]++,e?(f.b[0][1]++,f.s[7]++,this.selectedRange.classList.remove("slider__selected"),f.s[8]++,this.selectedRange.classList.add("slider__selected-range"),f.s[9]++,this.setPositionRange(n,A,t),f.s[10]++,this.setDefaultStyles(n,e)):(f.b[0][0]++,f.s[3]++,this.selectedRange.classList.add("slider__selected"),f.s[4]++,this.selectedRange.classList.remove("slider__selected-range"),f.s[5]++,this.setPositionSingle(n,t),f.s[6]++,this.setDefaultStyles(n,e))}getSelectedArea(){return f.f[2]++,f.s[11]++,this.selectedRange}init(e,n,A,t,i){f.f[3]++,f.s[12]++,this.parent=e,f.s[13]++,this.parent.append(this.selectedRange),f.s[14]++,n?(f.b[1][1]++,f.s[18]++,this.selectedRange.classList.add("slider__selected-range"),f.s[19]++,this.setPositionRange(A,i,t),f.s[20]++,this.setDefaultStyles(A,n)):(f.b[1][0]++,f.s[15]++,this.selectedRange.classList.add("slider__selected"),f.s[16]++,this.setPositionSingle(A,t),f.s[17]++,this.setDefaultStyles(A,n))}setPositionSingle(e,n){f.f[4]++,f.s[21]++,e?(f.b[2][0]++,f.s[22]++,this.selectedRange.style.height=`${this.getCoordinate(this.parent,e)-this.getCoordinate(n,e)+n.offsetHeight}px`):(f.b[2][1]++,f.s[23]++,this.selectedRange.style.width=`${(this.getCoordinate(n,e)+n.offsetWidth/2-this.getCoordinate(this.parent,e))/this.parent.offsetWidth*100}%`)}setPositionRange(e,n,A){f.f[5]++;const t=(f.s[24]++,e?(f.b[3][0]++,"bottom"):(f.b[3][1]++,"left")),i=(f.s[25]++,e?(f.b[4][0]++,"height"):(f.b[4][1]++,"width"));f.s[26]++,this.selectedRange.style[t]=e?(f.b[5][0]++,`${(this.getCoordinate(this.parent,e)-this.getCoordinate(A,e))/this.parent.offsetHeight*100}%`):(f.b[5][1]++,`${(this.getCoordinate(A,e)-this.getCoordinate(this.parent,e)+A.offsetWidth/2)/this.parent.offsetWidth*100}%`),f.s[27]++,this.selectedRange.style[i]=e?(f.b[6][0]++,`${(this.getCoordinate(A,e)-this.getCoordinate(n,e))/this.parent.offsetHeight*100}%`):(f.b[6][1]++,`${(this.getCoordinate(n,e)-this.getCoordinate(A,e))/this.parent.offsetWidth*100}%`)}setDefaultStyles(e,n){f.f[6]++,f.s[28]++,e?(f.b[7][0]++,f.s[29]++,this.selectedRange.style.width="100%",f.s[30]++,n?(f.b[8][0]++,f.s[31]++,this.selectedRange.style.left="0%"):f.b[8][1]++):(f.b[7][1]++,f.s[32]++,this.selectedRange.style.height="100%",f.s[33]++,n?(f.b[9][0]++,f.s[34]++,this.selectedRange.style.bottom="0%"):f.b[9][1]++)}getCoordinate(e,n){f.f[7]++;const A=(f.s[35]++,e.getBoundingClientRect());return f.s[36]++,n?(f.b[10][0]++,f.s[37]++,A.bottom+pageYOffset):(f.b[10][1]++,f.s[38]++,A.left+pageXOffset)}}var g=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",n="42b8d890e686a69d42becb0d620f8a7b51b17089",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",statementMap:{0:{start:{line:6,column:8},end:{line:6,column:44}},1:{start:{line:7,column:8},end:{line:7,column:56}},2:{start:{line:8,column:8},end:{line:8,column:27}},3:{start:{line:9,column:8},end:{line:9,column:53}},4:{start:{line:10,column:8},end:{line:10,column:49}},5:{start:{line:11,column:8},end:{line:11,column:34}},6:{start:{line:12,column:8},end:{line:12,column:77}},7:{start:{line:15,column:8},end:{line:15,column:74}},8:{start:{line:16,column:8},end:{line:16,column:74}},9:{start:{line:17,column:8},end:{line:17,column:72}},10:{start:{line:18,column:8},end:{line:18,column:102}},11:{start:{line:19,column:8},end:{line:19,column:94}},12:{start:{line:20,column:8},end:{line:20,column:98}},13:{start:{line:21,column:8},end:{line:21,column:45}},14:{start:{line:22,column:8},end:{line:22,column:107}},15:{start:{line:22,column:50},end:{line:22,column:105}},16:{start:{line:23,column:8},end:{line:23,column:37}},17:{start:{line:24,column:8},end:{line:24,column:34}},18:{start:{line:25,column:8},end:{line:25,column:140}},19:{start:{line:28,column:8},end:{line:28,column:29}},20:{start:{line:31,column:8},end:{line:31,column:23}},21:{start:{line:32,column:8},end:{line:32,column:23}},22:{start:{line:33,column:8},end:{line:33,column:29}},23:{start:{line:34,column:8},end:{line:34,column:37}},24:{start:{line:35,column:8},end:{line:35,column:33}},25:{start:{line:36,column:8},end:{line:36,column:35}},26:{start:{line:37,column:8},end:{line:37,column:29}},27:{start:{line:38,column:8},end:{line:38,column:54}},28:{start:{line:39,column:8},end:{line:39,column:49}},29:{start:{line:40,column:8},end:{line:40,column:45}},30:{start:{line:41,column:8},end:{line:41,column:27}},31:{start:{line:42,column:8},end:{line:42,column:34}},32:{start:{line:43,column:8},end:{line:43,column:26}},33:{start:{line:44,column:8},end:{line:44,column:156}},34:{start:{line:47,column:8},end:{line:49,column:11}},35:{start:{line:48,column:12},end:{line:48,column:103}},36:{start:{line:50,column:8},end:{line:50,column:97}},37:{start:{line:53,column:8},end:{line:60,column:9}},38:{start:{line:54,column:12},end:{line:54,column:62}},39:{start:{line:55,column:12},end:{line:55,column:57}},40:{start:{line:58,column:12},end:{line:58,column:60}},41:{start:{line:59,column:12},end:{line:59,column:59}},42:{start:{line:63,column:8},end:{line:63,column:77}},43:{start:{line:64,column:8},end:{line:68,column:9}},44:{start:{line:65,column:12},end:{line:65,column:81}},45:{start:{line:66,column:12},end:{line:66,column:61}},46:{start:{line:67,column:12},end:{line:67,column:61}},47:{start:{line:71,column:8},end:{line:71,column:128}},48:{start:{line:71,column:50},end:{line:71,column:126}},49:{start:{line:72,column:8},end:{line:77,column:9}},50:{start:{line:73,column:12},end:{line:73,column:63}},51:{start:{line:75,column:13},end:{line:77,column:9}},52:{start:{line:76,column:12},end:{line:76,column:61}},53:{start:{line:81,column:34},end:{line:81,column:63}},54:{start:{line:82,column:32},end:{line:82,column:66}},55:{start:{line:83,column:34},end:{line:83,column:63}},56:{start:{line:84,column:8},end:{line:93,column:9}},57:{start:{line:85,column:12},end:{line:85,column:39}},58:{start:{line:86,column:12},end:{line:86,column:84}},59:{start:{line:89,column:12},end:{line:89,column:55}},60:{start:{line:90,column:12},end:{line:92,column:13}},61:{start:{line:91,column:16},end:{line:91,column:58}},62:{start:{line:96,column:20},end:{line:96,column:51}},63:{start:{line:97,column:8},end:{line:99,column:9}},64:{start:{line:98,column:12},end:{line:98,column:44}},65:{start:{line:100,column:8},end:{line:100,column:38}},66:{start:{line:103,column:30},end:{line:103,column:37}},67:{start:{line:104,column:36},end:{line:104,column:126}},68:{start:{line:104,column:67},end:{line:104,column:125}},69:{start:{line:105,column:8},end:{line:107,column:9}},70:{start:{line:106,column:12},end:{line:106,column:38}},71:{start:{line:108,column:32},end:{line:108,column:136}},72:{start:{line:109,column:8},end:{line:117,column:9}},73:{start:{line:110,column:12},end:{line:110,column:49}},74:{start:{line:112,column:13},end:{line:117,column:9}},75:{start:{line:113,column:12},end:{line:113,column:49}},76:{start:{line:116,column:12},end:{line:116,column:49}},77:{start:{line:118,column:8},end:{line:118,column:59}},78:{start:{line:121,column:8},end:{line:121,column:28}},79:{start:{line:122,column:23},end:{line:122,column:31}},80:{start:{line:123,column:8},end:{line:123,column:41}},81:{start:{line:124,column:8},end:{line:124,column:63}},82:{start:{line:125,column:8},end:{line:125,column:59}},83:{start:{line:128,column:8},end:{line:133,column:9}},84:{start:{line:129,column:12},end:{line:129,column:55}},85:{start:{line:132,column:12},end:{line:132,column:55}},86:{start:{line:136,column:33},end:{line:136,column:86}},87:{start:{line:137,column:20},end:{line:139,column:101}},88:{start:{line:140,column:8},end:{line:142,column:9}},89:{start:{line:141,column:12},end:{line:141,column:30}},90:{start:{line:143,column:8},end:{line:172,column:9}},91:{start:{line:144,column:45},end:{line:144,column:120}},92:{start:{line:145,column:12},end:{line:153,column:13}},93:{start:{line:146,column:16},end:{line:146,column:39}},94:{start:{line:147,column:16},end:{line:147,column:66}},95:{start:{line:148,column:16},end:{line:148,column:67}},96:{start:{line:151,column:16},end:{line:151,column:67}},97:{start:{line:152,column:16},end:{line:152,column:66}},98:{start:{line:154,column:12},end:{line:156,column:15}},99:{start:{line:159,column:45},end:{line:159,column:120}},100:{start:{line:160,column:12},end:{line:168,column:13}},101:{start:{line:161,column:16},end:{line:161,column:39}},102:{start:{line:162,column:16},end:{line:162,column:67}},103:{start:{line:163,column:16},end:{line:163,column:66}},104:{start:{line:166,column:16},end:{line:166,column:66}},105:{start:{line:167,column:16},end:{line:167,column:67}},106:{start:{line:169,column:12},end:{line:171,column:15}},107:{start:{line:175,column:8},end:{line:175,column:66}},108:{start:{line:176,column:8},end:{line:176,column:64}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:75},end:{line:13,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:22},end:{line:26,column:5}},line:14},2:{name:"(anonymous_2)",decl:{start:{line:22,column:30},end:{line:22,column:31}},loc:{start:{line:22,column:50},end:{line:22,column:105}},line:22},3:{name:"(anonymous_3)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:18},end:{line:29,column:5}},line:27},4:{name:"(anonymous_4)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:68},end:{line:45,column:5}},line:30},5:{name:"(anonymous_5)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:17},end:{line:51,column:5}},line:46},6:{name:"(anonymous_6)",decl:{start:{line:47,column:30},end:{line:47,column:31}},loc:{start:{line:47,column:43},end:{line:49,column:9}},line:47},7:{name:"(anonymous_7)",decl:{start:{line:52,column:4},end:{line:52,column:5}},loc:{start:{line:52,column:29},end:{line:61,column:5}},line:52},8:{name:"(anonymous_8)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:18},end:{line:69,column:5}},line:62},9:{name:"(anonymous_9)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:25},end:{line:78,column:5}},line:70},10:{name:"(anonymous_10)",decl:{start:{line:71,column:30},end:{line:71,column:31}},loc:{start:{line:71,column:50},end:{line:71,column:126}},line:71},11:{name:"(anonymous_11)",decl:{start:{line:79,column:4},end:{line:79,column:5}},loc:{start:{line:79,column:20},end:{line:94,column:5}},line:79},12:{name:"(anonymous_12)",decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:38},end:{line:101,column:5}},line:95},13:{name:"(anonymous_13)",decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:33},end:{line:119,column:5}},line:102},14:{name:"(anonymous_14)",decl:{start:{line:104,column:54},end:{line:104,column:55}},loc:{start:{line:104,column:67},end:{line:104,column:125}},line:104},15:{name:"(anonymous_15)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:30},end:{line:126,column:5}},line:120},16:{name:"(anonymous_16)",decl:{start:{line:127,column:4},end:{line:127,column:5}},loc:{start:{line:127,column:19},end:{line:134,column:5}},line:127},17:{name:"(anonymous_17)",decl:{start:{line:135,column:4},end:{line:135,column:5}},loc:{start:{line:135,column:33},end:{line:173,column:5}},line:135},18:{name:"(anonymous_18)",decl:{start:{line:174,column:4},end:{line:174,column:5}},loc:{start:{line:174,column:16},end:{line:177,column:5}},line:174}},branchMap:{0:{loc:{start:{line:15,column:19},end:{line:15,column:73}},type:"cond-expr",locations:[{start:{line:15,column:49},end:{line:15,column:62}},{start:{line:15,column:65},end:{line:15,column:73}}],line:15},1:{loc:{start:{line:16,column:19},end:{line:16,column:73}},type:"cond-expr",locations:[{start:{line:16,column:49},end:{line:16,column:62}},{start:{line:16,column:65},end:{line:16,column:73}}],line:16},2:{loc:{start:{line:17,column:22},end:{line:17,column:71}},type:"cond-expr",locations:[{start:{line:17,column:41},end:{line:17,column:57}},{start:{line:17,column:60},end:{line:17,column:71}}],line:17},3:{loc:{start:{line:18,column:26},end:{line:18,column:101}},type:"cond-expr",locations:[{start:{line:18,column:63},end:{line:18,column:83}},{start:{line:18,column:86},end:{line:18,column:101}}],line:18},4:{loc:{start:{line:19,column:24},end:{line:19,column:93}},type:"cond-expr",locations:[{start:{line:19,column:59},end:{line:19,column:77}},{start:{line:19,column:80},end:{line:19,column:93}}],line:19},5:{loc:{start:{line:20,column:25},end:{line:20,column:97}},type:"cond-expr",locations:[{start:{line:20,column:61},end:{line:20,column:80}},{start:{line:20,column:83},end:{line:20,column:97}}],line:20},6:{loc:{start:{line:53,column:8},end:{line:60,column:9}},type:"if",locations:[{start:{line:53,column:8},end:{line:60,column:9}},{start:{line:53,column:8},end:{line:60,column:9}}],line:53},7:{loc:{start:{line:64,column:8},end:{line:68,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:68,column:9}},{start:{line:64,column:8},end:{line:68,column:9}}],line:64},8:{loc:{start:{line:72,column:8},end:{line:77,column:9}},type:"if",locations:[{start:{line:72,column:8},end:{line:77,column:9}},{start:{line:72,column:8},end:{line:77,column:9}}],line:72},9:{loc:{start:{line:75,column:13},end:{line:77,column:9}},type:"if",locations:[{start:{line:75,column:13},end:{line:77,column:9}},{start:{line:75,column:13},end:{line:77,column:9}}],line:75},10:{loc:{start:{line:84,column:8},end:{line:93,column:9}},type:"if",locations:[{start:{line:84,column:8},end:{line:93,column:9}},{start:{line:84,column:8},end:{line:93,column:9}}],line:84},11:{loc:{start:{line:86,column:12},end:{line:86,column:83}},type:"cond-expr",locations:[{start:{line:86,column:63},end:{line:86,column:69}},{start:{line:86,column:72},end:{line:86,column:83}}],line:86},12:{loc:{start:{line:86,column:12},end:{line:86,column:60}},type:"binary-expr",locations:[{start:{line:86,column:12},end:{line:86,column:43}},{start:{line:86,column:47},end:{line:86,column:60}}],line:86},13:{loc:{start:{line:90,column:12},end:{line:92,column:13}},type:"if",locations:[{start:{line:90,column:12},end:{line:92,column:13}},{start:{line:90,column:12},end:{line:92,column:13}}],line:90},14:{loc:{start:{line:90,column:16},end:{line:90,column:49}},type:"binary-expr",locations:[{start:{line:90,column:16},end:{line:90,column:31}},{start:{line:90,column:35},end:{line:90,column:49}}],line:90},15:{loc:{start:{line:97,column:8},end:{line:99,column:9}},type:"if",locations:[{start:{line:97,column:8},end:{line:99,column:9}},{start:{line:97,column:8},end:{line:99,column:9}}],line:97},16:{loc:{start:{line:105,column:8},end:{line:107,column:9}},type:"if",locations:[{start:{line:105,column:8},end:{line:107,column:9}},{start:{line:105,column:8},end:{line:107,column:9}}],line:105},17:{loc:{start:{line:109,column:8},end:{line:117,column:9}},type:"if",locations:[{start:{line:109,column:8},end:{line:117,column:9}},{start:{line:109,column:8},end:{line:117,column:9}}],line:109},18:{loc:{start:{line:112,column:13},end:{line:117,column:9}},type:"if",locations:[{start:{line:112,column:13},end:{line:117,column:9}},{start:{line:112,column:13},end:{line:117,column:9}}],line:112},19:{loc:{start:{line:112,column:17},end:{line:112,column:102}},type:"binary-expr",locations:[{start:{line:112,column:17},end:{line:112,column:58}},{start:{line:112,column:62},end:{line:112,column:102}}],line:112},20:{loc:{start:{line:128,column:8},end:{line:133,column:9}},type:"if",locations:[{start:{line:128,column:8},end:{line:133,column:9}},{start:{line:128,column:8},end:{line:133,column:9}}],line:128},21:{loc:{start:{line:137,column:20},end:{line:139,column:101}},type:"cond-expr",locations:[{start:{line:138,column:14},end:{line:138,column:102}},{start:{line:139,column:14},end:{line:139,column:101}}],line:137},22:{loc:{start:{line:140,column:8},end:{line:142,column:9}},type:"if",locations:[{start:{line:140,column:8},end:{line:142,column:9}},{start:{line:140,column:8},end:{line:142,column:9}}],line:140},23:{loc:{start:{line:143,column:8},end:{line:172,column:9}},type:"if",locations:[{start:{line:143,column:8},end:{line:172,column:9}},{start:{line:143,column:8},end:{line:172,column:9}}],line:143},24:{loc:{start:{line:143,column:12},end:{line:143,column:51}},type:"binary-expr",locations:[{start:{line:143,column:12},end:{line:143,column:21}},{start:{line:143,column:25},end:{line:143,column:51}}],line:143},25:{loc:{start:{line:144,column:45},end:{line:144,column:120}},type:"cond-expr",locations:[{start:{line:144,column:60},end:{line:144,column:82}},{start:{line:144,column:85},end:{line:144,column:120}}],line:144},26:{loc:{start:{line:145,column:12},end:{line:153,column:13}},type:"if",locations:[{start:{line:145,column:12},end:{line:153,column:13}},{start:{line:145,column:12},end:{line:153,column:13}}],line:145},27:{loc:{start:{line:145,column:16},end:{line:145,column:88}},type:"binary-expr",locations:[{start:{line:145,column:16},end:{line:145,column:40}},{start:{line:145,column:44},end:{line:145,column:71}},{start:{line:145,column:75},end:{line:145,column:88}}],line:145},28:{loc:{start:{line:159,column:45},end:{line:159,column:120}},type:"cond-expr",locations:[{start:{line:159,column:60},end:{line:159,column:82}},{start:{line:159,column:85},end:{line:159,column:120}}],line:159},29:{loc:{start:{line:160,column:12},end:{line:168,column:13}},type:"if",locations:[{start:{line:160,column:12},end:{line:168,column:13}},{start:{line:160,column:12},end:{line:168,column:13}}],line:160}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0,0],28:[0,0],29:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts"],names:[],mappings:"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",sourcesContent:["import HandlerView from './HandlerView';\nimport SelectedArea from './SelectedAreaView';\nimport EventObserver from '../observer/observer';\nimport { sliderOptions } from '../model/sliderOptions';\n\nexport default class MainView {\n  public observer = new EventObserver();\n\n  private sliderBody = document.createElement('div');\n\n  private parent!: HTMLElement;\n\n  private selectedArea!: SelectedArea;\n\n  private handlers: HandlerView[] = [];\n\n  private min!: number;\n\n  private max!: number;\n\n  private values!: number[];\n\n  private isVertical!: boolean;\n\n  private hasRange!: boolean;\n\n  private hasLabels!: boolean;\n\n  private mouseMove = this.onMouseMove.bind(this);\n\n  private mouseUp = this.onMouseUp.bind(this);\n\n  private handlerTargetId = '';\n\n  constructor(\n    parent: HTMLElement,\n    hasRange: boolean,\n    isVertical: boolean,\n    min: number,\n    max: number,\n    values: number[],\n    hasLabels: boolean,\n  ) {\n    this.init(parent, hasRange, isVertical, min, max, values, hasLabels);\n  }\n\n  public update(valueData: sliderOptions): void {\n    this.min = valueData.min !== undefined ? valueData.min : this.min;\n    this.max = valueData.max !== undefined ? valueData.max : this.max;\n    this.values = valueData.values ? valueData.values : this.values;\n    this.isVertical = valueData.isVertical !== undefined ? valueData.isVertical : this.isVertical;\n    this.hasRange = valueData.hasRange !== undefined ? valueData.hasRange : this.hasRange;\n    this.hasLabels = valueData.hasLabels !== undefined ? valueData.hasLabels : this.hasLabels;\n    this.setOrientation(this.isVertical);\n    this.handlers.forEach((handler, index) => handler.updateLabel(this.hasLabels, this.values[index]));\n    this.setRange(this.hasRange);\n    this.setHandlerPosition();\n    this.selectedArea.updateSelectedRange(\n      this.hasRange,\n      this.isVertical,\n      this.handlers[1].getElement(),\n      this.handlers[0].getElement(),\n    );\n  }\n\n  public getHandlers(): HandlerView[] {\n    return this.handlers;\n  }\n\n  private init(\n    parent: HTMLElement,\n    hasRange: boolean,\n    isVertical: boolean,\n    min: number,\n    max: number,\n    values: number[],\n    hasLabels: boolean,\n  ): void {\n    this.min = min;\n    this.max = max;\n    this.values = values;\n    this.isVertical = isVertical;\n    this.hasRange = hasRange;\n    this.hasLabels = hasLabels;\n    this.parent = parent;\n    this.sliderBody.classList.add('slider__body');\n    this.parent.appendChild(this.sliderBody);\n    this.setOrientation(this.isVertical);\n    this.setHandlers();\n    this.setHandlerPosition();\n    this.bindEvents();\n    this.selectedArea = new SelectedArea(\n      this.sliderBody,\n      this.hasRange,\n      this.isVertical,\n      this.handlers[0].getElement(),\n      this.handlers[1].getElement(),\n    );\n  }\n\n  private bindEvents(): void {\n    this.handlers.forEach((handler) => {\n      handler.getElement().addEventListener('mousedown', this.handleHandlerMouseDown.bind(this));\n    });\n    this.sliderBody.addEventListener('mousedown', this.handleSliderBodyMouseDown.bind(this));\n  }\n\n  private setOrientation(vertical: boolean): void {\n    if (vertical) {\n      this.parent.classList.remove('slider_horizontal');\n      this.parent.classList.add('slider_vertical');\n    } else {\n      this.parent.classList.remove('slider_vertical');\n      this.parent.classList.add('slider_horizontal');\n    }\n  }\n\n  private setHandlers(): void {\n    this.handlers.push(new HandlerView(this.sliderBody, this.hasLabels));\n    if (this.hasRange) {\n      this.handlers.push(new HandlerView(this.sliderBody, this.hasLabels));\n      this.handlers[0].getElement().id = 'handler_min';\n      this.handlers[1].getElement().id = 'handler_max';\n    }\n  }\n\n  private setHandlerPosition(): void {\n    this.handlers.forEach((handler, index) => handler.setPosition(this.values[index], this.min, this.max, this.isVertical));\n    if (this.values[0] === this.max) {\n      this.handlers[0].getElement().style.zIndex = '100';\n    } else if (this.values[0] === this.min) {\n      this.handlers[0].getElement().style.zIndex = '1';\n    }\n  }\n\n  private setRange(range: boolean): void {\n    const maxHandlerElement = this.handlers[1].getElement();\n    const maxHandlerLabel = this.handlers[1].getLabelElement();\n    const minHandlerElement = this.handlers[0].getElement();\n    if (!range) {\n      maxHandlerElement.remove();\n      maxHandlerLabel?.remove();\n    } else {\n      minHandlerElement.after(maxHandlerElement);\n      if (maxHandlerLabel && this.hasLabels) {\n        maxHandlerElement.before(maxHandlerLabel);\n      }\n    }\n  }\n\n  private getCoordinates(element: HTMLElement, vertical: boolean): number {\n    const box = element.getBoundingClientRect();\n    if (vertical) {\n      return box.bottom + pageYOffset;\n    }\n    return box.left + pageXOffset;\n  }\n\n  private handleSliderBodyMouseDown(e: MouseEvent): void {\n    let clickCoordinate = e.pageX;\n    const handlersCoordinates = this.handlers.map((handler) => this.getCoordinates(handler.getElement(), this.isVertical));\n    if (this.isVertical) {\n      clickCoordinate = e.pageY;\n    }\n    const handlerDistance = [Math.abs(clickCoordinate - handlersCoordinates[0]), Math.abs(clickCoordinate - handlersCoordinates[1])];\n    if (handlerDistance[0] < handlerDistance[1]) {\n      this.handlerTargetId = 'handler_min';\n    } else if (handlerDistance[0] === handlerDistance[1] && clickCoordinate < handlersCoordinates[0]) {\n      this.handlerTargetId = 'handler_min';\n    } else {\n      this.handlerTargetId = 'handler_max';\n    }\n\n    this.moveAt(clickCoordinate, this.handlerTargetId);\n  }\n\n  private handleHandlerMouseDown(e: MouseEvent): void {\n    e.stopPropagation();\n    const target = e.target as HTMLDivElement;\n    this.handlerTargetId = target.id;\n    document.addEventListener('mousemove', this.mouseMove);\n    document.addEventListener('mouseup', this.mouseUp);\n  }\n\n  private onMouseMove(e: MouseEvent): void {\n    if (this.isVertical) {\n      this.moveAt(e.pageY, this.handlerTargetId);\n    } else {\n      this.moveAt(e.pageX, this.handlerTargetId);\n    }\n  }\n\n  private moveAt(coordinate: number, targetId: string): void {\n    const sliderCoordinate = this.getCoordinates(this.sliderBody, this.isVertical);\n    let value = this.isVertical\n      ? ((sliderCoordinate - coordinate) / this.sliderBody.offsetHeight) * (this.max - this.min)\n      : ((coordinate - sliderCoordinate) / this.sliderBody.offsetWidth) * (this.max - this.min);\n    if (this.min < 0) {\n      value += this.min;\n    }\n    if (!targetId || targetId === 'handler_min') {\n      const minValueMoreThanMaxValue = this.min < 0 ? value > this.values[1] : (value + this.min) > this.values[1];\n      if (minValueMoreThanMaxValue && this.values[1] !== this.max && this.hasRange) {\n        value = this.values[1];\n        this.handlers[0].getElement().style.zIndex = '10';\n        this.handlers[1].getElement().style.zIndex = '100';\n      } else {\n        this.handlers[0].getElement().style.zIndex = '100';\n        this.handlers[1].getElement().style.zIndex = '10';\n      }\n      this.observer.broadcast({\n        values: [value, this.values[1]],\n      });\n    } else {\n      const maxValueLessThanMinValue = this.min < 0 ? value < this.values[0] : (value + this.min) < this.values[0];\n      if (maxValueLessThanMinValue) {\n        value = this.values[0];\n        this.handlers[0].getElement().style.zIndex = '100';\n        this.handlers[1].getElement().style.zIndex = '10';\n      } else {\n        this.handlers[0].getElement().style.zIndex = '10';\n        this.handlers[1].getElement().style.zIndex = '100';\n      }\n      this.observer.broadcast({\n        values: [this.values[0], value],\n      });\n    }\n  }\n\n  private onMouseUp(): void {\n    document.removeEventListener('mousemove', this.mouseMove);\n    document.removeEventListener('mouseup', this.onMouseUp);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class v{constructor(e,n,A,t,i,l,o){g.f[0]++,g.s[0]++,this.observer=new C,g.s[1]++,this.sliderBody=document.createElement("div"),g.s[2]++,this.handlers=[],g.s[3]++,this.mouseMove=this.onMouseMove.bind(this),g.s[4]++,this.mouseUp=this.onMouseUp.bind(this),g.s[5]++,this.handlerTargetId="",g.s[6]++,this.init(e,n,A,t,i,l,o)}update(e){g.f[1]++,g.s[7]++,this.min=void 0!==e.min?(g.b[0][0]++,e.min):(g.b[0][1]++,this.min),g.s[8]++,this.max=void 0!==e.max?(g.b[1][0]++,e.max):(g.b[1][1]++,this.max),g.s[9]++,this.values=e.values?(g.b[2][0]++,e.values):(g.b[2][1]++,this.values),g.s[10]++,this.isVertical=void 0!==e.isVertical?(g.b[3][0]++,e.isVertical):(g.b[3][1]++,this.isVertical),g.s[11]++,this.hasRange=void 0!==e.hasRange?(g.b[4][0]++,e.hasRange):(g.b[4][1]++,this.hasRange),g.s[12]++,this.hasLabels=void 0!==e.hasLabels?(g.b[5][0]++,e.hasLabels):(g.b[5][1]++,this.hasLabels),g.s[13]++,this.setOrientation(this.isVertical),g.s[14]++,this.handlers.forEach((e,n)=>(g.f[2]++,g.s[15]++,e.updateLabel(this.hasLabels,this.values[n]))),g.s[16]++,this.setRange(this.hasRange),g.s[17]++,this.setHandlerPosition(),g.s[18]++,this.selectedArea.updateSelectedRange(this.hasRange,this.isVertical,this.handlers[1].getElement(),this.handlers[0].getElement())}getHandlers(){return g.f[3]++,g.s[19]++,this.handlers}init(e,n,A,t,i,l,o){g.f[4]++,g.s[20]++,this.min=t,g.s[21]++,this.max=i,g.s[22]++,this.values=l,g.s[23]++,this.isVertical=A,g.s[24]++,this.hasRange=n,g.s[25]++,this.hasLabels=o,g.s[26]++,this.parent=e,g.s[27]++,this.sliderBody.classList.add("slider__body"),g.s[28]++,this.parent.appendChild(this.sliderBody),g.s[29]++,this.setOrientation(this.isVertical),g.s[30]++,this.setHandlers(),g.s[31]++,this.setHandlerPosition(),g.s[32]++,this.bindEvents(),g.s[33]++,this.selectedArea=new I(this.sliderBody,this.hasRange,this.isVertical,this.handlers[0].getElement(),this.handlers[1].getElement())}bindEvents(){g.f[5]++,g.s[34]++,this.handlers.forEach(e=>{g.f[6]++,g.s[35]++,e.getElement().addEventListener("mousedown",this.handleHandlerMouseDown.bind(this))}),g.s[36]++,this.sliderBody.addEventListener("mousedown",this.handleSliderBodyMouseDown.bind(this))}setOrientation(e){g.f[7]++,g.s[37]++,e?(g.b[6][0]++,g.s[38]++,this.parent.classList.remove("slider_horizontal"),g.s[39]++,this.parent.classList.add("slider_vertical")):(g.b[6][1]++,g.s[40]++,this.parent.classList.remove("slider_vertical"),g.s[41]++,this.parent.classList.add("slider_horizontal"))}setHandlers(){g.f[8]++,g.s[42]++,this.handlers.push(new p(this.sliderBody,this.hasLabels)),g.s[43]++,this.hasRange?(g.b[7][0]++,g.s[44]++,this.handlers.push(new p(this.sliderBody,this.hasLabels)),g.s[45]++,this.handlers[0].getElement().id="handler_min",g.s[46]++,this.handlers[1].getElement().id="handler_max"):g.b[7][1]++}setHandlerPosition(){g.f[9]++,g.s[47]++,this.handlers.forEach((e,n)=>(g.f[10]++,g.s[48]++,e.setPosition(this.values[n],this.min,this.max,this.isVertical))),g.s[49]++,this.values[0]===this.max?(g.b[8][0]++,g.s[50]++,this.handlers[0].getElement().style.zIndex="100"):(g.b[8][1]++,g.s[51]++,this.values[0]===this.min?(g.b[9][0]++,g.s[52]++,this.handlers[0].getElement().style.zIndex="1"):g.b[9][1]++)}setRange(e){var n;g.f[11]++;const A=(g.s[53]++,this.handlers[1].getElement()),t=(g.s[54]++,this.handlers[1].getLabelElement()),i=(g.s[55]++,this.handlers[0].getElement());g.s[56]++,e?(g.b[10][1]++,g.s[59]++,i.after(A),g.s[60]++,g.b[14][0]++,t&&(g.b[14][1]++,this.hasLabels)?(g.b[13][0]++,g.s[61]++,A.before(t)):g.b[13][1]++):(g.b[10][0]++,g.s[57]++,A.remove(),g.s[58]++,g.b[12][0]++,null===(n=t)||(g.b[12][1]++,void 0===n)?g.b[11][0]++:(g.b[11][1]++,n.remove()))}getCoordinates(e,n){g.f[12]++;const A=(g.s[62]++,e.getBoundingClientRect());return g.s[63]++,n?(g.b[15][0]++,g.s[64]++,A.bottom+pageYOffset):(g.b[15][1]++,g.s[65]++,A.left+pageXOffset)}handleSliderBodyMouseDown(e){g.f[13]++;let n=(g.s[66]++,e.pageX);const A=(g.s[67]++,this.handlers.map(e=>(g.f[14]++,g.s[68]++,this.getCoordinates(e.getElement(),this.isVertical))));g.s[69]++,this.isVertical?(g.b[16][0]++,g.s[70]++,n=e.pageY):g.b[16][1]++;const t=(g.s[71]++,[Math.abs(n-A[0]),Math.abs(n-A[1])]);g.s[72]++,t[0]<t[1]?(g.b[17][0]++,g.s[73]++,this.handlerTargetId="handler_min"):(g.b[17][1]++,g.s[74]++,g.b[19][0]++,t[0]===t[1]&&(g.b[19][1]++,n<A[0])?(g.b[18][0]++,g.s[75]++,this.handlerTargetId="handler_min"):(g.b[18][1]++,g.s[76]++,this.handlerTargetId="handler_max")),g.s[77]++,this.moveAt(n,this.handlerTargetId)}handleHandlerMouseDown(e){g.f[15]++,g.s[78]++,e.stopPropagation();const n=(g.s[79]++,e.target);g.s[80]++,this.handlerTargetId=n.id,g.s[81]++,document.addEventListener("mousemove",this.mouseMove),g.s[82]++,document.addEventListener("mouseup",this.mouseUp)}onMouseMove(e){g.f[16]++,g.s[83]++,this.isVertical?(g.b[20][0]++,g.s[84]++,this.moveAt(e.pageY,this.handlerTargetId)):(g.b[20][1]++,g.s[85]++,this.moveAt(e.pageX,this.handlerTargetId))}moveAt(e,n){g.f[17]++;const A=(g.s[86]++,this.getCoordinates(this.sliderBody,this.isVertical));let t=(g.s[87]++,this.isVertical?(g.b[21][0]++,(A-e)/this.sliderBody.offsetHeight*(this.max-this.min)):(g.b[21][1]++,(e-A)/this.sliderBody.offsetWidth*(this.max-this.min)));if(g.s[88]++,this.min<0?(g.b[22][0]++,g.s[89]++,t+=this.min):g.b[22][1]++,g.s[90]++,g.b[24][0]++,n&&(g.b[24][1]++,"handler_min"!==n)){g.b[23][1]++;const e=(g.s[99]++,this.min<0?(g.b[28][0]++,t<this.values[0]):(g.b[28][1]++,t+this.min<this.values[0]));g.s[100]++,e?(g.b[29][0]++,g.s[101]++,t=this.values[0],g.s[102]++,this.handlers[0].getElement().style.zIndex="100",g.s[103]++,this.handlers[1].getElement().style.zIndex="10"):(g.b[29][1]++,g.s[104]++,this.handlers[0].getElement().style.zIndex="10",g.s[105]++,this.handlers[1].getElement().style.zIndex="100"),g.s[106]++,this.observer.broadcast({values:[this.values[0],t]})}else{g.b[23][0]++;const e=(g.s[91]++,this.min<0?(g.b[25][0]++,t>this.values[1]):(g.b[25][1]++,t+this.min>this.values[1]));g.s[92]++,g.b[27][0]++,e&&(g.b[27][1]++,this.values[1]!==this.max)&&(g.b[27][2]++,this.hasRange)?(g.b[26][0]++,g.s[93]++,t=this.values[1],g.s[94]++,this.handlers[0].getElement().style.zIndex="10",g.s[95]++,this.handlers[1].getElement().style.zIndex="100"):(g.b[26][1]++,g.s[96]++,this.handlers[0].getElement().style.zIndex="100",g.s[97]++,this.handlers[1].getElement().style.zIndex="10"),g.s[98]++,this.observer.broadcast({values:[t,this.values[1]]})}}onMouseUp(){g.f[18]++,g.s[107]++,document.removeEventListener("mousemove",this.mouseMove),g.s[108]++,document.removeEventListener("mouseup",this.onMouseUp)}}var E=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",n="e3139c91036dd73dd7cbda692a0381ac491024c8",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:33}},1:{start:{line:7,column:8},end:{line:7,column:27}},2:{start:{line:8,column:8},end:{line:8,column:29}},3:{start:{line:9,column:8},end:{line:9,column:188}},4:{start:{line:10,column:8},end:{line:10,column:27}},5:{start:{line:11,column:8},end:{line:11,column:26}},6:{start:{line:14,column:8},end:{line:16,column:11}},7:{start:{line:15,column:12},end:{line:15,column:41}},8:{start:{line:19,column:8},end:{line:21,column:11}},9:{start:{line:20,column:12},end:{line:20,column:40}},10:{start:{line:24,column:8},end:{line:24,column:27}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:31},end:{line:5,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:24},end:{line:12,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:18},end:{line:17,column:5}},line:13},3:{name:"(anonymous_3)",decl:{start:{line:14,column:37},end:{line:14,column:38}},loc:{start:{line:14,column:52},end:{line:16,column:9}},line:14},4:{name:"(anonymous_4)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:17},end:{line:22,column:5}},line:18},5:{name:"(anonymous_5)",decl:{start:{line:19,column:38},end:{line:19,column:39}},loc:{start:{line:19,column:53},end:{line:21,column:9}},line:19},6:{name:"(anonymous_6)",decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:16},end:{line:25,column:5}},line:23}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts"],names:[],mappings:"AACA,OAAO,QAAQ,MAAM,kBAAkB,CAAC;AAGxC,MAAM,CAAC,OAAO,OAAO,SAAS;IAO5B,YAAY,MAAmB,EAAE,KAAgB;QAC/C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAEO,IAAI,CAAC,MAAmB,EAAE,KAAgB;QAChD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,CACtB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EACrB,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,EAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EACnB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EACnB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EACtB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CACvB,CAAC;QACF,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACxD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACzD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF",sourcesContent:["import MainModel from '../model/MainModel';\nimport MainView from '../view/MainView';\nimport { sliderOptions } from '../model/sliderOptions';\n\nexport default class Presenter {\n  private model!: MainModel;\n\n  private view!: MainView;\n\n  private parent!: HTMLElement;\n\n  constructor(parent: HTMLElement, model: MainModel) {\n    this.init(parent, model);\n  }\n\n  private init(parent: HTMLElement, model: MainModel): void {\n    this.model = model;\n    this.parent = parent;\n    this.view = new MainView(\n      this.parent,\n      this.model.getRange(),\n      this.model.getOrientation(),\n      this.model.getMin(),\n      this.model.getMax(),\n      this.model.getValues(),\n      this.model.getLabels(),\n    );\n    this.updateModel();\n    this.updateView();\n  }\n\n  private updateModel(): void {\n    this.view.observer.subscribe((valueData: sliderOptions) => {\n      this.model.update(valueData);\n    });\n  }\n\n  private updateView(): void {\n    this.model.observer.subscribe((valueData: sliderOptions) => {\n      this.view.update(valueData);\n    });\n  }\n\n  getParent(): HTMLElement {\n    return this.parent;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class b{constructor(e,n){E.f[0]++,E.s[0]++,this.init(e,n)}init(e,n){E.f[1]++,E.s[1]++,this.model=n,E.s[2]++,this.parent=e,E.s[3]++,this.view=new v(this.parent,this.model.getRange(),this.model.getOrientation(),this.model.getMin(),this.model.getMax(),this.model.getValues(),this.model.getLabels()),E.s[4]++,this.updateModel(),E.s[5]++,this.updateView()}updateModel(){E.f[2]++,E.s[6]++,this.view.observer.subscribe(e=>{E.f[3]++,E.s[7]++,this.model.update(e)})}updateView(){E.f[4]++,E.s[8]++,this.model.observer.subscribe(e=>{E.f[5]++,E.s[9]++,this.view.update(e)})}getParent(){return E.f[6]++,E.s[10]++,this.parent}}A.d(n,"a",(function(){return y}));var M=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",n="45783d229db71a7016991ff42a934cb87df27b41",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",statementMap:{0:{start:{line:6,column:8},end:{line:6,column:44}},1:{start:{line:7,column:8},end:{line:7,column:35}},2:{start:{line:10,column:8},end:{line:10,column:44}},3:{start:{line:11,column:8},end:{line:11,column:59}},4:{start:{line:12,column:8},end:{line:12,column:28}},5:{start:{line:15,column:8},end:{line:17,column:11}},6:{start:{line:16,column:12},end:{line:16,column:47}},7:{start:{line:20,column:8},end:{line:20,column:42}},8:{start:{line:23,column:8},end:{line:23,column:58}},9:{start:{line:26,column:8},end:{line:26,column:36}},10:{start:{line:27,column:8},end:{line:27,column:36}},11:{start:{line:30,column:8},end:{line:30,column:38}},12:{start:{line:33,column:8},end:{line:33,column:37}},13:{start:{line:36,column:8},end:{line:36,column:36}},14:{start:{line:39,column:8},end:{line:39,column:34}},15:{start:{line:42,column:8},end:{line:42,column:43}},16:{start:{line:45,column:8},end:{line:45,column:44}},17:{start:{line:48,column:8},end:{line:48,column:37}},18:{start:{line:51,column:8},end:{line:51,column:35}},19:{start:{line:54,column:8},end:{line:54,column:38}},20:{start:{line:57,column:8},end:{line:57,column:36}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:33},end:{line:8,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:26},end:{line:13,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:19},end:{line:18,column:5}},line:14},3:{name:"(anonymous_3)",decl:{start:{line:15,column:38},end:{line:15,column:39}},loc:{start:{line:15,column:53},end:{line:17,column:9}},line:15},4:{name:"(anonymous_4)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:16},end:{line:21,column:5}},line:19},5:{name:"(anonymous_5)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:16},end:{line:24,column:5}},line:22},6:{name:"(anonymous_6)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:21},end:{line:28,column:5}},line:25},7:{name:"(anonymous_7)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:16},end:{line:31,column:5}},line:29},8:{name:"(anonymous_8)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:22},end:{line:34,column:5}},line:32},9:{name:"(anonymous_9)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:14},end:{line:37,column:5}},line:35},10:{name:"(anonymous_10)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:19},end:{line:40,column:5}},line:38},11:{name:"(anonymous_11)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:21},end:{line:43,column:5}},line:41},12:{name:"(anonymous_12)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:29},end:{line:46,column:5}},line:44},13:{name:"(anonymous_13)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:15},end:{line:49,column:5}},line:47},14:{name:"(anonymous_14)",decl:{start:{line:50,column:4},end:{line:50,column:5}},loc:{start:{line:50,column:20},end:{line:52,column:5}},line:50},15:{name:"(anonymous_15)",decl:{start:{line:53,column:4},end:{line:53,column:5}},loc:{start:{line:53,column:16},end:{line:55,column:5}},line:53},16:{name:"(anonymous_16)",decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:21},end:{line:58,column:5}},line:56}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts"],names:[],mappings:"AAAA,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAC3C,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,OAAO,aAAa,MAAM,sBAAsB,CAAC;AAEjD,MAAM,CAAC,OAAO,OAAO,MAAM;IAOzB,YAAY,MAAmB,EAAE,OAAsB;QAFhD,aAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;QAGpC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEO,IAAI,CAAC,MAAmB,EAAE,OAAsB;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,YAAY;QACV,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACzD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;IACpC,CAAC;IAED,SAAS;QACP,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IACpD,CAAC;IAED,SAAS,CAAC,KAAe;QACvB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;IAED,SAAS,CAAC,MAAgB;QACxB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAED,OAAO,CAAC,KAAa;QACnB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAED,cAAc,CAAC,QAAiB;QAC9B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAED,QAAQ,CAAC,KAAc;QACrB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;IAED,SAAS,CAAC,KAAc;QACtB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;CACF",sourcesContent:["import MainModel from '../model/MainModel';\nimport Presenter from './Presenter';\nimport { sliderOptions } from '../model/sliderOptions';\nimport EventObserver from '../observer/observer';\n\nexport default class Facade {\n  private model!: MainModel;\n\n  private presenter!: Presenter;\n\n  public observer = new EventObserver();\n\n  constructor(parent: HTMLElement, options: sliderOptions) {\n    this.init(parent, options);\n  }\n\n  private init(parent: HTMLElement, options: sliderOptions): void {\n    this.model = new MainModel(options);\n    this.presenter = new Presenter(parent, this.model);\n    this.updateValues();\n  }\n\n  updateValues(): void {\n    this.model.observer.subscribe((valueData: sliderOptions) => {\n      this.observer.broadcast(valueData);\n    });\n  }\n\n  getParent(): HTMLElement {\n    return this.presenter.getParent();\n  }\n\n  getMinMax(): number[] {\n    return [this.model.getMin(), this.model.getMax()];\n  }\n\n  setMinMax(value: number[]): void {\n    this.model.setMin(value[0]);\n    this.model.setMax(value[1]);\n  }\n\n  getValues(): number[] {\n    return this.model.getValues();\n  }\n\n  setValues(values: number[]): void {\n    this.model.setValues(values);\n  }\n\n  getStep(): number {\n    return this.model.getStep();\n  }\n\n  setStep(value: number): void {\n    this.model.setStep(value);\n  }\n\n  getOrientation(): boolean {\n    return this.model.getOrientation();\n  }\n\n  setOrientation(vertical: boolean): void {\n    this.model.setOrientation(vertical);\n  }\n\n  getRange(): boolean {\n    return this.model.getRange();\n  }\n\n  setRange(range: boolean): void {\n    this.model.setRange(range);\n  }\n\n  getLabels(): boolean {\n    return this.model.getLabels();\n  }\n\n  setLabels(label: boolean): void {\n    this.model.setLabels(label);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class y{constructor(e,n){M.f[0]++,M.s[0]++,this.observer=new C,M.s[1]++,this.init(e,n)}init(e,n){M.f[1]++,M.s[2]++,this.model=new u(n),M.s[3]++,this.presenter=new b(e,this.model),M.s[4]++,this.updateValues()}updateValues(){M.f[2]++,M.s[5]++,this.model.observer.subscribe(e=>{M.f[3]++,M.s[6]++,this.observer.broadcast(e)})}getParent(){return M.f[4]++,M.s[7]++,this.presenter.getParent()}getMinMax(){return M.f[5]++,M.s[8]++,[this.model.getMin(),this.model.getMax()]}setMinMax(e){M.f[6]++,M.s[9]++,this.model.setMin(e[0]),M.s[10]++,this.model.setMax(e[1])}getValues(){return M.f[7]++,M.s[11]++,this.model.getValues()}setValues(e){M.f[8]++,M.s[12]++,this.model.setValues(e)}getStep(){return M.f[9]++,M.s[13]++,this.model.getStep()}setStep(e){M.f[10]++,M.s[14]++,this.model.setStep(e)}getOrientation(){return M.f[11]++,M.s[15]++,this.model.getOrientation()}setOrientation(e){M.f[12]++,M.s[16]++,this.model.setOrientation(e)}getRange(){return M.f[13]++,M.s[17]++,this.model.getRange()}setRange(e){M.f[14]++,M.s[18]++,this.model.setRange(e)}getLabels(){return M.f[15]++,M.s[19]++,this.model.getLabels()}setLabels(e){M.f[16]++,M.s[20]++,this.model.setLabels(e)}}},function(e,n,A){"use strict";var t,i=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},l=function(){var e={};return function(n){if(void 0===e[n]){var A=document.querySelector(n);if(window.HTMLIFrameElement&&A instanceof window.HTMLIFrameElement)try{A=A.contentDocument.head}catch(e){A=null}e[n]=A}return e[n]}}(),o=[];function s(e){for(var n=-1,A=0;A<o.length;A++)if(o[A].identifier===e){n=A;break}return n}function a(e,n){for(var A={},t=[],i=0;i<e.length;i++){var l=e[i],a=n.base?l[0]+n.base:l[0],r=A[a]||0,C="".concat(a," ").concat(r);A[a]=r+1;var c=s(C),u={css:l[1],media:l[2],sourceMap:l[3]};-1!==c?(o[c].references++,o[c].updater(u)):o.push({identifier:C,updater:p(u,n),references:1}),t.push(C)}return t}function r(e){var n=document.createElement("style"),t=e.attributes||{};if(void 0===t.nonce){var i=A.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(e){n.setAttribute(e,t[e])})),"function"==typeof e.insert)e.insert(n);else{var o=l(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var C,c=(C=[],function(e,n){return C[e]=n,C.filter(Boolean).join("\n")});function u(e,n,A,t){var i=A?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(e.styleSheet)e.styleSheet.cssText=c(n,i);else{var l=document.createTextNode(i),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(l,o[n]):e.appendChild(l)}}function d(e,n,A){var t=A.css,i=A.media,l=A.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),l&&btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var m=null,h=0;function p(e,n){var A,t,i;if(n.singleton){var l=h++;A=m||(m=r(n)),t=u.bind(null,A,l,!1),i=u.bind(null,A,l,!0)}else A=r(n),t=d.bind(null,A,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(A)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=i());var A=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var t=0;t<A.length;t++){var i=s(A[t]);o[i].references--}for(var l=a(e,n),r=0;r<A.length;r++){var C=s(A[r]);0===o[C].references&&(o[C].updater(),o.splice(C,1))}A=l}}}},function(e,n,A){A(3),e.exports=A(21)},function(e,n,A){"use strict";A.r(n),function(e){A(5),A(7);var n,t,i,l,o,s,a=A(0),r=(n="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",t="b14157655183ea7237d108a4f05e00f8156b3f89",i=new(0,function(){}.constructor)("return this")(),o={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",statementMap:{0:{start:{line:4,column:0},end:{line:9,column:3}},1:{start:{line:5,column:4},end:{line:8,column:6}},2:{start:{line:6,column:23},end:{line:6,column:55}},3:{start:{line:7,column:8},end:{line:7,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:2},end:{line:4,column:3}},loc:{start:{line:4,column:8},end:{line:9,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:5,column:18},end:{line:5,column:19}},loc:{start:{line:5,column:37},end:{line:8,column:5}},line:5}},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts"],names:[],mappings:"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,4BAA4B,CAAC;AACpC,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAExC,CAAC,CAAC,GAAG,EAAE;IACL,CAAC,CAAC,EAAE,CAAC,MAAM,GAAG,UAAU,OAAY;QAClC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC",sourcesContent:["import './scss/main.scss';\nimport './assets/favicons/favicons';\nimport Facade from './presenter/Facade';\n\n$(() => {\n  $.fn.slider = function (options: any): Facade {\n    const facade: Facade = new Facade(this.get(0), options);\n    return facade;\n  };\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(s=i[l="__coverage__"]||(i[l]={}))[n]&&s[n].hash===t?s[n]:(o.hash=t,s[n]=o));r.s[0]++,e(()=>{r.f[0]++,r.s[1]++,e.fn.slider=function(e){r.f[1]++;const n=(r.s[2]++,new a.a(this.get(0),e));return r.s[3]++,n}})}.call(this,A(4))},function(e,n,A){var t;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(n,A){"use strict";"object"==typeof e.exports?e.exports=n.document?A(n,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return A(e)}:A(n)}("undefined"!=typeof window?window:this,(function(A,i){"use strict";var l=[],o=A.document,s=Object.getPrototypeOf,a=l.slice,r=l.concat,C=l.push,c=l.indexOf,u={},d=u.toString,m=u.hasOwnProperty,h=m.toString,p=h.call(Object),f={},I=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},v={type:!0,src:!0,nonce:!0,noModule:!0};function E(e,n,A){var t,i,l=(A=A||o).createElement("script");if(l.text=e,n)for(t in v)(i=n[t]||n.getAttribute&&n.getAttribute(t))&&l.setAttribute(t,i);A.head.appendChild(l).parentNode.removeChild(l)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[d.call(e)]||"object":typeof e}var M=function(e,n){return new M.fn.init(e,n)},y=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function G(e){var n=!!e&&"length"in e&&e.length,A=b(e);return!I(e)&&!g(e)&&("array"===A||0===n||"number"==typeof n&&n>0&&n-1 in e)}M.fn=M.prototype={jquery:"3.4.1",constructor:M,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var n=M.merge(this.constructor(),e);return n.prevObject=this,n},each:function(e){return M.each(this,e)},map:function(e){return this.pushStack(M.map(this,(function(n,A){return e.call(n,A,n)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var n=this.length,A=+e+(e<0?n:0);return this.pushStack(A>=0&&A<n?[this[A]]:[])},end:function(){return this.prevObject||this.constructor()},push:C,sort:l.sort,splice:l.splice},M.extend=M.fn.extend=function(){var e,n,A,t,i,l,o=arguments[0]||{},s=1,a=arguments.length,r=!1;for("boolean"==typeof o&&(r=o,o=arguments[s]||{},s++),"object"==typeof o||I(o)||(o={}),s===a&&(o=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(n in e)t=e[n],"__proto__"!==n&&o!==t&&(r&&t&&(M.isPlainObject(t)||(i=Array.isArray(t)))?(A=o[n],l=i&&!Array.isArray(A)?[]:i||M.isPlainObject(A)?A:{},i=!1,o[n]=M.extend(r,l,t)):void 0!==t&&(o[n]=t));return o},M.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var n,A;return!(!e||"[object Object]"!==d.call(e))&&(!(n=s(e))||"function"==typeof(A=m.call(n,"constructor")&&n.constructor)&&h.call(A)===p)},isEmptyObject:function(e){var n;for(n in e)return!1;return!0},globalEval:function(e,n){E(e,{nonce:n&&n.nonce})},each:function(e,n){var A,t=0;if(G(e))for(A=e.length;t<A&&!1!==n.call(e[t],t,e[t]);t++);else for(t in e)if(!1===n.call(e[t],t,e[t]))break;return e},trim:function(e){return null==e?"":(e+"").replace(y,"")},makeArray:function(e,n){var A=n||[];return null!=e&&(G(Object(e))?M.merge(A,"string"==typeof e?[e]:e):C.call(A,e)),A},inArray:function(e,n,A){return null==n?-1:c.call(n,e,A)},merge:function(e,n){for(var A=+n.length,t=0,i=e.length;t<A;t++)e[i++]=n[t];return e.length=i,e},grep:function(e,n,A){for(var t=[],i=0,l=e.length,o=!A;i<l;i++)!n(e[i],i)!==o&&t.push(e[i]);return t},map:function(e,n,A){var t,i,l=0,o=[];if(G(e))for(t=e.length;l<t;l++)null!=(i=n(e[l],l,A))&&o.push(i);else for(l in e)null!=(i=n(e[l],l,A))&&o.push(i);return r.apply([],o)},guid:1,support:f}),"function"==typeof Symbol&&(M.fn[Symbol.iterator]=l[Symbol.iterator]),M.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,n){u["[object "+n+"]"]=n.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var n,A,t,i,l,o,s,a,r,C,c,u,d,m,h,p,f,I,g,v="sizzle"+1*new Date,E=e.document,b=0,M=0,y=ae(),G=ae(),S=ae(),x=ae(),B=function(e,n){return e===n&&(c=!0),0},O={}.hasOwnProperty,Q=[],K=Q.pop,w=Q.push,D=Q.push,L=Q.slice,k=function(e,n){for(var A=0,t=e.length;A<t;A++)if(e[A]===n)return A;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",U="[\\x20\\t\\r\\n\\f]",T="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",Y="\\["+U+"*("+T+")(?:"+U+"*([*^$|!~]?=)"+U+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+T+"))|)"+U+"*\\]",P=":("+T+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Y+")*)|.*)\\)|)",R=new RegExp(U+"+","g"),V=new RegExp("^"+U+"+|((?:^|[^\\\\])(?:\\\\.)*)"+U+"+$","g"),H=new RegExp("^"+U+"*,"+U+"*"),W=new RegExp("^"+U+"*([>+~]|"+U+")"+U+"*"),j=new RegExp(U+"|>"),N=new RegExp(P),F=new RegExp("^"+T+"$"),q={ID:new RegExp("^#("+T+")"),CLASS:new RegExp("^\\.("+T+")"),TAG:new RegExp("^("+T+"|[*])"),ATTR:new RegExp("^"+Y),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+U+"*(even|odd|(([+-]|)(\\d*)n|)"+U+"*(?:([+-]|)"+U+"*(\\d+)|))"+U+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+U+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+U+"*((?:-\\d)?\\d*)"+U+"*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,ne=new RegExp("\\\\([\\da-f]{1,6}"+U+"?|("+U+")|.)","ig"),Ae=function(e,n,A){var t="0x"+n-65536;return t!=t||A?n:t<0?String.fromCharCode(t+65536):String.fromCharCode(t>>10|55296,1023&t|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,n){return n?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},le=function(){u()},oe=ve((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{D.apply(Q=L.call(E.childNodes),E.childNodes),Q[E.childNodes.length].nodeType}catch(e){D={apply:Q.length?function(e,n){w.apply(e,L.call(n))}:function(e,n){for(var A=e.length,t=0;e[A++]=n[t++];);e.length=A-1}}}function se(e,n,t,i){var l,s,r,C,c,m,f,I=n&&n.ownerDocument,b=n?n.nodeType:9;if(t=t||[],"string"!=typeof e||!e||1!==b&&9!==b&&11!==b)return t;if(!i&&((n?n.ownerDocument||n:E)!==d&&u(n),n=n||d,h)){if(11!==b&&(c=Z.exec(e)))if(l=c[1]){if(9===b){if(!(r=n.getElementById(l)))return t;if(r.id===l)return t.push(r),t}else if(I&&(r=I.getElementById(l))&&g(n,r)&&r.id===l)return t.push(r),t}else{if(c[2])return D.apply(t,n.getElementsByTagName(e)),t;if((l=c[3])&&A.getElementsByClassName&&n.getElementsByClassName)return D.apply(t,n.getElementsByClassName(l)),t}if(A.qsa&&!x[e+" "]&&(!p||!p.test(e))&&(1!==b||"object"!==n.nodeName.toLowerCase())){if(f=e,I=n,1===b&&j.test(e)){for((C=n.getAttribute("id"))?C=C.replace(te,ie):n.setAttribute("id",C=v),s=(m=o(e)).length;s--;)m[s]="#"+C+" "+ge(m[s]);f=m.join(","),I=ee.test(e)&&fe(n.parentNode)||n}try{return D.apply(t,I.querySelectorAll(f)),t}catch(n){x(e,!0)}finally{C===v&&n.removeAttribute("id")}}}return a(e.replace(V,"$1"),n,t,i)}function ae(){var e=[];return function n(A,i){return e.push(A+" ")>t.cacheLength&&delete n[e.shift()],n[A+" "]=i}}function re(e){return e[v]=!0,e}function Ce(e){var n=d.createElement("fieldset");try{return!!e(n)}catch(e){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function ce(e,n){for(var A=e.split("|"),i=A.length;i--;)t.attrHandle[A[i]]=n}function ue(e,n){var A=n&&e,t=A&&1===e.nodeType&&1===n.nodeType&&e.sourceIndex-n.sourceIndex;if(t)return t;if(A)for(;A=A.nextSibling;)if(A===n)return-1;return e?1:-1}function de(e){return function(n){return"input"===n.nodeName.toLowerCase()&&n.type===e}}function me(e){return function(n){var A=n.nodeName.toLowerCase();return("input"===A||"button"===A)&&n.type===e}}function he(e){return function(n){return"form"in n?n.parentNode&&!1===n.disabled?"label"in n?"label"in n.parentNode?n.parentNode.disabled===e:n.disabled===e:n.isDisabled===e||n.isDisabled!==!e&&oe(n)===e:n.disabled===e:"label"in n&&n.disabled===e}}function pe(e){return re((function(n){return n=+n,re((function(A,t){for(var i,l=e([],A.length,n),o=l.length;o--;)A[i=l[o]]&&(A[i]=!(t[i]=A[i]))}))}))}function fe(e){return e&&void 0!==e.getElementsByTagName&&e}for(n in A=se.support={},l=se.isXML=function(e){var n=e.namespaceURI,A=(e.ownerDocument||e).documentElement;return!z.test(n||A&&A.nodeName||"HTML")},u=se.setDocument=function(e){var n,i,o=e?e.ownerDocument||e:E;return o!==d&&9===o.nodeType&&o.documentElement?(m=(d=o).documentElement,h=!l(d),E!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",le,!1):i.attachEvent&&i.attachEvent("onunload",le)),A.attributes=Ce((function(e){return e.className="i",!e.getAttribute("className")})),A.getElementsByTagName=Ce((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),A.getElementsByClassName=J.test(d.getElementsByClassName),A.getById=Ce((function(e){return m.appendChild(e).id=v,!d.getElementsByName||!d.getElementsByName(v).length})),A.getById?(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){return e.getAttribute("id")===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&h){var A=n.getElementById(e);return A?[A]:[]}}):(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){var A=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return A&&A.value===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&h){var A,t,i,l=n.getElementById(e);if(l){if((A=l.getAttributeNode("id"))&&A.value===e)return[l];for(i=n.getElementsByName(e),t=0;l=i[t++];)if((A=l.getAttributeNode("id"))&&A.value===e)return[l]}return[]}}),t.find.TAG=A.getElementsByTagName?function(e,n){return void 0!==n.getElementsByTagName?n.getElementsByTagName(e):A.qsa?n.querySelectorAll(e):void 0}:function(e,n){var A,t=[],i=0,l=n.getElementsByTagName(e);if("*"===e){for(;A=l[i++];)1===A.nodeType&&t.push(A);return t}return l},t.find.CLASS=A.getElementsByClassName&&function(e,n){if(void 0!==n.getElementsByClassName&&h)return n.getElementsByClassName(e)},f=[],p=[],(A.qsa=J.test(d.querySelectorAll))&&(Ce((function(e){m.appendChild(e).innerHTML="<a id='"+v+"'></a><select id='"+v+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+U+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+U+"*(?:value|"+_+")"),e.querySelectorAll("[id~="+v+"-]").length||p.push("~="),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+v+"+*").length||p.push(".#.+[+~]")})),Ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var n=d.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+U+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(A.matchesSelector=J.test(I=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&Ce((function(e){A.disconnectedMatch=I.call(e,"*"),I.call(e,"[s!='']:x"),f.push("!=",P)})),p=p.length&&new RegExp(p.join("|")),f=f.length&&new RegExp(f.join("|")),n=J.test(m.compareDocumentPosition),g=n||J.test(m.contains)?function(e,n){var A=9===e.nodeType?e.documentElement:e,t=n&&n.parentNode;return e===t||!(!t||1!==t.nodeType||!(A.contains?A.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,n){if(n)for(;n=n.parentNode;)if(n===e)return!0;return!1},B=n?function(e,n){if(e===n)return c=!0,0;var t=!e.compareDocumentPosition-!n.compareDocumentPosition;return t||(1&(t=(e.ownerDocument||e)===(n.ownerDocument||n)?e.compareDocumentPosition(n):1)||!A.sortDetached&&n.compareDocumentPosition(e)===t?e===d||e.ownerDocument===E&&g(E,e)?-1:n===d||n.ownerDocument===E&&g(E,n)?1:C?k(C,e)-k(C,n):0:4&t?-1:1)}:function(e,n){if(e===n)return c=!0,0;var A,t=0,i=e.parentNode,l=n.parentNode,o=[e],s=[n];if(!i||!l)return e===d?-1:n===d?1:i?-1:l?1:C?k(C,e)-k(C,n):0;if(i===l)return ue(e,n);for(A=e;A=A.parentNode;)o.unshift(A);for(A=n;A=A.parentNode;)s.unshift(A);for(;o[t]===s[t];)t++;return t?ue(o[t],s[t]):o[t]===E?-1:s[t]===E?1:0},d):d},se.matches=function(e,n){return se(e,null,null,n)},se.matchesSelector=function(e,n){if((e.ownerDocument||e)!==d&&u(e),A.matchesSelector&&h&&!x[n+" "]&&(!f||!f.test(n))&&(!p||!p.test(n)))try{var t=I.call(e,n);if(t||A.disconnectedMatch||e.document&&11!==e.document.nodeType)return t}catch(e){x(n,!0)}return se(n,d,null,[e]).length>0},se.contains=function(e,n){return(e.ownerDocument||e)!==d&&u(e),g(e,n)},se.attr=function(e,n){(e.ownerDocument||e)!==d&&u(e);var i=t.attrHandle[n.toLowerCase()],l=i&&O.call(t.attrHandle,n.toLowerCase())?i(e,n,!h):void 0;return void 0!==l?l:A.attributes||!h?e.getAttribute(n):(l=e.getAttributeNode(n))&&l.specified?l.value:null},se.escape=function(e){return(e+"").replace(te,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var n,t=[],i=0,l=0;if(c=!A.detectDuplicates,C=!A.sortStable&&e.slice(0),e.sort(B),c){for(;n=e[l++];)n===e[l]&&(i=t.push(l));for(;i--;)e.splice(t[i],1)}return C=null,e},i=se.getText=function(e){var n,A="",t=0,l=e.nodeType;if(l){if(1===l||9===l||11===l){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)A+=i(e)}else if(3===l||4===l)return e.nodeValue}else for(;n=e[t++];)A+=i(n);return A},(t=se.selectors={cacheLength:50,createPseudo:re,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,Ae),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,Ae),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var n,A=!e[6]&&e[2];return q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":A&&N.test(A)&&(n=o(A,!0))&&(n=A.indexOf(")",A.length-n)-A.length)&&(e[0]=e[0].slice(0,n),e[2]=A.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var n=e.replace(ne,Ae).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===n}},CLASS:function(e){var n=y[e+" "];return n||(n=new RegExp("(^|"+U+")"+e+"("+U+"|$)"))&&y(e,(function(e){return n.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,n,A){return function(t){var i=se.attr(t,e);return null==i?"!="===n:!n||(i+="","="===n?i===A:"!="===n?i!==A:"^="===n?A&&0===i.indexOf(A):"*="===n?A&&i.indexOf(A)>-1:"$="===n?A&&i.slice(-A.length)===A:"~="===n?(" "+i.replace(R," ")+" ").indexOf(A)>-1:"|="===n&&(i===A||i.slice(0,A.length+1)===A+"-"))}},CHILD:function(e,n,A,t,i){var l="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===n;return 1===t&&0===i?function(e){return!!e.parentNode}:function(n,A,a){var r,C,c,u,d,m,h=l!==o?"nextSibling":"previousSibling",p=n.parentNode,f=s&&n.nodeName.toLowerCase(),I=!a&&!s,g=!1;if(p){if(l){for(;h;){for(u=n;u=u[h];)if(s?u.nodeName.toLowerCase()===f:1===u.nodeType)return!1;m=h="only"===e&&!m&&"nextSibling"}return!0}if(m=[o?p.firstChild:p.lastChild],o&&I){for(g=(d=(r=(C=(c=(u=p)[v]||(u[v]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===b&&r[1])&&r[2],u=d&&p.childNodes[d];u=++d&&u&&u[h]||(g=d=0)||m.pop();)if(1===u.nodeType&&++g&&u===n){C[e]=[b,d,g];break}}else if(I&&(g=d=(r=(C=(c=(u=n)[v]||(u[v]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===b&&r[1]),!1===g)for(;(u=++d&&u&&u[h]||(g=d=0)||m.pop())&&((s?u.nodeName.toLowerCase()!==f:1!==u.nodeType)||!++g||(I&&((C=(c=u[v]||(u[v]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]=[b,g]),u!==n)););return(g-=i)===t||g%t==0&&g/t>=0}}},PSEUDO:function(e,n){var A,i=t.pseudos[e]||t.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[v]?i(n):i.length>1?(A=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?re((function(e,A){for(var t,l=i(e,n),o=l.length;o--;)e[t=k(e,l[o])]=!(A[t]=l[o])})):function(e){return i(e,0,A)}):i}},pseudos:{not:re((function(e){var n=[],A=[],t=s(e.replace(V,"$1"));return t[v]?re((function(e,n,A,i){for(var l,o=t(e,null,i,[]),s=e.length;s--;)(l=o[s])&&(e[s]=!(n[s]=l))})):function(e,i,l){return n[0]=e,t(n,null,l,A),n[0]=null,!A.pop()}})),has:re((function(e){return function(n){return se(e,n).length>0}})),contains:re((function(e){return e=e.replace(ne,Ae),function(n){return(n.textContent||i(n)).indexOf(e)>-1}})),lang:re((function(e){return F.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(ne,Ae).toLowerCase(),function(n){var A;do{if(A=h?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return(A=A.toLowerCase())===e||0===A.indexOf(e+"-")}while((n=n.parentNode)&&1===n.nodeType);return!1}})),target:function(n){var A=e.location&&e.location.hash;return A&&A.slice(1)===n.id},root:function(e){return e===m},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&!!e.checked||"option"===n&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&"button"===e.type||"button"===n},text:function(e){var n;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(n=e.getAttribute("type"))||"text"===n.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,n){return[n-1]})),eq:pe((function(e,n,A){return[A<0?A+n:A]})),even:pe((function(e,n){for(var A=0;A<n;A+=2)e.push(A);return e})),odd:pe((function(e,n){for(var A=1;A<n;A+=2)e.push(A);return e})),lt:pe((function(e,n,A){for(var t=A<0?A+n:A>n?n:A;--t>=0;)e.push(t);return e})),gt:pe((function(e,n,A){for(var t=A<0?A+n:A;++t<n;)e.push(t);return e}))}}).pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[n]=de(n);for(n in{submit:!0,reset:!0})t.pseudos[n]=me(n);function Ie(){}function ge(e){for(var n=0,A=e.length,t="";n<A;n++)t+=e[n].value;return t}function ve(e,n,A){var t=n.dir,i=n.next,l=i||t,o=A&&"parentNode"===l,s=M++;return n.first?function(n,A,i){for(;n=n[t];)if(1===n.nodeType||o)return e(n,A,i);return!1}:function(n,A,a){var r,C,c,u=[b,s];if(a){for(;n=n[t];)if((1===n.nodeType||o)&&e(n,A,a))return!0}else for(;n=n[t];)if(1===n.nodeType||o)if(C=(c=n[v]||(n[v]={}))[n.uniqueID]||(c[n.uniqueID]={}),i&&i===n.nodeName.toLowerCase())n=n[t]||n;else{if((r=C[l])&&r[0]===b&&r[1]===s)return u[2]=r[2];if(C[l]=u,u[2]=e(n,A,a))return!0}return!1}}function Ee(e){return e.length>1?function(n,A,t){for(var i=e.length;i--;)if(!e[i](n,A,t))return!1;return!0}:e[0]}function be(e,n,A,t,i){for(var l,o=[],s=0,a=e.length,r=null!=n;s<a;s++)(l=e[s])&&(A&&!A(l,t,i)||(o.push(l),r&&n.push(s)));return o}function Me(e,n,A,t,i,l){return t&&!t[v]&&(t=Me(t)),i&&!i[v]&&(i=Me(i,l)),re((function(l,o,s,a){var r,C,c,u=[],d=[],m=o.length,h=l||function(e,n,A){for(var t=0,i=n.length;t<i;t++)se(e,n[t],A);return A}(n||"*",s.nodeType?[s]:s,[]),p=!e||!l&&n?h:be(h,u,e,s,a),f=A?i||(l?e:m||t)?[]:o:p;if(A&&A(p,f,s,a),t)for(r=be(f,d),t(r,[],s,a),C=r.length;C--;)(c=r[C])&&(f[d[C]]=!(p[d[C]]=c));if(l){if(i||e){if(i){for(r=[],C=f.length;C--;)(c=f[C])&&r.push(p[C]=c);i(null,f=[],r,a)}for(C=f.length;C--;)(c=f[C])&&(r=i?k(l,c):u[C])>-1&&(l[r]=!(o[r]=c))}}else f=be(f===o?f.splice(m,f.length):f),i?i(null,o,f,a):D.apply(o,f)}))}function ye(e){for(var n,A,i,l=e.length,o=t.relative[e[0].type],s=o||t.relative[" "],a=o?1:0,C=ve((function(e){return e===n}),s,!0),c=ve((function(e){return k(n,e)>-1}),s,!0),u=[function(e,A,t){var i=!o&&(t||A!==r)||((n=A).nodeType?C(e,A,t):c(e,A,t));return n=null,i}];a<l;a++)if(A=t.relative[e[a].type])u=[ve(Ee(u),A)];else{if((A=t.filter[e[a].type].apply(null,e[a].matches))[v]){for(i=++a;i<l&&!t.relative[e[i].type];i++);return Me(a>1&&Ee(u),a>1&&ge(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(V,"$1"),A,a<i&&ye(e.slice(a,i)),i<l&&ye(e=e.slice(i)),i<l&&ge(e))}u.push(A)}return Ee(u)}return Ie.prototype=t.filters=t.pseudos,t.setFilters=new Ie,o=se.tokenize=function(e,n){var A,i,l,o,s,a,r,C=G[e+" "];if(C)return n?0:C.slice(0);for(s=e,a=[],r=t.preFilter;s;){for(o in A&&!(i=H.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(l=[])),A=!1,(i=W.exec(s))&&(A=i.shift(),l.push({value:A,type:i[0].replace(V," ")}),s=s.slice(A.length)),t.filter)!(i=q[o].exec(s))||r[o]&&!(i=r[o](i))||(A=i.shift(),l.push({value:A,type:o,matches:i}),s=s.slice(A.length));if(!A)break}return n?s.length:s?se.error(e):G(e,a).slice(0)},s=se.compile=function(e,n){var A,i=[],l=[],s=S[e+" "];if(!s){for(n||(n=o(e)),A=n.length;A--;)(s=ye(n[A]))[v]?i.push(s):l.push(s);(s=S(e,function(e,n){var A=n.length>0,i=e.length>0,l=function(l,o,s,a,C){var c,m,p,f=0,I="0",g=l&&[],v=[],E=r,M=l||i&&t.find.TAG("*",C),y=b+=null==E?1:Math.random()||.1,G=M.length;for(C&&(r=o===d||o||C);I!==G&&null!=(c=M[I]);I++){if(i&&c){for(m=0,o||c.ownerDocument===d||(u(c),s=!h);p=e[m++];)if(p(c,o||d,s)){a.push(c);break}C&&(b=y)}A&&((c=!p&&c)&&f--,l&&g.push(c))}if(f+=I,A&&I!==f){for(m=0;p=n[m++];)p(g,v,o,s);if(l){if(f>0)for(;I--;)g[I]||v[I]||(v[I]=K.call(a));v=be(v)}D.apply(a,v),C&&!l&&v.length>0&&f+n.length>1&&se.uniqueSort(a)}return C&&(b=y,r=E),g};return A?re(l):l}(l,i))).selector=e}return s},a=se.select=function(e,n,A,i){var l,a,r,C,c,u="function"==typeof e&&e,d=!i&&o(e=u.selector||e);if(A=A||[],1===d.length){if((a=d[0]=d[0].slice(0)).length>2&&"ID"===(r=a[0]).type&&9===n.nodeType&&h&&t.relative[a[1].type]){if(!(n=(t.find.ID(r.matches[0].replace(ne,Ae),n)||[])[0]))return A;u&&(n=n.parentNode),e=e.slice(a.shift().value.length)}for(l=q.needsContext.test(e)?0:a.length;l--&&(r=a[l],!t.relative[C=r.type]);)if((c=t.find[C])&&(i=c(r.matches[0].replace(ne,Ae),ee.test(a[0].type)&&fe(n.parentNode)||n))){if(a.splice(l,1),!(e=i.length&&ge(a)))return D.apply(A,i),A;break}}return(u||s(e,d))(i,n,!h,A,!n||ee.test(e)&&fe(n.parentNode)||n),A},A.sortStable=v.split("").sort(B).join("")===v,A.detectDuplicates=!!c,u(),A.sortDetached=Ce((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),Ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,n,A){if(!A)return e.getAttribute(n,"type"===n.toLowerCase()?1:2)})),A.attributes&&Ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,n,A){if(!A&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),Ce((function(e){return null==e.getAttribute("disabled")}))||ce(_,(function(e,n,A){var t;if(!A)return!0===e[n]?n.toLowerCase():(t=e.getAttributeNode(n))&&t.specified?t.value:null})),se}(A);M.find=S,M.expr=S.selectors,M.expr[":"]=M.expr.pseudos,M.uniqueSort=M.unique=S.uniqueSort,M.text=S.getText,M.isXMLDoc=S.isXML,M.contains=S.contains,M.escapeSelector=S.escape;var x=function(e,n,A){for(var t=[],i=void 0!==A;(e=e[n])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&M(e).is(A))break;t.push(e)}return t},B=function(e,n){for(var A=[];e;e=e.nextSibling)1===e.nodeType&&e!==n&&A.push(e);return A},O=M.expr.match.needsContext;function Q(e,n){return e.nodeName&&e.nodeName.toLowerCase()===n.toLowerCase()}var K=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function w(e,n,A){return I(n)?M.grep(e,(function(e,t){return!!n.call(e,t,e)!==A})):n.nodeType?M.grep(e,(function(e){return e===n!==A})):"string"!=typeof n?M.grep(e,(function(e){return c.call(n,e)>-1!==A})):M.filter(n,e,A)}M.filter=function(e,n,A){var t=n[0];return A&&(e=":not("+e+")"),1===n.length&&1===t.nodeType?M.find.matchesSelector(t,e)?[t]:[]:M.find.matches(e,M.grep(n,(function(e){return 1===e.nodeType})))},M.fn.extend({find:function(e){var n,A,t=this.length,i=this;if("string"!=typeof e)return this.pushStack(M(e).filter((function(){for(n=0;n<t;n++)if(M.contains(i[n],this))return!0})));for(A=this.pushStack([]),n=0;n<t;n++)M.find(e,i[n],A);return t>1?M.uniqueSort(A):A},filter:function(e){return this.pushStack(w(this,e||[],!1))},not:function(e){return this.pushStack(w(this,e||[],!0))},is:function(e){return!!w(this,"string"==typeof e&&O.test(e)?M(e):e||[],!1).length}});var D,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(M.fn.init=function(e,n,A){var t,i;if(!e)return this;if(A=A||D,"string"==typeof e){if(!(t="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!t[1]&&n)return!n||n.jquery?(n||A).find(e):this.constructor(n).find(e);if(t[1]){if(n=n instanceof M?n[0]:n,M.merge(this,M.parseHTML(t[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),K.test(t[1])&&M.isPlainObject(n))for(t in n)I(this[t])?this[t](n[t]):this.attr(t,n[t]);return this}return(i=o.getElementById(t[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):I(e)?void 0!==A.ready?A.ready(e):e(M):M.makeArray(e,this)}).prototype=M.fn,D=M(o);var k=/^(?:parents|prev(?:Until|All))/,_={children:!0,contents:!0,next:!0,prev:!0};function U(e,n){for(;(e=e[n])&&1!==e.nodeType;);return e}M.fn.extend({has:function(e){var n=M(e,this),A=n.length;return this.filter((function(){for(var e=0;e<A;e++)if(M.contains(this,n[e]))return!0}))},closest:function(e,n){var A,t=0,i=this.length,l=[],o="string"!=typeof e&&M(e);if(!O.test(e))for(;t<i;t++)for(A=this[t];A&&A!==n;A=A.parentNode)if(A.nodeType<11&&(o?o.index(A)>-1:1===A.nodeType&&M.find.matchesSelector(A,e))){l.push(A);break}return this.pushStack(l.length>1?M.uniqueSort(l):l)},index:function(e){return e?"string"==typeof e?c.call(M(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,n){return this.pushStack(M.uniqueSort(M.merge(this.get(),M(e,n))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),M.each({parent:function(e){var n=e.parentNode;return n&&11!==n.nodeType?n:null},parents:function(e){return x(e,"parentNode")},parentsUntil:function(e,n,A){return x(e,"parentNode",A)},next:function(e){return U(e,"nextSibling")},prev:function(e){return U(e,"previousSibling")},nextAll:function(e){return x(e,"nextSibling")},prevAll:function(e){return x(e,"previousSibling")},nextUntil:function(e,n,A){return x(e,"nextSibling",A)},prevUntil:function(e,n,A){return x(e,"previousSibling",A)},siblings:function(e){return B((e.parentNode||{}).firstChild,e)},children:function(e){return B(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(Q(e,"template")&&(e=e.content||e),M.merge([],e.childNodes))}},(function(e,n){M.fn[e]=function(A,t){var i=M.map(this,n,A);return"Until"!==e.slice(-5)&&(t=A),t&&"string"==typeof t&&(i=M.filter(t,i)),this.length>1&&(_[e]||M.uniqueSort(i),k.test(e)&&i.reverse()),this.pushStack(i)}}));var T=/[^\x20\t\r\n\f]+/g;function Y(e){return e}function P(e){throw e}function R(e,n,A,t){var i;try{e&&I(i=e.promise)?i.call(e).done(n).fail(A):e&&I(i=e.then)?i.call(e,n,A):n.apply(void 0,[e].slice(t))}catch(e){A.apply(void 0,[e])}}M.Callbacks=function(e){e="string"==typeof e?function(e){var n={};return M.each(e.match(T)||[],(function(e,A){n[A]=!0})),n}(e):M.extend({},e);var n,A,t,i,l=[],o=[],s=-1,a=function(){for(i=i||e.once,t=n=!0;o.length;s=-1)for(A=o.shift();++s<l.length;)!1===l[s].apply(A[0],A[1])&&e.stopOnFalse&&(s=l.length,A=!1);e.memory||(A=!1),n=!1,i&&(l=A?[]:"")},r={add:function(){return l&&(A&&!n&&(s=l.length-1,o.push(A)),function n(A){M.each(A,(function(A,t){I(t)?e.unique&&r.has(t)||l.push(t):t&&t.length&&"string"!==b(t)&&n(t)}))}(arguments),A&&!n&&a()),this},remove:function(){return M.each(arguments,(function(e,n){for(var A;(A=M.inArray(n,l,A))>-1;)l.splice(A,1),A<=s&&s--})),this},has:function(e){return e?M.inArray(e,l)>-1:l.length>0},empty:function(){return l&&(l=[]),this},disable:function(){return i=o=[],l=A="",this},disabled:function(){return!l},lock:function(){return i=o=[],A||n||(l=A=""),this},locked:function(){return!!i},fireWith:function(e,A){return i||(A=[e,(A=A||[]).slice?A.slice():A],o.push(A),n||a()),this},fire:function(){return r.fireWith(this,arguments),this},fired:function(){return!!t}};return r},M.extend({Deferred:function(e){var n=[["notify","progress",M.Callbacks("memory"),M.Callbacks("memory"),2],["resolve","done",M.Callbacks("once memory"),M.Callbacks("once memory"),0,"resolved"],["reject","fail",M.Callbacks("once memory"),M.Callbacks("once memory"),1,"rejected"]],t="pending",i={state:function(){return t},always:function(){return l.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return M.Deferred((function(A){M.each(n,(function(n,t){var i=I(e[t[4]])&&e[t[4]];l[t[1]]((function(){var e=i&&i.apply(this,arguments);e&&I(e.promise)?e.promise().progress(A.notify).done(A.resolve).fail(A.reject):A[t[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,t,i){var l=0;function o(e,n,t,i){return function(){var s=this,a=arguments,r=function(){var A,r;if(!(e<l)){if((A=t.apply(s,a))===n.promise())throw new TypeError("Thenable self-resolution");r=A&&("object"==typeof A||"function"==typeof A)&&A.then,I(r)?i?r.call(A,o(l,n,Y,i),o(l,n,P,i)):(l++,r.call(A,o(l,n,Y,i),o(l,n,P,i),o(l,n,Y,n.notifyWith))):(t!==Y&&(s=void 0,a=[A]),(i||n.resolveWith)(s,a))}},C=i?r:function(){try{r()}catch(A){M.Deferred.exceptionHook&&M.Deferred.exceptionHook(A,C.stackTrace),e+1>=l&&(t!==P&&(s=void 0,a=[A]),n.rejectWith(s,a))}};e?C():(M.Deferred.getStackHook&&(C.stackTrace=M.Deferred.getStackHook()),A.setTimeout(C))}}return M.Deferred((function(A){n[0][3].add(o(0,A,I(i)?i:Y,A.notifyWith)),n[1][3].add(o(0,A,I(e)?e:Y)),n[2][3].add(o(0,A,I(t)?t:P))})).promise()},promise:function(e){return null!=e?M.extend(e,i):i}},l={};return M.each(n,(function(e,A){var o=A[2],s=A[5];i[A[1]]=o.add,s&&o.add((function(){t=s}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),o.add(A[3].fire),l[A[0]]=function(){return l[A[0]+"With"](this===l?void 0:this,arguments),this},l[A[0]+"With"]=o.fireWith})),i.promise(l),e&&e.call(l,l),l},when:function(e){var n=arguments.length,A=n,t=Array(A),i=a.call(arguments),l=M.Deferred(),o=function(e){return function(A){t[e]=this,i[e]=arguments.length>1?a.call(arguments):A,--n||l.resolveWith(t,i)}};if(n<=1&&(R(e,l.done(o(A)).resolve,l.reject,!n),"pending"===l.state()||I(i[A]&&i[A].then)))return l.then();for(;A--;)R(i[A],o(A),l.reject);return l.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;M.Deferred.exceptionHook=function(e,n){A.console&&A.console.warn&&e&&V.test(e.name)&&A.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},M.readyException=function(e){A.setTimeout((function(){throw e}))};var H=M.Deferred();function W(){o.removeEventListener("DOMContentLoaded",W),A.removeEventListener("load",W),M.ready()}M.fn.ready=function(e){return H.then(e).catch((function(e){M.readyException(e)})),this},M.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--M.readyWait:M.isReady)||(M.isReady=!0,!0!==e&&--M.readyWait>0||H.resolveWith(o,[M]))}}),M.ready.then=H.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?A.setTimeout(M.ready):(o.addEventListener("DOMContentLoaded",W),A.addEventListener("load",W));var j=function(e,n,A,t,i,l,o){var s=0,a=e.length,r=null==A;if("object"===b(A))for(s in i=!0,A)j(e,n,s,A[s],!0,l,o);else if(void 0!==t&&(i=!0,I(t)||(o=!0),r&&(o?(n.call(e,t),n=null):(r=n,n=function(e,n,A){return r.call(M(e),A)})),n))for(;s<a;s++)n(e[s],A,o?t:t.call(e[s],s,n(e[s],A)));return i?e:r?n.call(e):a?n(e[0],A):l},N=/^-ms-/,F=/-([a-z])/g;function q(e,n){return n.toUpperCase()}function z(e){return e.replace(N,"ms-").replace(F,q)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=M.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var n=e[this.expando];return n||(n={},$(e)&&(e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,configurable:!0}))),n},set:function(e,n,A){var t,i=this.cache(e);if("string"==typeof n)i[z(n)]=A;else for(t in n)i[z(t)]=n[t];return i},get:function(e,n){return void 0===n?this.cache(e):e[this.expando]&&e[this.expando][z(n)]},access:function(e,n,A){return void 0===n||n&&"string"==typeof n&&void 0===A?this.get(e,n):(this.set(e,n,A),void 0!==A?A:n)},remove:function(e,n){var A,t=e[this.expando];if(void 0!==t){if(void 0!==n){A=(n=Array.isArray(n)?n.map(z):(n=z(n))in t?[n]:n.match(T)||[]).length;for(;A--;)delete t[n[A]]}(void 0===n||M.isEmptyObject(t))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var n=e[this.expando];return void 0!==n&&!M.isEmptyObject(n)}};var J=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ne=/[A-Z]/g;function Ae(e,n,A){var t;if(void 0===A&&1===e.nodeType)if(t="data-"+n.replace(ne,"-$&").toLowerCase(),"string"==typeof(A=e.getAttribute(t))){try{A=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(A)}catch(e){}Z.set(e,n,A)}else A=void 0;return A}M.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,n,A){return Z.access(e,n,A)},removeData:function(e,n){Z.remove(e,n)},_data:function(e,n,A){return J.access(e,n,A)},_removeData:function(e,n){J.remove(e,n)}}),M.fn.extend({data:function(e,n){var A,t,i,l=this[0],o=l&&l.attributes;if(void 0===e){if(this.length&&(i=Z.get(l),1===l.nodeType&&!J.get(l,"hasDataAttrs"))){for(A=o.length;A--;)o[A]&&0===(t=o[A].name).indexOf("data-")&&(t=z(t.slice(5)),Ae(l,t,i[t]));J.set(l,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):j(this,(function(n){var A;if(l&&void 0===n)return void 0!==(A=Z.get(l,e))?A:void 0!==(A=Ae(l,e))?A:void 0;this.each((function(){Z.set(this,e,n)}))}),null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),M.extend({queue:function(e,n,A){var t;if(e)return n=(n||"fx")+"queue",t=J.get(e,n),A&&(!t||Array.isArray(A)?t=J.access(e,n,M.makeArray(A)):t.push(A)),t||[]},dequeue:function(e,n){n=n||"fx";var A=M.queue(e,n),t=A.length,i=A.shift(),l=M._queueHooks(e,n);"inprogress"===i&&(i=A.shift(),t--),i&&("fx"===n&&A.unshift("inprogress"),delete l.stop,i.call(e,(function(){M.dequeue(e,n)}),l)),!t&&l&&l.empty.fire()},_queueHooks:function(e,n){var A=n+"queueHooks";return J.get(e,A)||J.access(e,A,{empty:M.Callbacks("once memory").add((function(){J.remove(e,[n+"queue",A])}))})}}),M.fn.extend({queue:function(e,n){var A=2;return"string"!=typeof e&&(n=e,e="fx",A--),arguments.length<A?M.queue(this[0],e):void 0===n?this:this.each((function(){var A=M.queue(this,e,n);M._queueHooks(this,e),"fx"===e&&"inprogress"!==A[0]&&M.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){M.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var A,t=1,i=M.Deferred(),l=this,o=this.length,s=function(){--t||i.resolveWith(l,[l])};for("string"!=typeof e&&(n=e,e=void 0),e=e||"fx";o--;)(A=J.get(l[o],e+"queueHooks"))&&A.empty&&(t++,A.empty.add(s));return s(),i.promise(n)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),le=["Top","Right","Bottom","Left"],oe=o.documentElement,se=function(e){return M.contains(e.ownerDocument,e)},ae={composed:!0};oe.getRootNode&&(se=function(e){return M.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var re=function(e,n){return"none"===(e=n||e).style.display||""===e.style.display&&se(e)&&"none"===M.css(e,"display")},Ce=function(e,n,A,t){var i,l,o={};for(l in n)o[l]=e.style[l],e.style[l]=n[l];for(l in i=A.apply(e,t||[]),n)e.style[l]=o[l];return i};function ce(e,n,A,t){var i,l,o=20,s=t?function(){return t.cur()}:function(){return M.css(e,n,"")},a=s(),r=A&&A[3]||(M.cssNumber[n]?"":"px"),C=e.nodeType&&(M.cssNumber[n]||"px"!==r&&+a)&&ie.exec(M.css(e,n));if(C&&C[3]!==r){for(a/=2,r=r||C[3],C=+a||1;o--;)M.style(e,n,C+r),(1-l)*(1-(l=s()/a||.5))<=0&&(o=0),C/=l;C*=2,M.style(e,n,C+r),A=A||[]}return A&&(C=+C||+a||0,i=A[1]?C+(A[1]+1)*A[2]:+A[2],t&&(t.unit=r,t.start=C,t.end=i)),i}var ue={};function de(e){var n,A=e.ownerDocument,t=e.nodeName,i=ue[t];return i||(n=A.body.appendChild(A.createElement(t)),i=M.css(n,"display"),n.parentNode.removeChild(n),"none"===i&&(i="block"),ue[t]=i,i)}function me(e,n){for(var A,t,i=[],l=0,o=e.length;l<o;l++)(t=e[l]).style&&(A=t.style.display,n?("none"===A&&(i[l]=J.get(t,"display")||null,i[l]||(t.style.display="")),""===t.style.display&&re(t)&&(i[l]=de(t))):"none"!==A&&(i[l]="none",J.set(t,"display",A)));for(l=0;l<o;l++)null!=i[l]&&(e[l].style.display=i[l]);return e}M.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){re(this)?M(this).show():M(this).hide()}))}});var he=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,Ie={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,n){var A;return A=void 0!==e.getElementsByTagName?e.getElementsByTagName(n||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(n||"*"):[],void 0===n||n&&Q(e,n)?M.merge([e],A):A}function ve(e,n){for(var A=0,t=e.length;A<t;A++)J.set(e[A],"globalEval",!n||J.get(n[A],"globalEval"))}Ie.optgroup=Ie.option,Ie.tbody=Ie.tfoot=Ie.colgroup=Ie.caption=Ie.thead,Ie.th=Ie.td;var Ee,be,Me=/<|&#?\w+;/;function ye(e,n,A,t,i){for(var l,o,s,a,r,C,c=n.createDocumentFragment(),u=[],d=0,m=e.length;d<m;d++)if((l=e[d])||0===l)if("object"===b(l))M.merge(u,l.nodeType?[l]:l);else if(Me.test(l)){for(o=o||c.appendChild(n.createElement("div")),s=(pe.exec(l)||["",""])[1].toLowerCase(),a=Ie[s]||Ie._default,o.innerHTML=a[1]+M.htmlPrefilter(l)+a[2],C=a[0];C--;)o=o.lastChild;M.merge(u,o.childNodes),(o=c.firstChild).textContent=""}else u.push(n.createTextNode(l));for(c.textContent="",d=0;l=u[d++];)if(t&&M.inArray(l,t)>-1)i&&i.push(l);else if(r=se(l),o=ge(c.appendChild(l),"script"),r&&ve(o),A)for(C=0;l=o[C++];)fe.test(l.type||"")&&A.push(l);return c}Ee=o.createDocumentFragment().appendChild(o.createElement("div")),(be=o.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),Ee.appendChild(be),f.checkClone=Ee.cloneNode(!0).cloneNode(!0).lastChild.checked,Ee.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!Ee.cloneNode(!0).lastChild.defaultValue;var Ge=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xe=/^([^.]*)(?:\.(.+)|)/;function Be(){return!0}function Oe(){return!1}function Qe(e,n){return e===function(){try{return o.activeElement}catch(e){}}()==("focus"===n)}function Ke(e,n,A,t,i,l){var o,s;if("object"==typeof n){for(s in"string"!=typeof A&&(t=t||A,A=void 0),n)Ke(e,s,A,t,n[s],l);return e}if(null==t&&null==i?(i=A,t=A=void 0):null==i&&("string"==typeof A?(i=t,t=void 0):(i=t,t=A,A=void 0)),!1===i)i=Oe;else if(!i)return e;return 1===l&&(o=i,(i=function(e){return M().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=M.guid++)),e.each((function(){M.event.add(this,n,i,t,A)}))}function we(e,n,A){A?(J.set(e,n,!1),M.event.add(e,n,{namespace:!1,handler:function(e){var t,i,l=J.get(this,n);if(1&e.isTrigger&&this[n]){if(l.length)(M.event.special[n]||{}).delegateType&&e.stopPropagation();else if(l=a.call(arguments),J.set(this,n,l),t=A(this,n),this[n](),l!==(i=J.get(this,n))||t?J.set(this,n,!1):i={},l!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else l.length&&(J.set(this,n,{value:M.event.trigger(M.extend(l[0],M.Event.prototype),l.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,n)&&M.event.add(e,n,Be)}M.event={global:{},add:function(e,n,A,t,i){var l,o,s,a,r,C,c,u,d,m,h,p=J.get(e);if(p)for(A.handler&&(A=(l=A).handler,i=l.selector),i&&M.find.matchesSelector(oe,i),A.guid||(A.guid=M.guid++),(a=p.events)||(a=p.events={}),(o=p.handle)||(o=p.handle=function(n){return void 0!==M&&M.event.triggered!==n.type?M.event.dispatch.apply(e,arguments):void 0}),r=(n=(n||"").match(T)||[""]).length;r--;)d=h=(s=xe.exec(n[r])||[])[1],m=(s[2]||"").split(".").sort(),d&&(c=M.event.special[d]||{},d=(i?c.delegateType:c.bindType)||d,c=M.event.special[d]||{},C=M.extend({type:d,origType:h,data:t,handler:A,guid:A.guid,selector:i,needsContext:i&&M.expr.match.needsContext.test(i),namespace:m.join(".")},l),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,t,m,o)||e.addEventListener&&e.addEventListener(d,o)),c.add&&(c.add.call(e,C),C.handler.guid||(C.handler.guid=A.guid)),i?u.splice(u.delegateCount++,0,C):u.push(C),M.event.global[d]=!0)},remove:function(e,n,A,t,i){var l,o,s,a,r,C,c,u,d,m,h,p=J.hasData(e)&&J.get(e);if(p&&(a=p.events)){for(r=(n=(n||"").match(T)||[""]).length;r--;)if(d=h=(s=xe.exec(n[r])||[])[1],m=(s[2]||"").split(".").sort(),d){for(c=M.event.special[d]||{},u=a[d=(t?c.delegateType:c.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=l=u.length;l--;)C=u[l],!i&&h!==C.origType||A&&A.guid!==C.guid||s&&!s.test(C.namespace)||t&&t!==C.selector&&("**"!==t||!C.selector)||(u.splice(l,1),C.selector&&u.delegateCount--,c.remove&&c.remove.call(e,C));o&&!u.length&&(c.teardown&&!1!==c.teardown.call(e,m,p.handle)||M.removeEvent(e,d,p.handle),delete a[d])}else for(d in a)M.event.remove(e,d+n[r],A,t,!0);M.isEmptyObject(a)&&J.remove(e,"handle events")}},dispatch:function(e){var n,A,t,i,l,o,s=M.event.fix(e),a=new Array(arguments.length),r=(J.get(this,"events")||{})[s.type]||[],C=M.event.special[s.type]||{};for(a[0]=s,n=1;n<arguments.length;n++)a[n]=arguments[n];if(s.delegateTarget=this,!C.preDispatch||!1!==C.preDispatch.call(this,s)){for(o=M.event.handlers.call(this,s,r),n=0;(i=o[n++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,A=0;(l=i.handlers[A++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==l.namespace&&!s.rnamespace.test(l.namespace)||(s.handleObj=l,s.data=l.data,void 0!==(t=((M.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,a))&&!1===(s.result=t)&&(s.preventDefault(),s.stopPropagation()));return C.postDispatch&&C.postDispatch.call(this,s),s.result}},handlers:function(e,n){var A,t,i,l,o,s=[],a=n.delegateCount,r=e.target;if(a&&r.nodeType&&!("click"===e.type&&e.button>=1))for(;r!==this;r=r.parentNode||this)if(1===r.nodeType&&("click"!==e.type||!0!==r.disabled)){for(l=[],o={},A=0;A<a;A++)void 0===o[i=(t=n[A]).selector+" "]&&(o[i]=t.needsContext?M(i,this).index(r)>-1:M.find(i,this,null,[r]).length),o[i]&&l.push(t);l.length&&s.push({elem:r,handlers:l})}return r=this,a<n.length&&s.push({elem:r,handlers:n.slice(a)}),s},addProp:function(e,n){Object.defineProperty(M.Event.prototype,e,{enumerable:!0,configurable:!0,get:I(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(n){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:n})}})},fix:function(e){return e[M.expando]?e:new M.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var n=this||e;return he.test(n.type)&&n.click&&Q(n,"input")&&we(n,"click",Be),!1},trigger:function(e){var n=this||e;return he.test(n.type)&&n.click&&Q(n,"input")&&we(n,"click"),!0},_default:function(e){var n=e.target;return he.test(n.type)&&n.click&&Q(n,"input")&&J.get(n,"click")||Q(n,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},M.removeEvent=function(e,n,A){e.removeEventListener&&e.removeEventListener(n,A)},M.Event=function(e,n){if(!(this instanceof M.Event))return new M.Event(e,n);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Be:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,n&&M.extend(this,n),this.timeStamp=e&&e.timeStamp||Date.now(),this[M.expando]=!0},M.Event.prototype={constructor:M.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Be,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Be,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Be,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},M.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var n=e.button;return null==e.which&&Ge.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==n&&Se.test(e.type)?1&n?1:2&n?3:4&n?2:0:e.which}},M.event.addProp),M.each({focus:"focusin",blur:"focusout"},(function(e,n){M.event.special[e]={setup:function(){return we(this,e,Qe),!1},trigger:function(){return we(this,e),!0},delegateType:n}})),M.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,n){M.event.special[e]={delegateType:n,bindType:n,handle:function(e){var A,t=this,i=e.relatedTarget,l=e.handleObj;return i&&(i===t||M.contains(t,i))||(e.type=l.origType,A=l.handler.apply(this,arguments),e.type=n),A}}})),M.fn.extend({on:function(e,n,A,t){return Ke(this,e,n,A,t)},one:function(e,n,A,t){return Ke(this,e,n,A,t,1)},off:function(e,n,A){var t,i;if(e&&e.preventDefault&&e.handleObj)return t=e.handleObj,M(e.delegateTarget).off(t.namespace?t.origType+"."+t.namespace:t.origType,t.selector,t.handler),this;if("object"==typeof e){for(i in e)this.off(i,n,e[i]);return this}return!1!==n&&"function"!=typeof n||(A=n,n=void 0),!1===A&&(A=Oe),this.each((function(){M.event.remove(this,e,A,n)}))}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Le=/<script|<style|<link/i,ke=/checked\s*(?:[^=]|=\s*.checked.)/i,_e=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ue(e,n){return Q(e,"table")&&Q(11!==n.nodeType?n:n.firstChild,"tr")&&M(e).children("tbody")[0]||e}function Te(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ye(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,n){var A,t,i,l,o,s,a,r;if(1===n.nodeType){if(J.hasData(e)&&(l=J.access(e),o=J.set(n,l),r=l.events))for(i in delete o.handle,o.events={},r)for(A=0,t=r[i].length;A<t;A++)M.event.add(n,i,r[i][A]);Z.hasData(e)&&(s=Z.access(e),a=M.extend({},s),Z.set(n,a))}}function Re(e,n){var A=n.nodeName.toLowerCase();"input"===A&&he.test(e.type)?n.checked=e.checked:"input"!==A&&"textarea"!==A||(n.defaultValue=e.defaultValue)}function Ve(e,n,A,t){n=r.apply([],n);var i,l,o,s,a,C,c=0,u=e.length,d=u-1,m=n[0],h=I(m);if(h||u>1&&"string"==typeof m&&!f.checkClone&&ke.test(m))return e.each((function(i){var l=e.eq(i);h&&(n[0]=m.call(this,i,l.html())),Ve(l,n,A,t)}));if(u&&(l=(i=ye(n,e[0].ownerDocument,!1,e,t)).firstChild,1===i.childNodes.length&&(i=l),l||t)){for(s=(o=M.map(ge(i,"script"),Te)).length;c<u;c++)a=i,c!==d&&(a=M.clone(a,!0,!0),s&&M.merge(o,ge(a,"script"))),A.call(e[c],a,c);if(s)for(C=o[o.length-1].ownerDocument,M.map(o,Ye),c=0;c<s;c++)a=o[c],fe.test(a.type||"")&&!J.access(a,"globalEval")&&M.contains(C,a)&&(a.src&&"module"!==(a.type||"").toLowerCase()?M._evalUrl&&!a.noModule&&M._evalUrl(a.src,{nonce:a.nonce||a.getAttribute("nonce")}):E(a.textContent.replace(_e,""),a,C))}return e}function He(e,n,A){for(var t,i=n?M.filter(n,e):e,l=0;null!=(t=i[l]);l++)A||1!==t.nodeType||M.cleanData(ge(t)),t.parentNode&&(A&&se(t)&&ve(ge(t,"script")),t.parentNode.removeChild(t));return e}M.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,n,A){var t,i,l,o,s=e.cloneNode(!0),a=se(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||M.isXMLDoc(e)))for(o=ge(s),t=0,i=(l=ge(e)).length;t<i;t++)Re(l[t],o[t]);if(n)if(A)for(l=l||ge(e),o=o||ge(s),t=0,i=l.length;t<i;t++)Pe(l[t],o[t]);else Pe(e,s);return(o=ge(s,"script")).length>0&&ve(o,!a&&ge(e,"script")),s},cleanData:function(e){for(var n,A,t,i=M.event.special,l=0;void 0!==(A=e[l]);l++)if($(A)){if(n=A[J.expando]){if(n.events)for(t in n.events)i[t]?M.event.remove(A,t):M.removeEvent(A,t,n.handle);A[J.expando]=void 0}A[Z.expando]&&(A[Z.expando]=void 0)}}}),M.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return j(this,(function(e){return void 0===e?M.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ve(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ue(this,e).appendChild(e)}))},prepend:function(){return Ve(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=Ue(this,e);n.insertBefore(e,n.firstChild)}}))},before:function(){return Ve(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ve(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,n=0;null!=(e=this[n]);n++)1===e.nodeType&&(M.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,n){return e=null!=e&&e,n=null==n?e:n,this.map((function(){return M.clone(this,e,n)}))},html:function(e){return j(this,(function(e){var n=this[0]||{},A=0,t=this.length;if(void 0===e&&1===n.nodeType)return n.innerHTML;if("string"==typeof e&&!Le.test(e)&&!Ie[(pe.exec(e)||["",""])[1].toLowerCase()]){e=M.htmlPrefilter(e);try{for(;A<t;A++)1===(n=this[A]||{}).nodeType&&(M.cleanData(ge(n,!1)),n.innerHTML=e);n=0}catch(e){}}n&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ve(this,arguments,(function(n){var A=this.parentNode;M.inArray(this,e)<0&&(M.cleanData(ge(this)),A&&A.replaceChild(n,this))}),e)}}),M.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,n){M.fn[e]=function(e){for(var A,t=[],i=M(e),l=i.length-1,o=0;o<=l;o++)A=o===l?this:this.clone(!0),M(i[o])[n](A),C.apply(t,A.get());return this.pushStack(t)}}));var We=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),je=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=A),n.getComputedStyle(e)},Ne=new RegExp(le.join("|"),"i");function Fe(e,n,A){var t,i,l,o,s=e.style;return(A=A||je(e))&&(""!==(o=A.getPropertyValue(n)||A[n])||se(e)||(o=M.style(e,n)),!f.pixelBoxStyles()&&We.test(o)&&Ne.test(n)&&(t=s.width,i=s.minWidth,l=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=A.width,s.width=t,s.minWidth=i,s.maxWidth=l)),void 0!==o?o+"":o}function qe(e,n){return{get:function(){if(!e())return(this.get=n).apply(this,arguments);delete this.get}}}!function(){function e(){if(C){r.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",C.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(r).appendChild(C);var e=A.getComputedStyle(C);t="1%"!==e.top,a=12===n(e.marginLeft),C.style.right="60%",s=36===n(e.right),i=36===n(e.width),C.style.position="absolute",l=12===n(C.offsetWidth/3),oe.removeChild(r),C=null}}function n(e){return Math.round(parseFloat(e))}var t,i,l,s,a,r=o.createElement("div"),C=o.createElement("div");C.style&&(C.style.backgroundClip="content-box",C.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===C.style.backgroundClip,M.extend(f,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),t},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),l}}))}();var ze=["Webkit","Moz","ms"],$e=o.createElement("div").style,Xe={};function Je(e){var n=M.cssProps[e]||Xe[e];return n||(e in $e?e:Xe[e]=function(e){for(var n=e[0].toUpperCase()+e.slice(1),A=ze.length;A--;)if((e=ze[A]+n)in $e)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,en=/^--/,nn={position:"absolute",visibility:"hidden",display:"block"},An={letterSpacing:"0",fontWeight:"400"};function tn(e,n,A){var t=ie.exec(n);return t?Math.max(0,t[2]-(A||0))+(t[3]||"px"):n}function ln(e,n,A,t,i,l){var o="width"===n?1:0,s=0,a=0;if(A===(t?"border":"content"))return 0;for(;o<4;o+=2)"margin"===A&&(a+=M.css(e,A+le[o],!0,i)),t?("content"===A&&(a-=M.css(e,"padding"+le[o],!0,i)),"margin"!==A&&(a-=M.css(e,"border"+le[o]+"Width",!0,i))):(a+=M.css(e,"padding"+le[o],!0,i),"padding"!==A?a+=M.css(e,"border"+le[o]+"Width",!0,i):s+=M.css(e,"border"+le[o]+"Width",!0,i));return!t&&l>=0&&(a+=Math.max(0,Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-l-a-s-.5))||0),a}function on(e,n,A){var t=je(e),i=(!f.boxSizingReliable()||A)&&"border-box"===M.css(e,"boxSizing",!1,t),l=i,o=Fe(e,n,t),s="offset"+n[0].toUpperCase()+n.slice(1);if(We.test(o)){if(!A)return o;o="auto"}return(!f.boxSizingReliable()&&i||"auto"===o||!parseFloat(o)&&"inline"===M.css(e,"display",!1,t))&&e.getClientRects().length&&(i="border-box"===M.css(e,"boxSizing",!1,t),(l=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+ln(e,n,A||(i?"border":"content"),l,t,o)+"px"}function sn(e,n,A,t,i){return new sn.prototype.init(e,n,A,t,i)}M.extend({cssHooks:{opacity:{get:function(e,n){if(n){var A=Fe(e,"opacity");return""===A?"1":A}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,n,A,t){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,l,o,s=z(n),a=en.test(n),r=e.style;if(a||(n=Je(s)),o=M.cssHooks[n]||M.cssHooks[s],void 0===A)return o&&"get"in o&&void 0!==(i=o.get(e,!1,t))?i:r[n];"string"===(l=typeof A)&&(i=ie.exec(A))&&i[1]&&(A=ce(e,n,i),l="number"),null!=A&&A==A&&("number"!==l||a||(A+=i&&i[3]||(M.cssNumber[s]?"":"px")),f.clearCloneStyle||""!==A||0!==n.indexOf("background")||(r[n]="inherit"),o&&"set"in o&&void 0===(A=o.set(e,A,t))||(a?r.setProperty(n,A):r[n]=A))}},css:function(e,n,A,t){var i,l,o,s=z(n);return en.test(n)||(n=Je(s)),(o=M.cssHooks[n]||M.cssHooks[s])&&"get"in o&&(i=o.get(e,!0,A)),void 0===i&&(i=Fe(e,n,t)),"normal"===i&&n in An&&(i=An[n]),""===A||A?(l=parseFloat(i),!0===A||isFinite(l)?l||0:i):i}}),M.each(["height","width"],(function(e,n){M.cssHooks[n]={get:function(e,A,t){if(A)return!Ze.test(M.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?on(e,n,t):Ce(e,nn,(function(){return on(e,n,t)}))},set:function(e,A,t){var i,l=je(e),o=!f.scrollboxSize()&&"absolute"===l.position,s=(o||t)&&"border-box"===M.css(e,"boxSizing",!1,l),a=t?ln(e,n,t,s,l):0;return s&&o&&(a-=Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(l[n])-ln(e,n,"border",!1,l)-.5)),a&&(i=ie.exec(A))&&"px"!==(i[3]||"px")&&(e.style[n]=A,A=M.css(e,n)),tn(0,A,a)}}})),M.cssHooks.marginLeft=qe(f.reliableMarginLeft,(function(e,n){if(n)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-Ce(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),M.each({margin:"",padding:"",border:"Width"},(function(e,n){M.cssHooks[e+n]={expand:function(A){for(var t=0,i={},l="string"==typeof A?A.split(" "):[A];t<4;t++)i[e+le[t]+n]=l[t]||l[t-2]||l[0];return i}},"margin"!==e&&(M.cssHooks[e+n].set=tn)})),M.fn.extend({css:function(e,n){return j(this,(function(e,n,A){var t,i,l={},o=0;if(Array.isArray(n)){for(t=je(e),i=n.length;o<i;o++)l[n[o]]=M.css(e,n[o],!1,t);return l}return void 0!==A?M.style(e,n,A):M.css(e,n)}),e,n,arguments.length>1)}}),M.Tween=sn,sn.prototype={constructor:sn,init:function(e,n,A,t,i,l){this.elem=e,this.prop=A,this.easing=i||M.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=t,this.unit=l||(M.cssNumber[A]?"":"px")},cur:function(){var e=sn.propHooks[this.prop];return e&&e.get?e.get(this):sn.propHooks._default.get(this)},run:function(e){var n,A=sn.propHooks[this.prop];return this.options.duration?this.pos=n=M.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=n=e,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),A&&A.set?A.set(this):sn.propHooks._default.set(this),this}},sn.prototype.init.prototype=sn.prototype,sn.propHooks={_default:{get:function(e){var n;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(n=M.css(e.elem,e.prop,""))&&"auto"!==n?n:0},set:function(e){M.fx.step[e.prop]?M.fx.step[e.prop](e):1!==e.elem.nodeType||!M.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:M.style(e.elem,e.prop,e.now+e.unit)}}},sn.propHooks.scrollTop=sn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},M.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},M.fx=sn.prototype.init,M.fx.step={};var an,rn,Cn=/^(?:toggle|show|hide)$/,cn=/queueHooks$/;function un(){rn&&(!1===o.hidden&&A.requestAnimationFrame?A.requestAnimationFrame(un):A.setTimeout(un,M.fx.interval),M.fx.tick())}function dn(){return A.setTimeout((function(){an=void 0})),an=Date.now()}function mn(e,n){var A,t=0,i={height:e};for(n=n?1:0;t<4;t+=2-n)i["margin"+(A=le[t])]=i["padding"+A]=e;return n&&(i.opacity=i.width=e),i}function hn(e,n,A){for(var t,i=(pn.tweeners[n]||[]).concat(pn.tweeners["*"]),l=0,o=i.length;l<o;l++)if(t=i[l].call(A,n,e))return t}function pn(e,n,A){var t,i,l=0,o=pn.prefilters.length,s=M.Deferred().always((function(){delete a.elem})),a=function(){if(i)return!1;for(var n=an||dn(),A=Math.max(0,r.startTime+r.duration-n),t=1-(A/r.duration||0),l=0,o=r.tweens.length;l<o;l++)r.tweens[l].run(t);return s.notifyWith(e,[r,t,A]),t<1&&o?A:(o||s.notifyWith(e,[r,1,0]),s.resolveWith(e,[r]),!1)},r=s.promise({elem:e,props:M.extend({},n),opts:M.extend(!0,{specialEasing:{},easing:M.easing._default},A),originalProperties:n,originalOptions:A,startTime:an||dn(),duration:A.duration,tweens:[],createTween:function(n,A){var t=M.Tween(e,r.opts,n,A,r.opts.specialEasing[n]||r.opts.easing);return r.tweens.push(t),t},stop:function(n){var A=0,t=n?r.tweens.length:0;if(i)return this;for(i=!0;A<t;A++)r.tweens[A].run(1);return n?(s.notifyWith(e,[r,1,0]),s.resolveWith(e,[r,n])):s.rejectWith(e,[r,n]),this}}),C=r.props;for(!function(e,n){var A,t,i,l,o;for(A in e)if(i=n[t=z(A)],l=e[A],Array.isArray(l)&&(i=l[1],l=e[A]=l[0]),A!==t&&(e[t]=l,delete e[A]),(o=M.cssHooks[t])&&"expand"in o)for(A in l=o.expand(l),delete e[t],l)A in e||(e[A]=l[A],n[A]=i);else n[t]=i}(C,r.opts.specialEasing);l<o;l++)if(t=pn.prefilters[l].call(r,e,C,r.opts))return I(t.stop)&&(M._queueHooks(r.elem,r.opts.queue).stop=t.stop.bind(t)),t;return M.map(C,hn,r),I(r.opts.start)&&r.opts.start.call(e,r),r.progress(r.opts.progress).done(r.opts.done,r.opts.complete).fail(r.opts.fail).always(r.opts.always),M.fx.timer(M.extend(a,{elem:e,anim:r,queue:r.opts.queue})),r}M.Animation=M.extend(pn,{tweeners:{"*":[function(e,n){var A=this.createTween(e,n);return ce(A.elem,e,ie.exec(n),A),A}]},tweener:function(e,n){I(e)?(n=e,e=["*"]):e=e.match(T);for(var A,t=0,i=e.length;t<i;t++)A=e[t],pn.tweeners[A]=pn.tweeners[A]||[],pn.tweeners[A].unshift(n)},prefilters:[function(e,n,A){var t,i,l,o,s,a,r,C,c="width"in n||"height"in n,u=this,d={},m=e.style,h=e.nodeType&&re(e),p=J.get(e,"fxshow");for(t in A.queue||(null==(o=M._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,u.always((function(){u.always((function(){o.unqueued--,M.queue(e,"fx").length||o.empty.fire()}))}))),n)if(i=n[t],Cn.test(i)){if(delete n[t],l=l||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!p||void 0===p[t])continue;h=!0}d[t]=p&&p[t]||M.style(e,t)}if((a=!M.isEmptyObject(n))||!M.isEmptyObject(d))for(t in c&&1===e.nodeType&&(A.overflow=[m.overflow,m.overflowX,m.overflowY],null==(r=p&&p.display)&&(r=J.get(e,"display")),"none"===(C=M.css(e,"display"))&&(r?C=r:(me([e],!0),r=e.style.display||r,C=M.css(e,"display"),me([e]))),("inline"===C||"inline-block"===C&&null!=r)&&"none"===M.css(e,"float")&&(a||(u.done((function(){m.display=r})),null==r&&(C=m.display,r="none"===C?"":C)),m.display="inline-block")),A.overflow&&(m.overflow="hidden",u.always((function(){m.overflow=A.overflow[0],m.overflowX=A.overflow[1],m.overflowY=A.overflow[2]}))),a=!1,d)a||(p?"hidden"in p&&(h=p.hidden):p=J.access(e,"fxshow",{display:r}),l&&(p.hidden=!h),h&&me([e],!0),u.done((function(){for(t in h||me([e]),J.remove(e,"fxshow"),d)M.style(e,t,d[t])}))),a=hn(h?p[t]:0,t,u),t in p||(p[t]=a.start,h&&(a.end=a.start,a.start=0))}],prefilter:function(e,n){n?pn.prefilters.unshift(e):pn.prefilters.push(e)}}),M.speed=function(e,n,A){var t=e&&"object"==typeof e?M.extend({},e):{complete:A||!A&&n||I(e)&&e,duration:e,easing:A&&n||n&&!I(n)&&n};return M.fx.off?t.duration=0:"number"!=typeof t.duration&&(t.duration in M.fx.speeds?t.duration=M.fx.speeds[t.duration]:t.duration=M.fx.speeds._default),null!=t.queue&&!0!==t.queue||(t.queue="fx"),t.old=t.complete,t.complete=function(){I(t.old)&&t.old.call(this),t.queue&&M.dequeue(this,t.queue)},t},M.fn.extend({fadeTo:function(e,n,A,t){return this.filter(re).css("opacity",0).show().end().animate({opacity:n},e,A,t)},animate:function(e,n,A,t){var i=M.isEmptyObject(e),l=M.speed(n,A,t),o=function(){var n=pn(this,M.extend({},e),l);(i||J.get(this,"finish"))&&n.stop(!0)};return o.finish=o,i||!1===l.queue?this.each(o):this.queue(l.queue,o)},stop:function(e,n,A){var t=function(e){var n=e.stop;delete e.stop,n(A)};return"string"!=typeof e&&(A=n,n=e,e=void 0),n&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var n=!0,i=null!=e&&e+"queueHooks",l=M.timers,o=J.get(this);if(i)o[i]&&o[i].stop&&t(o[i]);else for(i in o)o[i]&&o[i].stop&&cn.test(i)&&t(o[i]);for(i=l.length;i--;)l[i].elem!==this||null!=e&&l[i].queue!==e||(l[i].anim.stop(A),n=!1,l.splice(i,1));!n&&A||M.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var n,A=J.get(this),t=A[e+"queue"],i=A[e+"queueHooks"],l=M.timers,o=t?t.length:0;for(A.finish=!0,M.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),n=l.length;n--;)l[n].elem===this&&l[n].queue===e&&(l[n].anim.stop(!0),l.splice(n,1));for(n=0;n<o;n++)t[n]&&t[n].finish&&t[n].finish.call(this);delete A.finish}))}}),M.each(["toggle","show","hide"],(function(e,n){var A=M.fn[n];M.fn[n]=function(e,t,i){return null==e||"boolean"==typeof e?A.apply(this,arguments):this.animate(mn(n,!0),e,t,i)}})),M.each({slideDown:mn("show"),slideUp:mn("hide"),slideToggle:mn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,n){M.fn[e]=function(e,A,t){return this.animate(n,e,A,t)}})),M.timers=[],M.fx.tick=function(){var e,n=0,A=M.timers;for(an=Date.now();n<A.length;n++)(e=A[n])()||A[n]!==e||A.splice(n--,1);A.length||M.fx.stop(),an=void 0},M.fx.timer=function(e){M.timers.push(e),M.fx.start()},M.fx.interval=13,M.fx.start=function(){rn||(rn=!0,un())},M.fx.stop=function(){rn=null},M.fx.speeds={slow:600,fast:200,_default:400},M.fn.delay=function(e,n){return e=M.fx&&M.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,t){var i=A.setTimeout(n,e);t.stop=function(){A.clearTimeout(i)}}))},function(){var e=o.createElement("input"),n=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=n.selected,(e=o.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var fn,In=M.expr.attrHandle;M.fn.extend({attr:function(e,n){return j(this,M.attr,e,n,arguments.length>1)},removeAttr:function(e){return this.each((function(){M.removeAttr(this,e)}))}}),M.extend({attr:function(e,n,A){var t,i,l=e.nodeType;if(3!==l&&8!==l&&2!==l)return void 0===e.getAttribute?M.prop(e,n,A):(1===l&&M.isXMLDoc(e)||(i=M.attrHooks[n.toLowerCase()]||(M.expr.match.bool.test(n)?fn:void 0)),void 0!==A?null===A?void M.removeAttr(e,n):i&&"set"in i&&void 0!==(t=i.set(e,A,n))?t:(e.setAttribute(n,A+""),A):i&&"get"in i&&null!==(t=i.get(e,n))?t:null==(t=M.find.attr(e,n))?void 0:t)},attrHooks:{type:{set:function(e,n){if(!f.radioValue&&"radio"===n&&Q(e,"input")){var A=e.value;return e.setAttribute("type",n),A&&(e.value=A),n}}}},removeAttr:function(e,n){var A,t=0,i=n&&n.match(T);if(i&&1===e.nodeType)for(;A=i[t++];)e.removeAttribute(A)}}),fn={set:function(e,n,A){return!1===n?M.removeAttr(e,A):e.setAttribute(A,A),A}},M.each(M.expr.match.bool.source.match(/\w+/g),(function(e,n){var A=In[n]||M.find.attr;In[n]=function(e,n,t){var i,l,o=n.toLowerCase();return t||(l=In[o],In[o]=i,i=null!=A(e,n,t)?o:null,In[o]=l),i}}));var gn=/^(?:input|select|textarea|button)$/i,vn=/^(?:a|area)$/i;function En(e){return(e.match(T)||[]).join(" ")}function bn(e){return e.getAttribute&&e.getAttribute("class")||""}function Mn(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(T)||[]}M.fn.extend({prop:function(e,n){return j(this,M.prop,e,n,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[M.propFix[e]||e]}))}}),M.extend({prop:function(e,n,A){var t,i,l=e.nodeType;if(3!==l&&8!==l&&2!==l)return 1===l&&M.isXMLDoc(e)||(n=M.propFix[n]||n,i=M.propHooks[n]),void 0!==A?i&&"set"in i&&void 0!==(t=i.set(e,A,n))?t:e[n]=A:i&&"get"in i&&null!==(t=i.get(e,n))?t:e[n]},propHooks:{tabIndex:{get:function(e){var n=M.find.attr(e,"tabindex");return n?parseInt(n,10):gn.test(e.nodeName)||vn.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(M.propHooks.selected={get:function(e){var n=e.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null},set:function(e){var n=e.parentNode;n&&(n.selectedIndex,n.parentNode&&n.parentNode.selectedIndex)}}),M.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){M.propFix[this.toLowerCase()]=this})),M.fn.extend({addClass:function(e){var n,A,t,i,l,o,s,a=0;if(I(e))return this.each((function(n){M(this).addClass(e.call(this,n,bn(this)))}));if((n=Mn(e)).length)for(;A=this[a++];)if(i=bn(A),t=1===A.nodeType&&" "+En(i)+" "){for(o=0;l=n[o++];)t.indexOf(" "+l+" ")<0&&(t+=l+" ");i!==(s=En(t))&&A.setAttribute("class",s)}return this},removeClass:function(e){var n,A,t,i,l,o,s,a=0;if(I(e))return this.each((function(n){M(this).removeClass(e.call(this,n,bn(this)))}));if(!arguments.length)return this.attr("class","");if((n=Mn(e)).length)for(;A=this[a++];)if(i=bn(A),t=1===A.nodeType&&" "+En(i)+" "){for(o=0;l=n[o++];)for(;t.indexOf(" "+l+" ")>-1;)t=t.replace(" "+l+" "," ");i!==(s=En(t))&&A.setAttribute("class",s)}return this},toggleClass:function(e,n){var A=typeof e,t="string"===A||Array.isArray(e);return"boolean"==typeof n&&t?n?this.addClass(e):this.removeClass(e):I(e)?this.each((function(A){M(this).toggleClass(e.call(this,A,bn(this),n),n)})):this.each((function(){var n,i,l,o;if(t)for(i=0,l=M(this),o=Mn(e);n=o[i++];)l.hasClass(n)?l.removeClass(n):l.addClass(n);else void 0!==e&&"boolean"!==A||((n=bn(this))&&J.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var n,A,t=0;for(n=" "+e+" ";A=this[t++];)if(1===A.nodeType&&(" "+En(bn(A))+" ").indexOf(n)>-1)return!0;return!1}});var yn=/\r/g;M.fn.extend({val:function(e){var n,A,t,i=this[0];return arguments.length?(t=I(e),this.each((function(A){var i;1===this.nodeType&&(null==(i=t?e.call(this,A,M(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=M.map(i,(function(e){return null==e?"":e+""}))),(n=M.valHooks[this.type]||M.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,i,"value")||(this.value=i))}))):i?(n=M.valHooks[i.type]||M.valHooks[i.nodeName.toLowerCase()])&&"get"in n&&void 0!==(A=n.get(i,"value"))?A:"string"==typeof(A=i.value)?A.replace(yn,""):null==A?"":A:void 0}}),M.extend({valHooks:{option:{get:function(e){var n=M.find.attr(e,"value");return null!=n?n:En(M.text(e))}},select:{get:function(e){var n,A,t,i=e.options,l=e.selectedIndex,o="select-one"===e.type,s=o?null:[],a=o?l+1:i.length;for(t=l<0?a:o?l:0;t<a;t++)if(((A=i[t]).selected||t===l)&&!A.disabled&&(!A.parentNode.disabled||!Q(A.parentNode,"optgroup"))){if(n=M(A).val(),o)return n;s.push(n)}return s},set:function(e,n){for(var A,t,i=e.options,l=M.makeArray(n),o=i.length;o--;)((t=i[o]).selected=M.inArray(M.valHooks.option.get(t),l)>-1)&&(A=!0);return A||(e.selectedIndex=-1),l}}}}),M.each(["radio","checkbox"],(function(){M.valHooks[this]={set:function(e,n){if(Array.isArray(n))return e.checked=M.inArray(M(e).val(),n)>-1}},f.checkOn||(M.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in A;var Gn=/^(?:focusinfocus|focusoutblur)$/,Sn=function(e){e.stopPropagation()};M.extend(M.event,{trigger:function(e,n,t,i){var l,s,a,r,C,c,u,d,h=[t||o],p=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(s=d=a=t=t||o,3!==t.nodeType&&8!==t.nodeType&&!Gn.test(p+M.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),C=p.indexOf(":")<0&&"on"+p,(e=e[M.expando]?e:new M.Event(p,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=t),n=null==n?[e]:M.makeArray(n,[e]),u=M.event.special[p]||{},i||!u.trigger||!1!==u.trigger.apply(t,n))){if(!i&&!u.noBubble&&!g(t)){for(r=u.delegateType||p,Gn.test(r+p)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(t.ownerDocument||o)&&h.push(a.defaultView||a.parentWindow||A)}for(l=0;(s=h[l++])&&!e.isPropagationStopped();)d=s,e.type=l>1?r:u.bindType||p,(c=(J.get(s,"events")||{})[e.type]&&J.get(s,"handle"))&&c.apply(s,n),(c=C&&s[C])&&c.apply&&$(s)&&(e.result=c.apply(s,n),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),n)||!$(t)||C&&I(t[p])&&!g(t)&&((a=t[C])&&(t[C]=null),M.event.triggered=p,e.isPropagationStopped()&&d.addEventListener(p,Sn),t[p](),e.isPropagationStopped()&&d.removeEventListener(p,Sn),M.event.triggered=void 0,a&&(t[C]=a)),e.result}},simulate:function(e,n,A){var t=M.extend(new M.Event,A,{type:e,isSimulated:!0});M.event.trigger(t,null,n)}}),M.fn.extend({trigger:function(e,n){return this.each((function(){M.event.trigger(e,n,this)}))},triggerHandler:function(e,n){var A=this[0];if(A)return M.event.trigger(e,n,A,!0)}}),f.focusin||M.each({focus:"focusin",blur:"focusout"},(function(e,n){var A=function(e){M.event.simulate(n,e.target,M.event.fix(e))};M.event.special[n]={setup:function(){var t=this.ownerDocument||this,i=J.access(t,n);i||t.addEventListener(e,A,!0),J.access(t,n,(i||0)+1)},teardown:function(){var t=this.ownerDocument||this,i=J.access(t,n)-1;i?J.access(t,n,i):(t.removeEventListener(e,A,!0),J.remove(t,n))}}}));var xn=A.location,Bn=Date.now(),On=/\?/;M.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new A.DOMParser).parseFromString(e,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||M.error("Invalid XML: "+e),n};var Qn=/\[\]$/,Kn=/\r?\n/g,wn=/^(?:submit|button|image|reset|file)$/i,Dn=/^(?:input|select|textarea|keygen)/i;function Ln(e,n,A,t){var i;if(Array.isArray(n))M.each(n,(function(n,i){A||Qn.test(e)?t(e,i):Ln(e+"["+("object"==typeof i&&null!=i?n:"")+"]",i,A,t)}));else if(A||"object"!==b(n))t(e,n);else for(i in n)Ln(e+"["+i+"]",n[i],A,t)}M.param=function(e,n){var A,t=[],i=function(e,n){var A=I(n)?n():n;t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==A?"":A)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!M.isPlainObject(e))M.each(e,(function(){i(this.name,this.value)}));else for(A in e)Ln(A,e[A],n,i);return t.join("&")},M.fn.extend({serialize:function(){return M.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=M.prop(this,"elements");return e?M.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!M(this).is(":disabled")&&Dn.test(this.nodeName)&&!wn.test(e)&&(this.checked||!he.test(e))})).map((function(e,n){var A=M(this).val();return null==A?null:Array.isArray(A)?M.map(A,(function(e){return{name:n.name,value:e.replace(Kn,"\r\n")}})):{name:n.name,value:A.replace(Kn,"\r\n")}})).get()}});var kn=/%20/g,_n=/#.*$/,Un=/([?&])_=[^&]*/,Tn=/^(.*?):[ \t]*([^\r\n]*)$/gm,Yn=/^(?:GET|HEAD)$/,Pn=/^\/\//,Rn={},Vn={},Hn="*/".concat("*"),Wn=o.createElement("a");function jn(e){return function(n,A){"string"!=typeof n&&(A=n,n="*");var t,i=0,l=n.toLowerCase().match(T)||[];if(I(A))for(;t=l[i++];)"+"===t[0]?(t=t.slice(1)||"*",(e[t]=e[t]||[]).unshift(A)):(e[t]=e[t]||[]).push(A)}}function Nn(e,n,A,t){var i={},l=e===Vn;function o(s){var a;return i[s]=!0,M.each(e[s]||[],(function(e,s){var r=s(n,A,t);return"string"!=typeof r||l||i[r]?l?!(a=r):void 0:(n.dataTypes.unshift(r),o(r),!1)})),a}return o(n.dataTypes[0])||!i["*"]&&o("*")}function Fn(e,n){var A,t,i=M.ajaxSettings.flatOptions||{};for(A in n)void 0!==n[A]&&((i[A]?e:t||(t={}))[A]=n[A]);return t&&M.extend(!0,e,t),e}Wn.href=xn.href,M.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xn.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xn.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Hn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":M.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,n){return n?Fn(Fn(e,M.ajaxSettings),n):Fn(M.ajaxSettings,e)},ajaxPrefilter:jn(Rn),ajaxTransport:jn(Vn),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var t,i,l,s,a,r,C,c,u,d,m=M.ajaxSetup({},n),h=m.context||m,p=m.context&&(h.nodeType||h.jquery)?M(h):M.event,f=M.Deferred(),I=M.Callbacks("once memory"),g=m.statusCode||{},v={},E={},b="canceled",y={readyState:0,getResponseHeader:function(e){var n;if(C){if(!s)for(s={};n=Tn.exec(l);)s[n[1].toLowerCase()+" "]=(s[n[1].toLowerCase()+" "]||[]).concat(n[2]);n=s[e.toLowerCase()+" "]}return null==n?null:n.join(", ")},getAllResponseHeaders:function(){return C?l:null},setRequestHeader:function(e,n){return null==C&&(e=E[e.toLowerCase()]=E[e.toLowerCase()]||e,v[e]=n),this},overrideMimeType:function(e){return null==C&&(m.mimeType=e),this},statusCode:function(e){var n;if(e)if(C)y.always(e[y.status]);else for(n in e)g[n]=[g[n],e[n]];return this},abort:function(e){var n=e||b;return t&&t.abort(n),G(0,n),this}};if(f.promise(y),m.url=((e||m.url||xn.href)+"").replace(Pn,xn.protocol+"//"),m.type=n.method||n.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(T)||[""],null==m.crossDomain){r=o.createElement("a");try{r.href=m.url,r.href=r.href,m.crossDomain=Wn.protocol+"//"+Wn.host!=r.protocol+"//"+r.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=M.param(m.data,m.traditional)),Nn(Rn,m,n,y),C)return y;for(u in(c=M.event&&m.global)&&0==M.active++&&M.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Yn.test(m.type),i=m.url.replace(_n,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(kn,"+")):(d=m.url.slice(i.length),m.data&&(m.processData||"string"==typeof m.data)&&(i+=(On.test(i)?"&":"?")+m.data,delete m.data),!1===m.cache&&(i=i.replace(Un,"$1"),d=(On.test(i)?"&":"?")+"_="+Bn+++d),m.url=i+d),m.ifModified&&(M.lastModified[i]&&y.setRequestHeader("If-Modified-Since",M.lastModified[i]),M.etag[i]&&y.setRequestHeader("If-None-Match",M.etag[i])),(m.data&&m.hasContent&&!1!==m.contentType||n.contentType)&&y.setRequestHeader("Content-Type",m.contentType),y.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Hn+"; q=0.01":""):m.accepts["*"]),m.headers)y.setRequestHeader(u,m.headers[u]);if(m.beforeSend&&(!1===m.beforeSend.call(h,y,m)||C))return y.abort();if(b="abort",I.add(m.complete),y.done(m.success),y.fail(m.error),t=Nn(Vn,m,n,y)){if(y.readyState=1,c&&p.trigger("ajaxSend",[y,m]),C)return y;m.async&&m.timeout>0&&(a=A.setTimeout((function(){y.abort("timeout")}),m.timeout));try{C=!1,t.send(v,G)}catch(e){if(C)throw e;G(-1,e)}}else G(-1,"No Transport");function G(e,n,o,s){var r,u,d,v,E,b=n;C||(C=!0,a&&A.clearTimeout(a),t=void 0,l=s||"",y.readyState=e>0?4:0,r=e>=200&&e<300||304===e,o&&(v=function(e,n,A){for(var t,i,l,o,s=e.contents,a=e.dataTypes;"*"===a[0];)a.shift(),void 0===t&&(t=e.mimeType||n.getResponseHeader("Content-Type"));if(t)for(i in s)if(s[i]&&s[i].test(t)){a.unshift(i);break}if(a[0]in A)l=a[0];else{for(i in A){if(!a[0]||e.converters[i+" "+a[0]]){l=i;break}o||(o=i)}l=l||o}if(l)return l!==a[0]&&a.unshift(l),A[l]}(m,y,o)),v=function(e,n,A,t){var i,l,o,s,a,r={},C=e.dataTypes.slice();if(C[1])for(o in e.converters)r[o.toLowerCase()]=e.converters[o];for(l=C.shift();l;)if(e.responseFields[l]&&(A[e.responseFields[l]]=n),!a&&t&&e.dataFilter&&(n=e.dataFilter(n,e.dataType)),a=l,l=C.shift())if("*"===l)l=a;else if("*"!==a&&a!==l){if(!(o=r[a+" "+l]||r["* "+l]))for(i in r)if((s=i.split(" "))[1]===l&&(o=r[a+" "+s[0]]||r["* "+s[0]])){!0===o?o=r[i]:!0!==r[i]&&(l=s[0],C.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)n=o(n);else try{n=o(n)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+a+" to "+l}}}return{state:"success",data:n}}(m,v,y,r),r?(m.ifModified&&((E=y.getResponseHeader("Last-Modified"))&&(M.lastModified[i]=E),(E=y.getResponseHeader("etag"))&&(M.etag[i]=E)),204===e||"HEAD"===m.type?b="nocontent":304===e?b="notmodified":(b=v.state,u=v.data,r=!(d=v.error))):(d=b,!e&&b||(b="error",e<0&&(e=0))),y.status=e,y.statusText=(n||b)+"",r?f.resolveWith(h,[u,b,y]):f.rejectWith(h,[y,b,d]),y.statusCode(g),g=void 0,c&&p.trigger(r?"ajaxSuccess":"ajaxError",[y,m,r?u:d]),I.fireWith(h,[y,b]),c&&(p.trigger("ajaxComplete",[y,m]),--M.active||M.event.trigger("ajaxStop")))}return y},getJSON:function(e,n,A){return M.get(e,n,A,"json")},getScript:function(e,n){return M.get(e,void 0,n,"script")}}),M.each(["get","post"],(function(e,n){M[n]=function(e,A,t,i){return I(A)&&(i=i||t,t=A,A=void 0),M.ajax(M.extend({url:e,type:n,dataType:i,data:A,success:t},M.isPlainObject(e)&&e))}})),M._evalUrl=function(e,n){return M.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){M.globalEval(e,n)}})},M.fn.extend({wrapAll:function(e){var n;return this[0]&&(I(e)&&(e=e.call(this[0])),n=M(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return I(e)?this.each((function(n){M(this).wrapInner(e.call(this,n))})):this.each((function(){var n=M(this),A=n.contents();A.length?A.wrapAll(e):n.append(e)}))},wrap:function(e){var n=I(e);return this.each((function(A){M(this).wrapAll(n?e.call(this,A):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){M(this).replaceWith(this.childNodes)})),this}}),M.expr.pseudos.hidden=function(e){return!M.expr.pseudos.visible(e)},M.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},M.ajaxSettings.xhr=function(){try{return new A.XMLHttpRequest}catch(e){}};var qn={0:200,1223:204},zn=M.ajaxSettings.xhr();f.cors=!!zn&&"withCredentials"in zn,f.ajax=zn=!!zn,M.ajaxTransport((function(e){var n,t;if(f.cors||zn&&!e.crossDomain)return{send:function(i,l){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(o,i[o]);n=function(e){return function(){n&&(n=t=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?l(0,"error"):l(s.status,s.statusText):l(qn[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),t=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=t:s.onreadystatechange=function(){4===s.readyState&&A.setTimeout((function(){n&&t()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}})),M.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),M.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return M.globalEval(e),e}}}),M.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),M.ajaxTransport("script",(function(e){var n,A;if(e.crossDomain||e.scriptAttrs)return{send:function(t,i){n=M("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",A=function(e){n.remove(),A=null,e&&i("error"===e.type?404:200,e.type)}),o.head.appendChild(n[0])},abort:function(){A&&A()}}}));var $n,Xn=[],Jn=/(=)\?(?=&|$)|\?\?/;M.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xn.pop()||M.expando+"_"+Bn++;return this[e]=!0,e}}),M.ajaxPrefilter("json jsonp",(function(e,n,t){var i,l,o,s=!1!==e.jsonp&&(Jn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=I(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Jn,"$1"+i):!1!==e.jsonp&&(e.url+=(On.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||M.error(i+" was not called"),o[0]},e.dataTypes[0]="json",l=A[i],A[i]=function(){o=arguments},t.always((function(){void 0===l?M(A).removeProp(i):A[i]=l,e[i]&&(e.jsonpCallback=n.jsonpCallback,Xn.push(i)),o&&I(l)&&l(o[0]),o=l=void 0})),"script"})),f.createHTMLDocument=(($n=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$n.childNodes.length),M.parseHTML=function(e,n,A){return"string"!=typeof e?[]:("boolean"==typeof n&&(A=n,n=!1),n||(f.createHTMLDocument?((t=(n=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,n.head.appendChild(t)):n=o),l=!A&&[],(i=K.exec(e))?[n.createElement(i[1])]:(i=ye([e],n,l),l&&l.length&&M(l).remove(),M.merge([],i.childNodes)));var t,i,l},M.fn.load=function(e,n,A){var t,i,l,o=this,s=e.indexOf(" ");return s>-1&&(t=En(e.slice(s)),e=e.slice(0,s)),I(n)?(A=n,n=void 0):n&&"object"==typeof n&&(i="POST"),o.length>0&&M.ajax({url:e,type:i||"GET",dataType:"html",data:n}).done((function(e){l=arguments,o.html(t?M("<div>").append(M.parseHTML(e)).find(t):e)})).always(A&&function(e,n){o.each((function(){A.apply(this,l||[e.responseText,n,e])}))}),this},M.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,n){M.fn[n]=function(e){return this.on(n,e)}})),M.expr.pseudos.animated=function(e){return M.grep(M.timers,(function(n){return e===n.elem})).length},M.offset={setOffset:function(e,n,A){var t,i,l,o,s,a,r=M.css(e,"position"),C=M(e),c={};"static"===r&&(e.style.position="relative"),s=C.offset(),l=M.css(e,"top"),a=M.css(e,"left"),("absolute"===r||"fixed"===r)&&(l+a).indexOf("auto")>-1?(o=(t=C.position()).top,i=t.left):(o=parseFloat(l)||0,i=parseFloat(a)||0),I(n)&&(n=n.call(e,A,M.extend({},s))),null!=n.top&&(c.top=n.top-s.top+o),null!=n.left&&(c.left=n.left-s.left+i),"using"in n?n.using.call(e,c):C.css(c)}},M.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(n){M.offset.setOffset(this,e,n)}));var n,A,t=this[0];return t?t.getClientRects().length?(n=t.getBoundingClientRect(),A=t.ownerDocument.defaultView,{top:n.top+A.pageYOffset,left:n.left+A.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,n,A,t=this[0],i={top:0,left:0};if("fixed"===M.css(t,"position"))n=t.getBoundingClientRect();else{for(n=this.offset(),A=t.ownerDocument,e=t.offsetParent||A.documentElement;e&&(e===A.body||e===A.documentElement)&&"static"===M.css(e,"position");)e=e.parentNode;e&&e!==t&&1===e.nodeType&&((i=M(e).offset()).top+=M.css(e,"borderTopWidth",!0),i.left+=M.css(e,"borderLeftWidth",!0))}return{top:n.top-i.top-M.css(t,"marginTop",!0),left:n.left-i.left-M.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===M.css(e,"position");)e=e.offsetParent;return e||oe}))}}),M.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,n){var A="pageYOffset"===n;M.fn[e]=function(t){return j(this,(function(e,t,i){var l;if(g(e)?l=e:9===e.nodeType&&(l=e.defaultView),void 0===i)return l?l[n]:e[t];l?l.scrollTo(A?l.pageXOffset:i,A?i:l.pageYOffset):e[t]=i}),e,t,arguments.length)}})),M.each(["top","left"],(function(e,n){M.cssHooks[n]=qe(f.pixelPosition,(function(e,A){if(A)return A=Fe(e,n),We.test(A)?M(e).position()[n]+"px":A}))})),M.each({Height:"height",Width:"width"},(function(e,n){M.each({padding:"inner"+e,content:n,"":"outer"+e},(function(A,t){M.fn[t]=function(i,l){var o=arguments.length&&(A||"boolean"!=typeof i),s=A||(!0===i||!0===l?"margin":"border");return j(this,(function(n,A,i){var l;return g(n)?0===t.indexOf("outer")?n["inner"+e]:n.document.documentElement["client"+e]:9===n.nodeType?(l=n.documentElement,Math.max(n.body["scroll"+e],l["scroll"+e],n.body["offset"+e],l["offset"+e],l["client"+e])):void 0===i?M.css(n,A,s):M.style(n,A,i,s)}),n,o?i:void 0,o)}}))})),M.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,n){M.fn[n]=function(e,A){return arguments.length>0?this.on(n,null,e,A):this.trigger(n)}})),M.fn.extend({hover:function(e,n){return this.mouseenter(e).mouseleave(n||e)}}),M.fn.extend({bind:function(e,n,A){return this.on(e,null,n,A)},unbind:function(e,n){return this.off(e,null,n)},delegate:function(e,n,A,t){return this.on(n,e,A,t)},undelegate:function(e,n,A){return 1===arguments.length?this.off(e,"**"):this.off(n,e||"**",A)}}),M.proxy=function(e,n){var A,t,i;if("string"==typeof n&&(A=e[n],n=e,e=A),I(e))return t=a.call(arguments,2),(i=function(){return e.apply(n||this,t.concat(a.call(arguments)))}).guid=e.guid=e.guid||M.guid++,i},M.holdReady=function(e){e?M.readyWait++:M.ready(!0)},M.isArray=Array.isArray,M.parseJSON=JSON.parse,M.nodeName=Q,M.isFunction=I,M.isWindow=g,M.camelCase=z,M.type=b,M.now=Date.now,M.isNumeric=function(e){var n=M.type(e);return("number"===n||"string"===n)&&!isNaN(e-parseFloat(e))},void 0===(t=function(){return M}.apply(n,[]))||(e.exports=t);var Zn=A.jQuery,eA=A.$;return M.noConflict=function(e){return A.$===M&&(A.$=eA),e&&A.jQuery===M&&(A.jQuery=Zn),M},i||(A.jQuery=A.$=M),M}))},function(e,n,A){var t=A(1),i=A(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var l={insert:"head",singleton:!1},o=(t(i,l),i.locals?i.locals:{});e.exports=o},function(e,n,A){},function(e,n,A){const t=A(8);t.keys().forEach(t)},function(e,n,A){var t={"./android-chrome-192x192.png":9,"./android-chrome-512x512.png":10,"./apple-touch-icon.png":11,"./browserconfig.xml":12,"./favicon-16x16.png":13,"./favicon-32x32.png":14,"./favicon.ico":15,"./mstile-150x150.png":16,"./safari-favicon.svg":17,"./safari-pinned-tab.svg":18};function i(e){var n=l(e);return A(n)}function l(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}i.keys=function(){return Object.keys(t)},i.resolve=l,e.exports=i,i.id=8},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/android-chrome-192x192.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/android-chrome-512x512.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/apple-touch-icon.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/browserconfig.xml"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon-16x16.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon-32x32.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon.ico"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/mstile-150x150.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/safari-favicon.svg"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/safari-pinned-tab.svg"},function(e,n,A){var t=A(1),i=A(20);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var l={insert:"head",singleton:!1},o=(t(i,l),i.locals?i.locals:{});e.exports=o},function(e,n,A){},function(e,n,A){"use strict";A.r(n);A(19);var t,i,l,o,s,a,r=A(0),C=(t="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",i="66cc8c8d4c9eaf515d0327a190657cc2ff58ac9d",l=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:58}},1:{start:{line:4,column:8},end:{line:4,column:25}},2:{start:{line:5,column:8},end:{line:5,column:25}},3:{start:{line:6,column:8},end:{line:6,column:52}},4:{start:{line:7,column:8},end:{line:7,column:64}},5:{start:{line:8,column:8},end:{line:8,column:58}},6:{start:{line:9,column:8},end:{line:9,column:62}},7:{start:{line:10,column:8},end:{line:10,column:26}},8:{start:{line:13,column:8},end:{line:13,column:110}},9:{start:{line:13,column:48},end:{line:13,column:106}},10:{start:{line:14,column:8},end:{line:14,column:69}},11:{start:{line:15,column:8},end:{line:17,column:9}},12:{start:{line:16,column:12},end:{line:16,column:73}},13:{start:{line:18,column:8},end:{line:18,column:59}},14:{start:{line:19,column:8},end:{line:21,column:9}},15:{start:{line:20,column:12},end:{line:20,column:57}},16:{start:{line:22,column:8},end:{line:24,column:9}},17:{start:{line:23,column:12},end:{line:23,column:51}},18:{start:{line:25,column:8},end:{line:27,column:9}},19:{start:{line:26,column:12},end:{line:26,column:55}},20:{start:{line:30,column:8},end:{line:30,column:27}},21:{start:{line:33,column:8},end:{line:33,column:27}},22:{start:{line:36,column:8},end:{line:36,column:25}},23:{start:{line:39,column:8},end:{line:39,column:37}},24:{start:{line:42,column:8},end:{line:42,column:31}},25:{start:{line:45,column:8},end:{line:45,column:35}},26:{start:{line:49,column:8},end:{line:49,column:29}},27:{start:{line:50,column:8},end:{line:50,column:57}},28:{start:{line:51,column:8},end:{line:51,column:42}},29:{start:{line:52,column:8},end:{line:52,column:70}},30:{start:{line:53,column:8},end:{line:53,column:155}},31:{start:{line:54,column:8},end:{line:54,column:34}},32:{start:{line:55,column:8},end:{line:55,column:33}},33:{start:{line:56,column:8},end:{line:56,column:31}},34:{start:{line:57,column:8},end:{line:57,column:41}},35:{start:{line:58,column:8},end:{line:58,column:35}},36:{start:{line:59,column:8},end:{line:59,column:39}},37:{start:{line:60,column:8},end:{line:60,column:33}},38:{start:{line:61,column:8},end:{line:61,column:32}},39:{start:{line:62,column:8},end:{line:62,column:28}},40:{start:{line:65,column:8},end:{line:65,column:103}},41:{start:{line:65,column:39},end:{line:65,column:101}},42:{start:{line:66,column:8},end:{line:66,column:103}},43:{start:{line:66,column:39},end:{line:66,column:101}},44:{start:{line:67,column:8},end:{line:67,column:73}},45:{start:{line:68,column:8},end:{line:68,column:100}},46:{start:{line:69,column:8},end:{line:69,column:88}},47:{start:{line:70,column:8},end:{line:70,column:102}},48:{start:{line:73,column:26},end:{line:73,column:79}},49:{start:{line:73,column:53},end:{line:73,column:78}},50:{start:{line:74,column:8},end:{line:74,column:41}},51:{start:{line:77,column:26},end:{line:77,column:79}},52:{start:{line:77,column:53},end:{line:77,column:78}},53:{start:{line:78,column:8},end:{line:78,column:41}},54:{start:{line:81,column:24},end:{line:81,column:53}},55:{start:{line:82,column:8},end:{line:82,column:37}},56:{start:{line:85,column:31},end:{line:85,column:70}},57:{start:{line:86,column:8},end:{line:86,column:51}},58:{start:{line:89,column:25},end:{line:89,column:58}},59:{start:{line:90,column:8},end:{line:95,column:9}},60:{start:{line:91,column:12},end:{line:91,column:36}},61:{start:{line:94,column:12},end:{line:94,column:49}},62:{start:{line:96,column:8},end:{line:96,column:39}},63:{start:{line:99,column:27},end:{line:99,column:64}},64:{start:{line:100,column:8},end:{line:100,column:42}},65:{start:{line:103,column:8},end:{line:115,column:11}},66:{start:{line:104,column:12},end:{line:107,column:13}},67:{start:{line:105,column:35},end:{line:105,column:44}},68:{start:{line:106,column:16},end:{line:106,column:101}},69:{start:{line:106,column:56},end:{line:106,column:97}},70:{start:{line:108,column:12},end:{line:111,column:13}},71:{start:{line:109,column:31},end:{line:109,column:61}},72:{start:{line:110,column:16},end:{line:110,column:101}},73:{start:{line:110,column:56},end:{line:110,column:97}},74:{start:{line:112,column:12},end:{line:114,column:13}},75:{start:{line:113,column:16},end:{line:113,column:60}},76:{start:{line:118,column:22},end:{line:118,column:49}},77:{start:{line:119,column:8},end:{line:119,column:50}},78:{start:{line:120,column:8},end:{line:120,column:40}},79:{start:{line:121,column:8},end:{line:121,column:36}},80:{start:{line:122,column:25},end:{line:122,column:56}},81:{start:{line:123,column:25},end:{line:123,column:56}},82:{start:{line:124,column:8},end:{line:124,column:53}},83:{start:{line:125,column:8},end:{line:125,column:53}},84:{start:{line:126,column:8},end:{line:126,column:33}},85:{start:{line:127,column:8},end:{line:127,column:33}},86:{start:{line:128,column:8},end:{line:128,column:43}},87:{start:{line:129,column:8},end:{line:129,column:43}},88:{start:{line:130,column:8},end:{line:130,column:43}},89:{start:{line:133,column:22},end:{line:133,column:49}},90:{start:{line:134,column:8},end:{line:134,column:50}},91:{start:{line:135,column:8},end:{line:135,column:40}},92:{start:{line:136,column:8},end:{line:136,column:35}},93:{start:{line:137,column:28},end:{line:137,column:59}},94:{start:{line:138,column:8},end:{line:138,column:86}},95:{start:{line:139,column:8},end:{line:139,column:36}},96:{start:{line:140,column:8},end:{line:140,column:46}},97:{start:{line:141,column:8},end:{line:141,column:38}},98:{start:{line:142,column:8},end:{line:151,column:9}},99:{start:{line:143,column:29},end:{line:143,column:82}},100:{start:{line:144,column:12},end:{line:145,column:73}},101:{start:{line:145,column:16},end:{line:145,column:73}},102:{start:{line:146,column:29},end:{line:146,column:60}},103:{start:{line:147,column:12},end:{line:147,column:121}},104:{start:{line:148,column:12},end:{line:148,column:37}},105:{start:{line:149,column:12},end:{line:149,column:47}},106:{start:{line:150,column:12},end:{line:150,column:39}},107:{start:{line:154,column:22},end:{line:154,column:49}},108:{start:{line:155,column:8},end:{line:155,column:50}},109:{start:{line:156,column:8},end:{line:156,column:40}},110:{start:{line:157,column:8},end:{line:157,column:33}},111:{start:{line:158,column:8},end:{line:158,column:54}},112:{start:{line:159,column:8},end:{line:159,column:34}},113:{start:{line:160,column:8},end:{line:160,column:44}},114:{start:{line:163,column:22},end:{line:163,column:49}},115:{start:{line:164,column:8},end:{line:164,column:50}},116:{start:{line:165,column:8},end:{line:165,column:40}},117:{start:{line:166,column:8},end:{line:166,column:37}},118:{start:{line:167,column:8},end:{line:167,column:66}},119:{start:{line:168,column:8},end:{line:168,column:48}},120:{start:{line:169,column:8},end:{line:169,column:56}},121:{start:{line:172,column:22},end:{line:172,column:49}},122:{start:{line:173,column:8},end:{line:173,column:50}},123:{start:{line:174,column:8},end:{line:174,column:40}},124:{start:{line:175,column:8},end:{line:175,column:34}},125:{start:{line:176,column:8},end:{line:176,column:60}},126:{start:{line:177,column:8},end:{line:177,column:42}},127:{start:{line:178,column:8},end:{line:178,column:50}},128:{start:{line:181,column:22},end:{line:181,column:49}},129:{start:{line:182,column:8},end:{line:182,column:50}},130:{start:{line:183,column:8},end:{line:183,column:40}},131:{start:{line:184,column:8},end:{line:184,column:40}},132:{start:{line:185,column:8},end:{line:185,column:64}},133:{start:{line:186,column:8},end:{line:186,column:46}},134:{start:{line:187,column:8},end:{line:187,column:54}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:24},end:{line:11,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:23},end:{line:28,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:13,column:28},end:{line:13,column:29}},loc:{start:{line:13,column:46},end:{line:13,column:108}},line:13},3:{name:"(anonymous_3)",decl:{start:{line:29,column:4},end:{line:29,column:5}},loc:{start:{line:29,column:22},end:{line:31,column:5}},line:29},4:{name:"(anonymous_4)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:21},end:{line:34,column:5}},line:32},5:{name:"(anonymous_5)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:19},end:{line:37,column:5}},line:35},6:{name:"(anonymous_6)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:29},end:{line:40,column:5}},line:38},7:{name:"(anonymous_7)",decl:{start:{line:41,column:4},end:{line:41,column:5}},loc:{start:{line:41,column:23},end:{line:43,column:5}},line:41},8:{name:"(anonymous_8)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:27},end:{line:46,column:5}},line:44},9:{name:"(anonymous_9)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:17},end:{line:63,column:5}},line:47},10:{name:"(anonymous_10)",decl:{start:{line:64,column:4},end:{line:64,column:5}},loc:{start:{line:64,column:24},end:{line:71,column:5}},line:64},11:{name:"(anonymous_11)",decl:{start:{line:65,column:28},end:{line:65,column:29}},loc:{start:{line:65,column:39},end:{line:65,column:101}},line:65},12:{name:"(anonymous_12)",decl:{start:{line:66,column:28},end:{line:66,column:29}},loc:{start:{line:66,column:39},end:{line:66,column:101}},line:66},13:{name:"(anonymous_13)",decl:{start:{line:72,column:4},end:{line:72,column:5}},loc:{start:{line:72,column:19},end:{line:75,column:5}},line:72},14:{name:"(anonymous_14)",decl:{start:{line:73,column:42},end:{line:73,column:43}},loc:{start:{line:73,column:53},end:{line:73,column:78}},line:73},15:{name:"(anonymous_15)",decl:{start:{line:76,column:4},end:{line:76,column:5}},loc:{start:{line:76,column:19},end:{line:79,column:5}},line:76},16:{name:"(anonymous_16)",decl:{start:{line:77,column:42},end:{line:77,column:43}},loc:{start:{line:77,column:53},end:{line:77,column:78}},line:77},17:{name:"(anonymous_17)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:17},end:{line:83,column:5}},line:80},18:{name:"(anonymous_18)",decl:{start:{line:84,column:4},end:{line:84,column:5}},loc:{start:{line:84,column:24},end:{line:87,column:5}},line:84},19:{name:"(anonymous_19)",decl:{start:{line:88,column:4},end:{line:88,column:5}},loc:{start:{line:88,column:18},end:{line:97,column:5}},line:88},20:{name:"(anonymous_20)",decl:{start:{line:98,column:4},end:{line:98,column:5}},loc:{start:{line:98,column:28},end:{line:101,column:5}},line:98},21:{name:"(anonymous_21)",decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:19},end:{line:116,column:5}},line:102},22:{name:"(anonymous_22)",decl:{start:{line:103,column:39},end:{line:103,column:40}},loc:{start:{line:103,column:54},end:{line:115,column:9}},line:103},23:{name:"(anonymous_23)",decl:{start:{line:106,column:36},end:{line:106,column:37}},loc:{start:{line:106,column:54},end:{line:106,column:99}},line:106},24:{name:"(anonymous_24)",decl:{start:{line:110,column:36},end:{line:110,column:37}},loc:{start:{line:110,column:54},end:{line:110,column:99}},line:110},25:{name:"(anonymous_25)",decl:{start:{line:117,column:4},end:{line:117,column:5}},loc:{start:{line:117,column:25},end:{line:131,column:5}},line:117},26:{name:"(anonymous_26)",decl:{start:{line:132,column:4},end:{line:132,column:5}},loc:{start:{line:132,column:24},end:{line:152,column:5}},line:132},27:{name:"(anonymous_27)",decl:{start:{line:153,column:4},end:{line:153,column:5}},loc:{start:{line:153,column:22},end:{line:161,column:5}},line:153},28:{name:"(anonymous_28)",decl:{start:{line:162,column:4},end:{line:162,column:5}},loc:{start:{line:162,column:32},end:{line:170,column:5}},line:162},29:{name:"(anonymous_29)",decl:{start:{line:171,column:4},end:{line:171,column:5}},loc:{start:{line:171,column:26},end:{line:179,column:5}},line:171},30:{name:"(anonymous_30)",decl:{start:{line:180,column:4},end:{line:180,column:5}},loc:{start:{line:180,column:30},end:{line:188,column:5}},line:180}},branchMap:{0:{loc:{start:{line:15,column:8},end:{line:17,column:9}},type:"if",locations:[{start:{line:15,column:8},end:{line:17,column:9}},{start:{line:15,column:8},end:{line:17,column:9}}],line:15},1:{loc:{start:{line:19,column:8},end:{line:21,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:21,column:9}},{start:{line:19,column:8},end:{line:21,column:9}}],line:19},2:{loc:{start:{line:22,column:8},end:{line:24,column:9}},type:"if",locations:[{start:{line:22,column:8},end:{line:24,column:9}},{start:{line:22,column:8},end:{line:24,column:9}}],line:22},3:{loc:{start:{line:25,column:8},end:{line:27,column:9}},type:"if",locations:[{start:{line:25,column:8},end:{line:27,column:9}},{start:{line:25,column:8},end:{line:27,column:9}}],line:25},4:{loc:{start:{line:53,column:8},end:{line:53,column:154}},type:"cond-expr",locations:[{start:{line:53,column:116},end:{line:53,column:122}},{start:{line:53,column:125},end:{line:53,column:154}}],line:53},5:{loc:{start:{line:53,column:8},end:{line:53,column:113}},type:"binary-expr",locations:[{start:{line:53,column:8},end:{line:53,column:96}},{start:{line:53,column:100},end:{line:53,column:113}}],line:53},6:{loc:{start:{line:53,column:14},end:{line:53,column:86}},type:"cond-expr",locations:[{start:{line:53,column:61},end:{line:53,column:67}},{start:{line:53,column:70},end:{line:53,column:86}}],line:53},7:{loc:{start:{line:53,column:14},end:{line:53,column:58}},type:"binary-expr",locations:[{start:{line:53,column:14},end:{line:53,column:41}},{start:{line:53,column:45},end:{line:53,column:58}}],line:53},8:{loc:{start:{line:90,column:8},end:{line:95,column:9}},type:"if",locations:[{start:{line:90,column:8},end:{line:95,column:9}},{start:{line:90,column:8},end:{line:95,column:9}}],line:90},9:{loc:{start:{line:104,column:12},end:{line:107,column:13}},type:"if",locations:[{start:{line:104,column:12},end:{line:107,column:13}},{start:{line:104,column:12},end:{line:107,column:13}}],line:104},10:{loc:{start:{line:108,column:12},end:{line:111,column:13}},type:"if",locations:[{start:{line:108,column:12},end:{line:111,column:13}},{start:{line:108,column:12},end:{line:111,column:13}}],line:108},11:{loc:{start:{line:108,column:16},end:{line:108,column:74}},type:"binary-expr",locations:[{start:{line:108,column:16},end:{line:108,column:43}},{start:{line:108,column:47},end:{line:108,column:74}}],line:108},12:{loc:{start:{line:112,column:12},end:{line:114,column:13}},type:"if",locations:[{start:{line:112,column:12},end:{line:114,column:13}},{start:{line:112,column:12},end:{line:114,column:13}}],line:112},13:{loc:{start:{line:142,column:8},end:{line:151,column:9}},type:"if",locations:[{start:{line:142,column:8},end:{line:151,column:9}},{start:{line:142,column:8},end:{line:151,column:9}}],line:142},14:{loc:{start:{line:144,column:12},end:{line:145,column:73}},type:"if",locations:[{start:{line:144,column:12},end:{line:145,column:73}},{start:{line:144,column:12},end:{line:145,column:73}}],line:144}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts"],names:[],mappings:"AAGA,MAAM,CAAC,OAAO,OAAO,YAAY;IAqB/B,YAAY,MAAc;QAhBlB,iBAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE7C,WAAM,GAAuB,EAAE,CAAC;QAEhC,WAAM,GAAuB,EAAE,CAAC;QAEhC,SAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAEvC,qBAAgB,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAEnD,eAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAE7C,mBAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAKvD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpB,CAAC;IAEM,gBAAgB;QACrB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC7D,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;SAC9D;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;QACnD,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE;YAChC,IAAI,CAAC,sBAAsB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;SAC9C;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;YAC1B,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;SACxC;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE;YAC3B,IAAI,CAAC,oBAAoB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;SAC5C;IACH,CAAC;IAEM,eAAe;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAEM,sBAAsB;QAC3B,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,oBAAoB;QACzB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEO,IAAI,CAAC,MAAc;;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC9D,YAAA,IAAI,CAAC,MAAM,0CAAE,aAAa,0CAAE,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE;QACvD,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,sBAAsB,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5F,IAAI,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,oBAAoB,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChG,CAAC;IAEO,YAAY;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEO,YAAY;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IAEO,UAAU;QAChB,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAEO,iBAAiB;QACvB,MAAM,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,OAAO,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC;IAEO,WAAW;QACjB,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC;QACnD,IAAI,CAAC,QAAQ,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SACzB;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAEO,qBAAqB;QAC3B,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,OAAO,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YAC1D,IAAI,SAAS,CAAC,MAAM,EAAE;gBACpB,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,CAAC;gBAC7B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACtF;YACD,IAAI,SAAS,CAAC,GAAG,KAAK,SAAS,IAAI,SAAS,CAAC,GAAG,KAAK,SAAS,EAAE;gBAC9D,MAAM,MAAM,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACtF;YACD,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,EAAE;gBAChC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;aAC7C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,kBAAkB;QACxB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;QAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACjD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC7C,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC7C,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC;QACzB,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAEO,iBAAiB;QACvB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC3B,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACpD,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,4BAA4B,CAAC,CAAC;QAC9E,WAAW,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC;YACvE,IAAI,QAAQ;gBAAE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YACvE,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACjD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,4BAA4B,EAAE,gCAAgC,CAAC,CAAC;YAC7G,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5B;IACH,CAAC;IAEO,eAAe;QACrB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAEO,yBAAyB;QAC/B,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1D,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,UAAU,CAAC;QACxC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAClD,CAAC;IAEO,mBAAmB;QACzB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QACpD,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAEO,uBAAuB;QAC7B,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,CAAC,SAAS,GAAG,aAAa,CAAC;QAChC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QACxD,IAAI,CAAC,cAAc,CAAC,IAAI,GAAG,UAAU,CAAC;QACtC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAChD,CAAC;CACF",sourcesContent:["import Facade from '../../presenter/Facade';\nimport { sliderOptions } from '../../model/sliderOptions';\n\nexport default class ControlPanel {\n  private slider!: Facade;\n\n  private parent!: (Node & ParentNode) | null;\n\n  private controlPanel = document.createElement('div');\n\n  private minMax: HTMLInputElement[] = [];\n\n  private values: HTMLInputElement[] = [];\n\n  private step = document.createElement('input');\n\n  private orientationCheck = document.createElement('input');\n\n  private rangeCheck = document.createElement('input');\n\n  private showLabelCheck = document.createElement('input');\n\n  private hasRange!: boolean;\n\n  constructor(slider: Facade) {\n    this.init(slider);\n  }\n\n  public getSliderOptions(): void {\n    this.minMax.forEach((input, index) => { (input.value = this.slider.getMinMax()[index].toString()); });\n    this.values[0].value = this.slider.getValues()[0].toString();\n    if (this.values[1]) {\n      this.values[1].value = this.slider.getValues()[1].toString();\n    }\n    this.step.value = this.slider.getStep().toString();\n    if (this.slider.getOrientation()) {\n      this.getOrientationCheckbox().checked = true;\n    }\n    if (this.slider.getRange()) {\n      this.getRangeCheckbox().checked = true;\n    }\n    if (this.slider.getLabels()) {\n      this.getShowLabelCheckbox().checked = true;\n    }\n  }\n\n  public getMinMaxInputs(): HTMLInputElement[] {\n    return this.minMax;\n  }\n\n  public getValueInputs(): HTMLInputElement[] {\n    return this.values;\n  }\n\n  public getStepInput(): HTMLInputElement {\n    return this.step;\n  }\n\n  public getOrientationCheckbox(): HTMLInputElement {\n    return this.orientationCheck;\n  }\n\n  public getRangeCheckbox(): HTMLInputElement {\n    return this.rangeCheck;\n  }\n\n  public getShowLabelCheckbox(): HTMLInputElement {\n    return this.showLabelCheck;\n  }\n\n  private init(slider: Facade): void {\n    this.slider = slider;\n    this.parent = this.slider.getParent().parentNode;\n    this.hasRange = slider.getRange();\n    this.controlPanel.classList.add('demo-slider__control-panel');\n    this.parent?.parentElement?.prepend(this.controlPanel);\n    this.createMaxMinInputs();\n    this.createValueInputs();\n    this.createStepInput();\n    this.createOrientationCheckbox();\n    this.createRangeCheckbox();\n    this.createShowLabelCheckbox();\n    this.setEventListeners();\n    this.getSliderOptions();\n    this.updateValues();\n  }\n\n  private setEventListeners(): void {\n    this.minMax.forEach((input) => input.addEventListener('change', this.changeMinMax.bind(this)));\n    this.values.forEach((input) => input.addEventListener('change', this.changeValues.bind(this)));\n    this.step.addEventListener('change', this.changeStep.bind(this));\n    this.getOrientationCheckbox().addEventListener('change', this.changeOrientation.bind(this));\n    this.getRangeCheckbox().addEventListener('change', this.changeRange.bind(this));\n    this.getShowLabelCheckbox().addEventListener('change', this.changeLabelVisibility.bind(this));\n  }\n\n  private changeMinMax(): void {\n    const newMinMax = this.minMax.map((input) => parseInt(input.value, 10));\n    this.slider.setMinMax(newMinMax);\n  }\n\n  private changeValues(): void {\n    const newValues = this.values.map((input) => parseInt(input.value, 10));\n    this.slider.setValues(newValues);\n  }\n\n  private changeStep(): void {\n    const newStep = parseInt(this.step.value, 10);\n    this.slider.setStep(newStep);\n  }\n\n  private changeOrientation(): void {\n    const newOrientation = !!this.getOrientationCheckbox().checked;\n    this.slider.setOrientation(newOrientation);\n  }\n\n  private changeRange(): void {\n    const newRange = !!this.getRangeCheckbox().checked;\n    if (!newRange) {\n      this.values[1].remove();\n    } else {\n      this.values[0].after(this.values[1]);\n    }\n    this.slider.setRange(newRange);\n  }\n\n  private changeLabelVisibility(): void {\n    const showLabels = !!this.getShowLabelCheckbox().checked;\n    this.slider.setLabels(showLabels);\n  }\n\n  private updateValues(): void {\n    this.slider.observer.subscribe((valueData: sliderOptions) => {\n      if (valueData.values) {\n        const { values } = valueData;\n        this.values.forEach((input, index) => { (input.value = values[index].toString()); });\n      }\n      if (valueData.min !== undefined && valueData.max !== undefined) {\n        const minMax = [valueData.min, valueData.max];\n        this.minMax.forEach((input, index) => { (input.value = minMax[index].toString()); });\n      }\n      if (valueData.step !== undefined) {\n        this.step.value = valueData.step.toString();\n      }\n    });\n  }\n\n  private createMaxMinInputs(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    this.controlPanel.append(title);\n    title.innerText = 'Min/Max';\n    const inputMin = document.createElement('input');\n    const inputMax = document.createElement('input');\n    inputMin.classList.add('demo-slider__input');\n    inputMax.classList.add('demo-slider__input');\n    inputMin.type = 'number';\n    inputMax.type = 'number';\n    this.controlPanel.append(inputMin);\n    this.controlPanel.append(inputMax);\n    this.minMax = [inputMin, inputMax];\n  }\n\n  private createValueInputs(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    this.controlPanel.append(title);\n    title.innerText = 'Values';\n    const inputSingle = document.createElement('input');\n    inputSingle.classList.add('demo-slider__input', 'demo-slider__handler-value');\n    inputSingle.type = 'number';\n    this.controlPanel.append(inputSingle);\n    this.values.push(inputSingle);\n    if (this.hasRange) {\n      const inputMin = document.querySelector('.demo-slider__handler-value');\n      if (inputMin) inputMin.classList.add('demo-slider__handler-value_min');\n      const inputMax = document.createElement('input');\n      inputMax.classList.add('demo-slider__input', 'demo-slider__handler-value', 'demo-slider__handler-value_max');\n      inputMax.type = 'number';\n      this.controlPanel.append(inputMax);\n      this.values.push(inputMax);\n    }\n  }\n\n  private createStepInput(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    this.controlPanel.append(title);\n    title.innerText = 'Step';\n    this.step.classList.add('demo-slider__input');\n    this.step.type = 'number';\n    this.controlPanel.append(this.step);\n  }\n\n  private createOrientationCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    this.controlPanel.append(title);\n    title.innerText = 'Vertical';\n    this.orientationCheck.classList.add('demo-slider__input');\n    this.orientationCheck.type = 'checkbox';\n    this.controlPanel.append(this.orientationCheck);\n  }\n\n  private createRangeCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    this.controlPanel.append(title);\n    title.innerText = 'Range';\n    this.rangeCheck.classList.add('demo-slider__input');\n    this.rangeCheck.type = 'checkbox';\n    this.controlPanel.append(this.rangeCheck);\n  }\n\n  private createShowLabelCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    this.controlPanel.append(title);\n    title.innerText = 'Show labels';\n    this.showLabelCheck.classList.add('demo-slider__input');\n    this.showLabelCheck.type = 'checkbox';\n    this.controlPanel.append(this.showLabelCheck);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=l[o="__coverage__"]||(l[o]={}))[t]&&a[t].hash===i?a[t]:(s.hash=i,a[t]=s));class c{constructor(e){C.f[0]++,C.s[0]++,this.controlPanel=document.createElement("div"),C.s[1]++,this.minMax=[],C.s[2]++,this.values=[],C.s[3]++,this.step=document.createElement("input"),C.s[4]++,this.orientationCheck=document.createElement("input"),C.s[5]++,this.rangeCheck=document.createElement("input"),C.s[6]++,this.showLabelCheck=document.createElement("input"),C.s[7]++,this.init(e)}getSliderOptions(){C.f[1]++,C.s[8]++,this.minMax.forEach((e,n)=>{C.f[2]++,C.s[9]++,e.value=this.slider.getMinMax()[n].toString()}),C.s[10]++,this.values[0].value=this.slider.getValues()[0].toString(),C.s[11]++,this.values[1]?(C.b[0][0]++,C.s[12]++,this.values[1].value=this.slider.getValues()[1].toString()):C.b[0][1]++,C.s[13]++,this.step.value=this.slider.getStep().toString(),C.s[14]++,this.slider.getOrientation()?(C.b[1][0]++,C.s[15]++,this.getOrientationCheckbox().checked=!0):C.b[1][1]++,C.s[16]++,this.slider.getRange()?(C.b[2][0]++,C.s[17]++,this.getRangeCheckbox().checked=!0):C.b[2][1]++,C.s[18]++,this.slider.getLabels()?(C.b[3][0]++,C.s[19]++,this.getShowLabelCheckbox().checked=!0):C.b[3][1]++}getMinMaxInputs(){return C.f[3]++,C.s[20]++,this.minMax}getValueInputs(){return C.f[4]++,C.s[21]++,this.values}getStepInput(){return C.f[5]++,C.s[22]++,this.step}getOrientationCheckbox(){return C.f[6]++,C.s[23]++,this.orientationCheck}getRangeCheckbox(){return C.f[7]++,C.s[24]++,this.rangeCheck}getShowLabelCheckbox(){return C.f[8]++,C.s[25]++,this.showLabelCheck}init(e){var n,A;C.f[9]++,C.s[26]++,this.slider=e,C.s[27]++,this.parent=this.slider.getParent().parentNode,C.s[28]++,this.hasRange=e.getRange(),C.s[29]++,this.controlPanel.classList.add("demo-slider__control-panel"),C.s[30]++,C.b[5][0]++,null===(C.b[7][0]++,A=null===(n=this.parent)||(C.b[7][1]++,void 0===n)?void C.b[6][0]++:(C.b[6][1]++,n.parentElement))||(C.b[5][1]++,void 0===A)?C.b[4][0]++:(C.b[4][1]++,A.prepend(this.controlPanel)),C.s[31]++,this.createMaxMinInputs(),C.s[32]++,this.createValueInputs(),C.s[33]++,this.createStepInput(),C.s[34]++,this.createOrientationCheckbox(),C.s[35]++,this.createRangeCheckbox(),C.s[36]++,this.createShowLabelCheckbox(),C.s[37]++,this.setEventListeners(),C.s[38]++,this.getSliderOptions(),C.s[39]++,this.updateValues()}setEventListeners(){C.f[10]++,C.s[40]++,this.minMax.forEach(e=>(C.f[11]++,C.s[41]++,e.addEventListener("change",this.changeMinMax.bind(this)))),C.s[42]++,this.values.forEach(e=>(C.f[12]++,C.s[43]++,e.addEventListener("change",this.changeValues.bind(this)))),C.s[44]++,this.step.addEventListener("change",this.changeStep.bind(this)),C.s[45]++,this.getOrientationCheckbox().addEventListener("change",this.changeOrientation.bind(this)),C.s[46]++,this.getRangeCheckbox().addEventListener("change",this.changeRange.bind(this)),C.s[47]++,this.getShowLabelCheckbox().addEventListener("change",this.changeLabelVisibility.bind(this))}changeMinMax(){C.f[13]++;const e=(C.s[48]++,this.minMax.map(e=>(C.f[14]++,C.s[49]++,parseInt(e.value,10))));C.s[50]++,this.slider.setMinMax(e)}changeValues(){C.f[15]++;const e=(C.s[51]++,this.values.map(e=>(C.f[16]++,C.s[52]++,parseInt(e.value,10))));C.s[53]++,this.slider.setValues(e)}changeStep(){C.f[17]++;const e=(C.s[54]++,parseInt(this.step.value,10));C.s[55]++,this.slider.setStep(e)}changeOrientation(){C.f[18]++;const e=(C.s[56]++,!!this.getOrientationCheckbox().checked);C.s[57]++,this.slider.setOrientation(e)}changeRange(){C.f[19]++;const e=(C.s[58]++,!!this.getRangeCheckbox().checked);C.s[59]++,e?(C.b[8][1]++,C.s[61]++,this.values[0].after(this.values[1])):(C.b[8][0]++,C.s[60]++,this.values[1].remove()),C.s[62]++,this.slider.setRange(e)}changeLabelVisibility(){C.f[20]++;const e=(C.s[63]++,!!this.getShowLabelCheckbox().checked);C.s[64]++,this.slider.setLabels(e)}updateValues(){C.f[21]++,C.s[65]++,this.slider.observer.subscribe(e=>{if(C.f[22]++,C.s[66]++,e.values){C.b[9][0]++;const{values:n}=(C.s[67]++,e);C.s[68]++,this.values.forEach((e,A)=>{C.f[23]++,C.s[69]++,e.value=n[A].toString()})}else C.b[9][1]++;if(C.s[70]++,C.b[11][0]++,void 0!==e.min&&(C.b[11][1]++,void 0!==e.max)){C.b[10][0]++;const n=(C.s[71]++,[e.min,e.max]);C.s[72]++,this.minMax.forEach((e,A)=>{C.f[24]++,C.s[73]++,e.value=n[A].toString()})}else C.b[10][1]++;C.s[74]++,void 0!==e.step?(C.b[12][0]++,C.s[75]++,this.step.value=e.step.toString()):C.b[12][1]++})}createMaxMinInputs(){C.f[25]++;const e=(C.s[76]++,document.createElement("p"));C.s[77]++,e.classList.add("demo-slider__title"),C.s[78]++,this.controlPanel.append(e),C.s[79]++,e.innerText="Min/Max";const n=(C.s[80]++,document.createElement("input")),A=(C.s[81]++,document.createElement("input"));C.s[82]++,n.classList.add("demo-slider__input"),C.s[83]++,A.classList.add("demo-slider__input"),C.s[84]++,n.type="number",C.s[85]++,A.type="number",C.s[86]++,this.controlPanel.append(n),C.s[87]++,this.controlPanel.append(A),C.s[88]++,this.minMax=[n,A]}createValueInputs(){C.f[26]++;const e=(C.s[89]++,document.createElement("p"));C.s[90]++,e.classList.add("demo-slider__title"),C.s[91]++,this.controlPanel.append(e),C.s[92]++,e.innerText="Values";const n=(C.s[93]++,document.createElement("input"));if(C.s[94]++,n.classList.add("demo-slider__input","demo-slider__handler-value"),C.s[95]++,n.type="number",C.s[96]++,this.controlPanel.append(n),C.s[97]++,this.values.push(n),C.s[98]++,this.hasRange){C.b[13][0]++;const e=(C.s[99]++,document.querySelector(".demo-slider__handler-value"));C.s[100]++,e?(C.b[14][0]++,C.s[101]++,e.classList.add("demo-slider__handler-value_min")):C.b[14][1]++;const n=(C.s[102]++,document.createElement("input"));C.s[103]++,n.classList.add("demo-slider__input","demo-slider__handler-value","demo-slider__handler-value_max"),C.s[104]++,n.type="number",C.s[105]++,this.controlPanel.append(n),C.s[106]++,this.values.push(n)}else C.b[13][1]++}createStepInput(){C.f[27]++;const e=(C.s[107]++,document.createElement("p"));C.s[108]++,e.classList.add("demo-slider__title"),C.s[109]++,this.controlPanel.append(e),C.s[110]++,e.innerText="Step",C.s[111]++,this.step.classList.add("demo-slider__input"),C.s[112]++,this.step.type="number",C.s[113]++,this.controlPanel.append(this.step)}createOrientationCheckbox(){C.f[28]++;const e=(C.s[114]++,document.createElement("p"));C.s[115]++,e.classList.add("demo-slider__title"),C.s[116]++,this.controlPanel.append(e),C.s[117]++,e.innerText="Vertical",C.s[118]++,this.orientationCheck.classList.add("demo-slider__input"),C.s[119]++,this.orientationCheck.type="checkbox",C.s[120]++,this.controlPanel.append(this.orientationCheck)}createRangeCheckbox(){C.f[29]++;const e=(C.s[121]++,document.createElement("p"));C.s[122]++,e.classList.add("demo-slider__title"),C.s[123]++,this.controlPanel.append(e),C.s[124]++,e.innerText="Range",C.s[125]++,this.rangeCheck.classList.add("demo-slider__input"),C.s[126]++,this.rangeCheck.type="checkbox",C.s[127]++,this.controlPanel.append(this.rangeCheck)}createShowLabelCheckbox(){C.f[30]++;const e=(C.s[128]++,document.createElement("p"));C.s[129]++,e.classList.add("demo-slider__title"),C.s[130]++,this.controlPanel.append(e),C.s[131]++,e.innerText="Show labels",C.s[132]++,this.showLabelCheck.classList.add("demo-slider__input"),C.s[133]++,this.showLabelCheck.type="checkbox",C.s[134]++,this.controlPanel.append(this.showLabelCheck)}}var u=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",n="f61264ac8068e31bb0fa81839d43577b1c29a929",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",statementMap:{0:{start:{line:5,column:8},end:{line:5,column:52}},1:{start:{line:6,column:8},end:{line:6,column:59}},2:{start:{line:7,column:8},end:{line:7,column:56}},3:{start:{line:8,column:8},end:{line:8,column:27}},4:{start:{line:11,column:8},end:{line:11,column:31}},5:{start:{line:12,column:8},end:{line:12,column:44}},6:{start:{line:13,column:8},end:{line:13,column:64}},7:{start:{line:14,column:8},end:{line:14,column:53}},8:{start:{line:15,column:8},end:{line:15,column:46}},9:{start:{line:16,column:8},end:{line:16,column:51}},10:{start:{line:17,column:8},end:{line:17,column:47}},11:{start:{line:18,column:23},end:{line:18,column:60}},12:{start:{line:19,column:22},end:{line:19,column:46}},13:{start:{line:20,column:8},end:{line:20,column:33}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:4},end:{line:4,column:5}},loc:{start:{line:4,column:25},end:{line:9,column:5}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:18},end:{line:21,column:5}},line:10}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts"],names:[],mappings:"AACA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,YAAY,MAAM,6BAA6B,CAAC;AAEvD,MAAM,CAAC,OAAO,OAAO,UAAU;IAS7B,YAAY,OAAsB;QAN1B,WAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEvC,kBAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE9C,eAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAGjD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAEO,IAAI,CAAC,OAAsB;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC7C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,KAAK,GAAiB,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAC3B,CAAC;CACF",sourcesContent:["import { sliderOptions } from '../model/sliderOptions';\nimport Facade from '../presenter/Facade';\nimport ControlPanel from './ControlPanel/ControlPanel';\n\nexport default class SliderInit {\n  private options!: sliderOptions;\n\n  private slider = document.createElement('div');\n\n  private sliderWrapper = document.createElement('div');\n\n  private demoSlider = document.createElement('div');\n\n  constructor(options: sliderOptions) {\n    this.init(options);\n  }\n\n  private init(options: sliderOptions) {\n    this.options = options;\n    this.slider.classList.add('slider');\n    this.sliderWrapper.classList.add('demo-slider__slider');\n    this.demoSlider.classList.add('demo-slider');\n    document.body.append(this.demoSlider);\n    this.demoSlider.append(this.sliderWrapper);\n    this.sliderWrapper.append(this.slider);\n    const facade: Facade = new Facade(this.slider, this.options);\n    const panel: ControlPanel = new ControlPanel(facade);\n    return { facade, panel };\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();class d{constructor(e){u.f[0]++,u.s[0]++,this.slider=document.createElement("div"),u.s[1]++,this.sliderWrapper=document.createElement("div"),u.s[2]++,this.demoSlider=document.createElement("div"),u.s[3]++,this.init(e)}init(e){u.f[1]++,u.s[4]++,this.options=e,u.s[5]++,this.slider.classList.add("slider"),u.s[6]++,this.sliderWrapper.classList.add("demo-slider__slider"),u.s[7]++,this.demoSlider.classList.add("demo-slider"),u.s[8]++,document.body.append(this.demoSlider),u.s[9]++,this.demoSlider.append(this.sliderWrapper),u.s[10]++,this.sliderWrapper.append(this.slider);const n=(u.s[11]++,new r.a(this.slider,this.options)),A=(u.s[12]++,new c(n));return u.s[13]++,{facade:n,panel:A}}}var m=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",n="76eaaf903e47950f8ef5b6f0734aae87506025d2",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",i={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",statementMap:{0:{start:{line:3,column:16},end:{line:3,column:60}},1:{start:{line:4,column:16},end:{line:4,column:44}},2:{start:{line:5,column:16},end:{line:5,column:62}}},fnMap:{},branchMap:{},s:{0:0,1:0,2:0},f:{},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts"],names:[],mappings:"AAAA,OAAO,aAAa,CAAC;AACrB,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7D,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AAC7C,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC",sourcesContent:["import './demo.scss';\nimport SliderInit from './SliderInit';\n\nconst slider1 = new SliderInit({ max: 100, hasRange: true });\nconst slider2 = new SliderInit({ max: 200 });\nconst slider3 = new SliderInit({ max: 200, isVertical: true });\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},l=A[t]||(A[t]={});return l[e]&&l[e].hash===n?l[e]:(i.hash=n,l[e]=i)}();m.s[0]++,new d({max:100,hasRange:!0}),m.s[1]++,new d({max:200}),m.s[2]++,new d({max:200,isVertical:!0})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,