!function(e){var n={};function A(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,A),l.l=!0,l.exports}A.m=e,A.c=n,A.d=function(e,n,t){A.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},A.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},A.t=function(e,n){if(1&n&&(e=A(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(A.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)A.d(t,l,function(n){return e[n]}.bind(null,l));return t},A.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return A.d(n,"a",n),n},A.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},A.p="",A(A.s=3)}([function(e,n,A){"use strict";var t;function l(e,n,A){if(!A||typeof A.value!==t.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+n+"> is not a method!");return{configurable:t.boolTrue,get:function(){var e=A.value.bind(this);return Object.defineProperty(this,n,{value:e,configurable:t.boolTrue,writable:t.boolTrue}),e}}}Object.defineProperty(n,"__esModule",{value:!0}),function(e){e.typeOfFunction="function",e.boolTrue=!0}(t||(t={})),n.bind=l,n.default=l},function(e,n,A){"use strict";var t,l,i,o,s,a,r=(t="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",l="564c8bfae37ec6bdc1b089254e7a64755582c34d",i=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:28}},1:{start:{line:6,column:8},end:{line:6,column:30}},2:{start:{line:9,column:8},end:{line:9,column:65}},3:{start:{line:9,column:47},end:{line:9,column:63}},4:{start:{line:12,column:8},end:{line:12,column:32}},5:{start:{line:15,column:8},end:{line:15,column:82}},6:{start:{line:15,column:63},end:{line:15,column:80}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:18},end:{line:4,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:21},end:{line:7,column:5}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:20},end:{line:10,column:5}},line:8},3:{name:"(anonymous_3)",decl:{start:{line:9,column:31},end:{line:9,column:32}},loc:{start:{line:9,column:47},end:{line:9,column:63}},line:9},4:{name:"(anonymous_4)",decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:18},end:{line:13,column:5}},line:11},5:{name:"(anonymous_5)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:20},end:{line:16,column:5}},line:14},6:{name:"(anonymous_6)",decl:{start:{line:15,column:47},end:{line:15,column:48}},loc:{start:{line:15,column:63},end:{line:15,column:80}},line:15}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/observer/observer.ts"],names:[],mappings:"AAAA,MAAM,CAAC,OAAO,OAAO,aAAa;IAGhC;QACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,SAAS,CAAC,IAAY;QAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEM,SAAS,CAAC,EAAY;QAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAEM,WAAW,CAAC,EAAY;QAC7B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC;IAC5E,CAAC;CACF",sourcesContent:["export default class EventObserver {\n  private observers: Function[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  public getSubscribers(): Function[] {\n    return this.observers;\n  }\n\n  public broadcast(data: object): void {\n    this.observers.forEach((subscriber) => subscriber(data));\n  }\n\n  public subscribe(fn: Function): void {\n    this.observers.push(fn);\n  }\n\n  public unsubscribe(fn: Function): void {\n    this.observers = this.observers.filter((subscriber) => subscriber !== fn);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[o="__coverage__"]||(i[o]={}))[t]&&a[t].hash===l?a[t]:(s.hash=l,a[t]=s));class C{constructor(){r.f[0]++,r.s[0]++,this.observers=[]}getSubscribers(){return r.f[1]++,r.s[1]++,this.observers}broadcast(e){r.f[2]++,r.s[2]++,this.observers.forEach(n=>(r.f[3]++,r.s[3]++,n(e)))}subscribe(e){r.f[4]++,r.s[4]++,this.observers.push(e)}unsubscribe(e){r.f[5]++,r.s[5]++,this.observers=this.observers.filter(n=>(r.f[6]++,r.s[6]++,n!==e))}}var c=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts",n="dc19fd02b84097bff224e1a7745ed8a19fc22682",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:38}},1:{start:{line:6,column:8},end:{line:6,column:42}},2:{start:{line:10,column:24},end:{line:10,column:42}},3:{start:{line:11,column:8},end:{line:14,column:9}},4:{start:{line:12,column:12},end:{line:12,column:41}},5:{start:{line:13,column:12},end:{line:13,column:32}},6:{start:{line:15,column:8},end:{line:31,column:9}},7:{start:{line:16,column:12},end:{line:19,column:13}},8:{start:{line:17,column:16},end:{line:17,column:45}},9:{start:{line:18,column:16},end:{line:18,column:36}},10:{start:{line:20,column:26},end:{line:20,column:81}},11:{start:{line:21,column:12},end:{line:21,column:70}},12:{start:{line:22,column:12},end:{line:29,column:13}},13:{start:{line:23,column:16},end:{line:25,column:17}},14:{start:{line:24,column:20},end:{line:24,column:77}},15:{start:{line:27,column:17},end:{line:29,column:13}},16:{start:{line:28,column:16},end:{line:28,column:74}},17:{start:{line:30,column:12},end:{line:30,column:32}},18:{start:{line:32,column:8},end:{line:35,column:9}},19:{start:{line:33,column:12},end:{line:33,column:36}},20:{start:{line:34,column:12},end:{line:34,column:32}},21:{start:{line:36,column:8},end:{line:36,column:58}},22:{start:{line:37,column:8},end:{line:39,column:9}},23:{start:{line:38,column:12},end:{line:38,column:32}},24:{start:{line:40,column:8},end:{line:40,column:28}},25:{start:{line:43,column:30},end:{line:43,column:36}},26:{start:{line:44,column:8},end:{line:46,column:9}},27:{start:{line:45,column:12},end:{line:45,column:88}},28:{start:{line:47,column:8},end:{line:47,column:29}},29:{start:{line:50,column:27},end:{line:50,column:32}},30:{start:{line:51,column:8},end:{line:53,column:9}},31:{start:{line:52,column:12},end:{line:52,column:31}},32:{start:{line:54,column:8},end:{line:56,column:9}},33:{start:{line:55,column:12},end:{line:55,column:31}},34:{start:{line:57,column:8},end:{line:57,column:28}},35:{start:{line:60,column:24},end:{line:60,column:33}},36:{start:{line:61,column:8},end:{line:63,column:9}},37:{start:{line:62,column:12},end:{line:62,column:27}},38:{start:{line:64,column:8},end:{line:66,column:9}},39:{start:{line:65,column:12},end:{line:65,column:21}},40:{start:{line:67,column:8},end:{line:67,column:20}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:32},end:{line:4,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:28},end:{line:7,column:5}},line:5},2:{name:"(anonymous_2)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:71},end:{line:41,column:5}},line:8},3:{name:"(anonymous_3)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:45},end:{line:48,column:5}},line:42},4:{name:"(anonymous_4)",decl:{start:{line:49,column:4},end:{line:49,column:5}},loc:{start:{line:49,column:41},end:{line:58,column:5}},line:49},5:{name:"(anonymous_5)",decl:{start:{line:59,column:4},end:{line:59,column:5}},loc:{start:{line:59,column:38},end:{line:68,column:5}},line:59}},branchMap:{0:{loc:{start:{line:11,column:8},end:{line:14,column:9}},type:"if",locations:[{start:{line:11,column:8},end:{line:14,column:9}},{start:{line:11,column:8},end:{line:14,column:9}}],line:11},1:{loc:{start:{line:11,column:12},end:{line:11,column:59}},type:"binary-expr",locations:[{start:{line:11,column:12},end:{line:11,column:23}},{start:{line:11,column:27},end:{line:11,column:59}}],line:11},2:{loc:{start:{line:15,column:8},end:{line:31,column:9}},type:"if",locations:[{start:{line:15,column:8},end:{line:31,column:9}},{start:{line:15,column:8},end:{line:31,column:9}}],line:15},3:{loc:{start:{line:16,column:12},end:{line:19,column:13}},type:"if",locations:[{start:{line:16,column:12},end:{line:19,column:13}},{start:{line:16,column:12},end:{line:19,column:13}}],line:16},4:{loc:{start:{line:16,column:16},end:{line:16,column:55}},type:"binary-expr",locations:[{start:{line:16,column:16},end:{line:16,column:27}},{start:{line:16,column:31},end:{line:16,column:55}}],line:16},5:{loc:{start:{line:22,column:12},end:{line:29,column:13}},type:"if",locations:[{start:{line:22,column:12},end:{line:29,column:13}},{start:{line:22,column:12},end:{line:29,column:13}}],line:22},6:{loc:{start:{line:23,column:16},end:{line:25,column:17}},type:"if",locations:[{start:{line:23,column:16},end:{line:25,column:17}},{start:{line:23,column:16},end:{line:25,column:17}}],line:23},7:{loc:{start:{line:27,column:17},end:{line:29,column:13}},type:"if",locations:[{start:{line:27,column:17},end:{line:29,column:13}},{start:{line:27,column:17},end:{line:29,column:13}}],line:27},8:{loc:{start:{line:32,column:8},end:{line:35,column:9}},type:"if",locations:[{start:{line:32,column:8},end:{line:35,column:9}},{start:{line:32,column:8},end:{line:35,column:9}}],line:32},9:{loc:{start:{line:32,column:12},end:{line:32,column:74}},type:"binary-expr",locations:[{start:{line:32,column:12},end:{line:32,column:41}},{start:{line:32,column:45},end:{line:32,column:74}}],line:32},10:{loc:{start:{line:37,column:8},end:{line:39,column:9}},type:"if",locations:[{start:{line:37,column:8},end:{line:39,column:9}},{start:{line:37,column:8},end:{line:39,column:9}}],line:37},11:{loc:{start:{line:44,column:8},end:{line:46,column:9}},type:"if",locations:[{start:{line:44,column:8},end:{line:46,column:9}},{start:{line:44,column:8},end:{line:46,column:9}}],line:44},12:{loc:{start:{line:44,column:12},end:{line:44,column:56}},type:"binary-expr",locations:[{start:{line:44,column:12},end:{line:44,column:47}},{start:{line:44,column:51},end:{line:44,column:56}}],line:44},13:{loc:{start:{line:51,column:8},end:{line:53,column:9}},type:"if",locations:[{start:{line:51,column:8},end:{line:53,column:9}},{start:{line:51,column:8},end:{line:53,column:9}}],line:51},14:{loc:{start:{line:54,column:8},end:{line:56,column:9}},type:"if",locations:[{start:{line:54,column:8},end:{line:56,column:9}},{start:{line:54,column:8},end:{line:56,column:9}}],line:54},15:{loc:{start:{line:61,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:61,column:8},end:{line:63,column:9}},{start:{line:61,column:8},end:{line:63,column:9}}],line:61},16:{loc:{start:{line:64,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:66,column:9}},{start:{line:64,column:8},end:{line:66,column:9}}],line:64}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/Validators.ts"],names:[],mappings:"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",sourcesContent:["export default class Validators {\n  public static isValidNumber(value: number): boolean {\n    return Number.isFinite(value);\n  }\n\n  public static isBoolean(value: boolean): boolean {\n    return typeof value === 'boolean';\n  }\n\n  public static verifyValue(newValue: number, index: number, currentValues: number[], min: number, max: number, step: number): number {\n    let checkedValue;\n    const modulus = (max - min) % step;\n    if (modulus > 0 && (newValue + min) > max - modulus) {\n      checkedValue = max - modulus;\n      return checkedValue;\n    }\n    if (min < 0) {\n      if (modulus > 0 && newValue > max - modulus) {\n        checkedValue = max - modulus;\n        return checkedValue;\n      }\n      const shift = Math.abs(min) - Math.round(Math.abs(min) / step) * step;\n      checkedValue = Math.round(newValue / step) * step - shift;\n      if (shift >= 0) {\n        if (newValue < currentValues[index]) {\n          checkedValue = Math.ceil(newValue / step) * step - shift;\n        }\n      } else if (newValue > currentValues[index]) {\n        checkedValue = Math.floor(newValue / step) * step - shift;\n      }\n      return checkedValue;\n    }\n    if (newValue === currentValues[0] || newValue === currentValues[1]) {\n      checkedValue = newValue;\n      return checkedValue;\n    }\n\n    checkedValue = Math.round(newValue / step) * step;\n    if ((checkedValue - min) % step !== 0) {\n      checkedValue += min;\n    }\n    return checkedValue;\n  }\n\n  public static verifyMinMaxValues(values: number [], range: boolean): number [] {\n    const checkedValues = values;\n    if (checkedValues[0] > checkedValues[1] && range) {\n      [checkedValues[0], checkedValues[1]] = [checkedValues[1], checkedValues[0]];\n    }\n    return checkedValues;\n  }\n\n  public static verifyLimits(value: number, min: number, max: number): number {\n    let checkedValue = value;\n    if (checkedValue < min) {\n      checkedValue = min;\n    } if (checkedValue > max) {\n      checkedValue = max;\n    }\n    return checkedValue;\n  }\n\n  public static verifyStep(step: number, min: number, max: number): number {\n    const maxStep = max - min;\n    if (step > maxStep) {\n      return maxStep;\n    } if (step <= 0) {\n      return 1;\n    }\n    return step;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class u{static isValidNumber(e){return c.f[0]++,c.s[0]++,Number.isFinite(e)}static isBoolean(e){return c.f[1]++,c.s[1]++,"boolean"==typeof e}static verifyValue(e,n,A,t,l,i){let o;c.f[2]++;const s=(c.s[2]++,(l-t)%i);if(c.s[3]++,c.b[1][0]++,s>0&&(c.b[1][1]++,e+t>l-s))return c.b[0][0]++,c.s[4]++,o=l-s,c.s[5]++,o;if(c.b[0][1]++,c.s[6]++,t<0){if(c.b[2][0]++,c.s[7]++,c.b[4][0]++,s>0&&(c.b[4][1]++,e>l-s))return c.b[3][0]++,c.s[8]++,o=l-s,c.s[9]++,o;c.b[3][1]++;const a=(c.s[10]++,Math.abs(t)-Math.round(Math.abs(t)/i)*i);return c.s[11]++,o=Math.round(e/i)*i-a,c.s[12]++,a>=0?(c.b[5][0]++,c.s[13]++,e<A[n]?(c.b[6][0]++,c.s[14]++,o=Math.ceil(e/i)*i-a):c.b[6][1]++):(c.b[5][1]++,c.s[15]++,e>A[n]?(c.b[7][0]++,c.s[16]++,o=Math.floor(e/i)*i-a):c.b[7][1]++),c.s[17]++,o}return c.b[2][1]++,c.s[18]++,c.b[9][0]++,e===A[0]||(c.b[9][1]++,e===A[1])?(c.b[8][0]++,c.s[19]++,o=e,c.s[20]++,o):(c.b[8][1]++,c.s[21]++,o=Math.round(e/i)*i,c.s[22]++,(o-t)%i!=0?(c.b[10][0]++,c.s[23]++,o+=t):c.b[10][1]++,c.s[24]++,o)}static verifyMinMaxValues(e,n){c.f[3]++;const A=(c.s[25]++,e);return c.s[26]++,c.b[12][0]++,A[0]>A[1]&&(c.b[12][1]++,n)?(c.b[11][0]++,c.s[27]++,[A[0],A[1]]=[A[1],A[0]]):c.b[11][1]++,c.s[28]++,A}static verifyLimits(e,n,A){c.f[4]++;let t=(c.s[29]++,e);return c.s[30]++,t<n?(c.b[13][0]++,c.s[31]++,t=n):c.b[13][1]++,c.s[32]++,t>A?(c.b[14][0]++,c.s[33]++,t=A):c.b[14][1]++,c.s[34]++,t}static verifyStep(e,n,A){c.f[5]++;const t=(c.s[35]++,A-n);return c.s[36]++,e>t?(c.b[15][0]++,c.s[37]++,t):(c.b[15][1]++,c.s[38]++,e<=0?(c.b[16][0]++,c.s[39]++,1):(c.b[16][1]++,c.s[40]++,e))}}var d=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",n="6a49d2b43c805d8a7ffeba34d47c237bff064dcc",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",statementMap:{0:{start:{line:5,column:8},end:{line:5,column:44}},1:{start:{line:6,column:8},end:{line:14,column:10}},2:{start:{line:15,column:8},end:{line:15,column:27}},3:{start:{line:18,column:77},end:{line:18,column:86}},4:{start:{line:19,column:8},end:{line:20,column:29}},5:{start:{line:20,column:12},end:{line:20,column:29}},6:{start:{line:21,column:8},end:{line:22,column:29}},7:{start:{line:22,column:12},end:{line:22,column:29}},8:{start:{line:23,column:8},end:{line:24,column:35}},9:{start:{line:24,column:12},end:{line:24,column:35}},10:{start:{line:25,column:8},end:{line:26,column:44}},11:{start:{line:26,column:12},end:{line:26,column:44}},12:{start:{line:27,column:8},end:{line:28,column:31}},13:{start:{line:28,column:12},end:{line:28,column:31}},14:{start:{line:29,column:8},end:{line:30,column:36}},15:{start:{line:30,column:12},end:{line:30,column:36}},16:{start:{line:31,column:8},end:{line:32,column:38}},17:{start:{line:32,column:12},end:{line:32,column:38}},18:{start:{line:35,column:8},end:{line:35,column:28}},19:{start:{line:38,column:8},end:{line:40,column:9}},20:{start:{line:39,column:12},end:{line:39,column:36}},21:{start:{line:41,column:8},end:{line:41,column:32}},22:{start:{line:44,column:8},end:{line:49,column:9}},23:{start:{line:45,column:12},end:{line:45,column:35}},24:{start:{line:48,column:12},end:{line:48,column:33}},25:{start:{line:50,column:8},end:{line:55,column:11}},26:{start:{line:58,column:8},end:{line:60,column:9}},27:{start:{line:59,column:12},end:{line:59,column:36}},28:{start:{line:61,column:8},end:{line:63,column:9}},29:{start:{line:62,column:12},end:{line:62,column:56}},30:{start:{line:64,column:8},end:{line:64,column:32}},31:{start:{line:67,column:8},end:{line:72,column:9}},32:{start:{line:68,column:12},end:{line:68,column:35}},33:{start:{line:71,column:12},end:{line:71,column:33}},34:{start:{line:73,column:8},end:{line:78,column:11}},35:{start:{line:81,column:8},end:{line:81,column:99}},36:{start:{line:82,column:8},end:{line:82,column:33}},37:{start:{line:85,column:8},end:{line:90,column:9}},38:{start:{line:86,column:12},end:{line:86,column:90}},39:{start:{line:89,column:12},end:{line:89,column:34}},40:{start:{line:91,column:8},end:{line:94,column:11}},41:{start:{line:97,column:8},end:{line:97,column:177}},42:{start:{line:97,column:72},end:{line:97,column:175}},43:{start:{line:98,column:8},end:{line:98,column:127}},44:{start:{line:98,column:65},end:{line:98,column:125}},45:{start:{line:99,column:8},end:{line:99,column:104}},46:{start:{line:100,column:8},end:{line:100,column:35}},47:{start:{line:103,column:28},end:{line:108,column:10}},48:{start:{line:104,column:12},end:{line:106,column:13}},49:{start:{line:105,column:16},end:{line:105,column:29}},50:{start:{line:107,column:12},end:{line:107,column:21}},51:{start:{line:109,column:8},end:{line:114,column:11}},52:{start:{line:110,column:12},end:{line:112,column:13}},53:{start:{line:111,column:16},end:{line:111,column:127}},54:{start:{line:113,column:12},end:{line:113,column:25}},55:{start:{line:115,column:8},end:{line:115,column:115}},56:{start:{line:115,column:53},end:{line:115,column:113}},57:{start:{line:116,column:8},end:{line:116,column:98}},58:{start:{line:117,column:8},end:{line:119,column:11}},59:{start:{line:122,column:8},end:{line:122,column:39}},60:{start:{line:125,column:8},end:{line:130,column:9}},61:{start:{line:126,column:12},end:{line:126,column:47}},62:{start:{line:129,column:12},end:{line:129,column:56}},63:{start:{line:131,column:8},end:{line:134,column:11}},64:{start:{line:137,column:8},end:{line:137,column:37}},65:{start:{line:140,column:8},end:{line:145,column:9}},66:{start:{line:141,column:12},end:{line:141,column:42}},67:{start:{line:144,column:12},end:{line:144,column:51}},68:{start:{line:146,column:8},end:{line:149,column:11}},69:{start:{line:152,column:8},end:{line:152,column:38}},70:{start:{line:155,column:8},end:{line:160,column:9}},71:{start:{line:156,column:12},end:{line:156,column:43}},72:{start:{line:159,column:12},end:{line:159,column:52}},73:{start:{line:161,column:8},end:{line:163,column:11}},74:{start:{line:166,column:77},end:{line:166,column:84}},75:{start:{line:167,column:8},end:{line:168,column:29}},76:{start:{line:168,column:12},end:{line:168,column:29}},77:{start:{line:169,column:8},end:{line:170,column:29}},78:{start:{line:170,column:12},end:{line:170,column:29}},79:{start:{line:171,column:8},end:{line:172,column:31}},80:{start:{line:172,column:12},end:{line:172,column:31}},81:{start:{line:173,column:8},end:{line:176,column:9}},82:{start:{line:174,column:12},end:{line:174,column:39}},83:{start:{line:175,column:12},end:{line:175,column:35}},84:{start:{line:177,column:8},end:{line:178,column:36}},85:{start:{line:178,column:12},end:{line:178,column:36}},86:{start:{line:179,column:8},end:{line:180,column:44}},87:{start:{line:180,column:12},end:{line:180,column:44}},88:{start:{line:181,column:8},end:{line:182,column:38}},89:{start:{line:182,column:12},end:{line:182,column:38}},90:{start:{line:185,column:8},end:{line:185,column:43}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:4},end:{line:4,column:5}},loc:{start:{line:4,column:25},end:{line:16,column:5}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:22},end:{line:33,column:5}},line:17},2:{name:"(anonymous_2)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:17},end:{line:36,column:5}},line:34},3:{name:"(anonymous_3)",decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:13},end:{line:42,column:5}},line:37},4:{name:"(anonymous_4)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:16},end:{line:56,column:5}},line:43},5:{name:"(anonymous_5)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:13},end:{line:65,column:5}},line:57},6:{name:"(anonymous_6)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:16},end:{line:79,column:5}},line:66},7:{name:"(anonymous_7)",decl:{start:{line:80,column:4},end:{line:80,column:5}},loc:{start:{line:80,column:14},end:{line:83,column:5}},line:80},8:{name:"(anonymous_8)",decl:{start:{line:84,column:4},end:{line:84,column:5}},loc:{start:{line:84,column:18},end:{line:95,column:5}},line:84},9:{name:"(anonymous_9)",decl:{start:{line:96,column:4},end:{line:96,column:5}},loc:{start:{line:96,column:16},end:{line:101,column:5}},line:96},10:{name:"(anonymous_10)",decl:{start:{line:97,column:54},end:{line:97,column:55}},loc:{start:{line:97,column:72},end:{line:97,column:175}},line:97},11:{name:"(anonymous_11)",decl:{start:{line:98,column:54},end:{line:98,column:55}},loc:{start:{line:98,column:65},end:{line:98,column:125}},line:98},12:{name:"(anonymous_12)",decl:{start:{line:102,column:4},end:{line:102,column:5}},loc:{start:{line:102,column:22},end:{line:120,column:5}},line:102},13:{name:"(anonymous_13)",decl:{start:{line:103,column:39},end:{line:103,column:40}},loc:{start:{line:103,column:50},end:{line:108,column:9}},line:103},14:{name:"(anonymous_14)",decl:{start:{line:109,column:35},end:{line:109,column:36}},loc:{start:{line:109,column:53},end:{line:114,column:9}},line:109},15:{name:"(anonymous_15)",decl:{start:{line:115,column:42},end:{line:115,column:43}},loc:{start:{line:115,column:53},end:{line:115,column:113}},line:115},16:{name:"(anonymous_16)",decl:{start:{line:121,column:4},end:{line:121,column:5}},loc:{start:{line:121,column:21},end:{line:123,column:5}},line:121},17:{name:"(anonymous_17)",decl:{start:{line:124,column:4},end:{line:124,column:5}},loc:{start:{line:124,column:29},end:{line:135,column:5}},line:124},18:{name:"(anonymous_18)",decl:{start:{line:136,column:4},end:{line:136,column:5}},loc:{start:{line:136,column:15},end:{line:138,column:5}},line:136},19:{name:"(anonymous_19)",decl:{start:{line:139,column:4},end:{line:139,column:5}},loc:{start:{line:139,column:20},end:{line:150,column:5}},line:139},20:{name:"(anonymous_20)",decl:{start:{line:151,column:4},end:{line:151,column:5}},loc:{start:{line:151,column:16},end:{line:153,column:5}},line:151},21:{name:"(anonymous_21)",decl:{start:{line:154,column:4},end:{line:154,column:5}},loc:{start:{line:154,column:21},end:{line:164,column:5}},line:154},22:{name:"(anonymous_22)",decl:{start:{line:165,column:4},end:{line:165,column:5}},loc:{start:{line:165,column:18},end:{line:183,column:5}},line:165},23:{name:"(anonymous_23)",decl:{start:{line:184,column:4},end:{line:184,column:5}},loc:{start:{line:184,column:32},end:{line:186,column:5}},line:184}},branchMap:{0:{loc:{start:{line:19,column:8},end:{line:20,column:29}},type:"if",locations:[{start:{line:19,column:8},end:{line:20,column:29}},{start:{line:19,column:8},end:{line:20,column:29}}],line:19},1:{loc:{start:{line:21,column:8},end:{line:22,column:29}},type:"if",locations:[{start:{line:21,column:8},end:{line:22,column:29}},{start:{line:21,column:8},end:{line:22,column:29}}],line:21},2:{loc:{start:{line:23,column:8},end:{line:24,column:35}},type:"if",locations:[{start:{line:23,column:8},end:{line:24,column:35}},{start:{line:23,column:8},end:{line:24,column:35}}],line:23},3:{loc:{start:{line:25,column:8},end:{line:26,column:44}},type:"if",locations:[{start:{line:25,column:8},end:{line:26,column:44}},{start:{line:25,column:8},end:{line:26,column:44}}],line:25},4:{loc:{start:{line:27,column:8},end:{line:28,column:31}},type:"if",locations:[{start:{line:27,column:8},end:{line:28,column:31}},{start:{line:27,column:8},end:{line:28,column:31}}],line:27},5:{loc:{start:{line:29,column:8},end:{line:30,column:36}},type:"if",locations:[{start:{line:29,column:8},end:{line:30,column:36}},{start:{line:29,column:8},end:{line:30,column:36}}],line:29},6:{loc:{start:{line:31,column:8},end:{line:32,column:38}},type:"if",locations:[{start:{line:31,column:8},end:{line:32,column:38}},{start:{line:31,column:8},end:{line:32,column:38}}],line:31},7:{loc:{start:{line:38,column:8},end:{line:40,column:9}},type:"if",locations:[{start:{line:38,column:8},end:{line:40,column:9}},{start:{line:38,column:8},end:{line:40,column:9}}],line:38},8:{loc:{start:{line:44,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:44,column:8},end:{line:49,column:9}},{start:{line:44,column:8},end:{line:49,column:9}}],line:44},9:{loc:{start:{line:58,column:8},end:{line:60,column:9}},type:"if",locations:[{start:{line:58,column:8},end:{line:60,column:9}},{start:{line:58,column:8},end:{line:60,column:9}}],line:58},10:{loc:{start:{line:61,column:8},end:{line:63,column:9}},type:"if",locations:[{start:{line:61,column:8},end:{line:63,column:9}},{start:{line:61,column:8},end:{line:63,column:9}}],line:61},11:{loc:{start:{line:67,column:8},end:{line:72,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:72,column:9}},{start:{line:67,column:8},end:{line:72,column:9}}],line:67},12:{loc:{start:{line:85,column:8},end:{line:90,column:9}},type:"if",locations:[{start:{line:85,column:8},end:{line:90,column:9}},{start:{line:85,column:8},end:{line:90,column:9}}],line:85},13:{loc:{start:{line:104,column:12},end:{line:106,column:13}},type:"if",locations:[{start:{line:104,column:12},end:{line:106,column:13}},{start:{line:104,column:12},end:{line:106,column:13}}],line:104},14:{loc:{start:{line:110,column:12},end:{line:112,column:13}},type:"if",locations:[{start:{line:110,column:12},end:{line:112,column:13}},{start:{line:110,column:12},end:{line:112,column:13}}],line:110},15:{loc:{start:{line:125,column:8},end:{line:130,column:9}},type:"if",locations:[{start:{line:125,column:8},end:{line:130,column:9}},{start:{line:125,column:8},end:{line:130,column:9}}],line:125},16:{loc:{start:{line:140,column:8},end:{line:145,column:9}},type:"if",locations:[{start:{line:140,column:8},end:{line:145,column:9}},{start:{line:140,column:8},end:{line:145,column:9}}],line:140},17:{loc:{start:{line:155,column:8},end:{line:160,column:9}},type:"if",locations:[{start:{line:155,column:8},end:{line:160,column:9}},{start:{line:155,column:8},end:{line:160,column:9}}],line:155},18:{loc:{start:{line:167,column:8},end:{line:168,column:29}},type:"if",locations:[{start:{line:167,column:8},end:{line:168,column:29}},{start:{line:167,column:8},end:{line:168,column:29}}],line:167},19:{loc:{start:{line:169,column:8},end:{line:170,column:29}},type:"if",locations:[{start:{line:169,column:8},end:{line:170,column:29}},{start:{line:169,column:8},end:{line:170,column:29}}],line:169},20:{loc:{start:{line:171,column:8},end:{line:172,column:31}},type:"if",locations:[{start:{line:171,column:8},end:{line:172,column:31}},{start:{line:171,column:8},end:{line:172,column:31}}],line:171},21:{loc:{start:{line:173,column:8},end:{line:176,column:9}},type:"if",locations:[{start:{line:173,column:8},end:{line:176,column:9}},{start:{line:173,column:8},end:{line:176,column:9}}],line:173},22:{loc:{start:{line:177,column:8},end:{line:178,column:36}},type:"if",locations:[{start:{line:177,column:8},end:{line:178,column:36}},{start:{line:177,column:8},end:{line:178,column:36}}],line:177},23:{loc:{start:{line:179,column:8},end:{line:180,column:44}},type:"if",locations:[{start:{line:179,column:8},end:{line:180,column:44}},{start:{line:179,column:8},end:{line:180,column:44}}],line:179},24:{loc:{start:{line:181,column:8},end:{line:182,column:38}},type:"if",locations:[{start:{line:181,column:8},end:{line:182,column:38}},{start:{line:181,column:8},end:{line:182,column:38}}],line:181}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/model/MainModel.ts"],names:[],mappings:"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",sourcesContent:["import EventObserver from '../observer/observer';\nimport { sliderOptions } from './sliderOptions';\nimport { definedOptions } from './definedOptions';\nimport Validators from './Validators';\n\nexport default class MainModel {\n  public observer = new EventObserver();\n\n  private options: definedOptions = {\n    min: 0,\n    max: 100,\n    step: 1,\n    values: [10, 20],\n    isVertical: false,\n    hasRange: true,\n    hasLabels: true,\n  }\n\n  constructor(options: sliderOptions) {\n    this.init(options);\n  }\n\n  public update(valueData: sliderOptions): void {\n    const {\n      min, max, values, isVertical, step, hasRange, hasLabels,\n    } = valueData;\n    if (min !== undefined) this.setMin(min);\n    if (max !== undefined) this.setMax(max);\n    if (values !== undefined) this.setValues(values);\n    if (isVertical !== undefined) this.setOrientation(isVertical);\n    if (step !== undefined) this.setStep(step);\n    if (hasRange !== undefined) this.setRange(hasRange);\n    if (hasLabels !== undefined) this.setLabels(hasLabels);\n  }\n\n  public getOptions(): definedOptions {\n    return this.options;\n  }\n\n  public getMin(): number {\n    if (this.options.min > this.options.max) {\n      return this.options.max;\n    }\n    return this.options.min;\n  }\n\n  public setMin(min: number): void {\n    if (Validators.isValidNumber(min)) {\n      this.options.min = min;\n    } else {\n      this.options.min = 0;\n    }\n    this.broadcastUpdates({\n      min: this.getMin(),\n      max: this.getMax(),\n      values: this.getValues(),\n      step: this.getStep(),\n    });\n  }\n\n  public getMax(): number {\n    if (this.options.max < this.options.min) {\n      return this.options.min;\n    }\n    if (this.options.max === this.options.min) {\n      return this.options.max + this.options.step;\n    }\n    return this.options.max;\n  }\n\n  public setMax(max: number): void {\n    if (Validators.isValidNumber(max)) {\n      this.options.max = max;\n    } else {\n      this.options.max = 0;\n    }\n    this.broadcastUpdates({\n      min: this.getMin(),\n      max: this.getMax(),\n      values: this.getValues(),\n      step: this.getStep(),\n    });\n  }\n\n  public getStep(): number {\n    this.options.step = Validators.verifyStep(this.options.step, this.getMin(), this.getMax());\n    return this.options.step;\n  }\n\n  public setStep(step: number): void {\n    if (Validators.isValidNumber(step)) {\n      this.options.step = Validators.verifyStep(step, this.getMin(), this.getMax());\n    } else {\n      this.options.step = 1;\n    }\n    this.broadcastUpdates({\n      step: this.getStep(),\n      values: this.getValues(),\n    });\n  }\n\n  public getValues(): number[] {\n    this.options.values = this.options.values.map((value, index) => Validators.verifyValue(value, index, this.options.values, this.getMin(), this.getMax(), this.getStep()));\n    this.options.values = this.options.values.map((value) => Validators.verifyLimits(value, this.getMin(), this.getMax()));\n    this.options.values = Validators.verifyMinMaxValues(this.options.values, this.options.hasRange);\n    return this.options.values;\n  }\n\n  public setValues(values: number[]): void {\n    let checkedValues = values.map((value) => {\n      if (Validators.isValidNumber(value)) {\n        return value;\n      }\n      return 0;\n    });\n    checkedValues = values.map((value, index) => {\n      if (value !== this.options.values[index]) {\n        return Validators.verifyValue(value, index, this.options.values, this.getMin(), this.getMax(), this.getStep());\n      }\n      return value;\n    });\n    checkedValues = checkedValues.map((value) => Validators.verifyLimits(value, this.getMin(), this.getMax()));\n    this.options.values = Validators.verifyMinMaxValues(checkedValues, this.options.hasRange);\n    this.broadcastUpdates({\n      values: this.options.values,\n    });\n  }\n\n  public getOrientation(): boolean {\n    return this.options.isVertical;\n  }\n\n  public setOrientation(vertical: boolean): void {\n    if (Validators.isBoolean(vertical)) {\n      this.options.isVertical = vertical;\n    } else {\n      this.options.isVertical = Boolean(vertical);\n    }\n    this.broadcastUpdates({\n      values: this.getValues(),\n      isVertical: this.getOrientation(),\n    });\n  }\n\n  public getRange(): boolean {\n    return this.options.hasRange;\n  }\n\n  public setRange(range: boolean): void {\n    if (Validators.isBoolean(range)) {\n      this.options.hasRange = range;\n    } else {\n      this.options.hasRange = Boolean(range);\n    }\n    this.broadcastUpdates({\n      values: this.getValues(),\n      hasRange: this.getRange(),\n    });\n  }\n\n  public getLabels(): boolean {\n    return this.options.hasLabels;\n  }\n\n  public setLabels(label: boolean): void {\n    if (Validators.isBoolean(label)) {\n      this.options.hasLabels = label;\n    } else {\n      this.options.hasLabels = Boolean(label);\n    }\n    this.broadcastUpdates({\n      hasLabels: this.getLabels(),\n    });\n  }\n\n  private init(options: sliderOptions): void {\n    const {\n      min, max, values, isVertical, step, hasRange, hasLabels,\n    } = options;\n    if (max !== undefined) this.setMax(max);\n    if (min !== undefined) this.setMin(min);\n    if (step !== undefined) this.setStep(step);\n    if (values !== undefined) {\n      values.push(values[0] + 1);\n      this.setValues(values);\n    }\n    if (hasRange !== undefined) this.setRange(hasRange);\n    if (isVertical !== undefined) this.setOrientation(isVertical);\n    if (hasLabels !== undefined) this.setLabels(hasLabels);\n  }\n\n  private broadcastUpdates(valueData: sliderOptions): void {\n    this.observer.broadcast(valueData);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class m{constructor(e){d.f[0]++,d.s[0]++,this.observer=new C,d.s[1]++,this.options={min:0,max:100,step:1,values:[10,20],isVertical:!1,hasRange:!0,hasLabels:!0},d.s[2]++,this.init(e)}update(e){d.f[1]++;const{min:n,max:A,values:t,isVertical:l,step:i,hasRange:o,hasLabels:s}=(d.s[3]++,e);d.s[4]++,void 0!==n?(d.b[0][0]++,d.s[5]++,this.setMin(n)):d.b[0][1]++,d.s[6]++,void 0!==A?(d.b[1][0]++,d.s[7]++,this.setMax(A)):d.b[1][1]++,d.s[8]++,void 0!==t?(d.b[2][0]++,d.s[9]++,this.setValues(t)):d.b[2][1]++,d.s[10]++,void 0!==l?(d.b[3][0]++,d.s[11]++,this.setOrientation(l)):d.b[3][1]++,d.s[12]++,void 0!==i?(d.b[4][0]++,d.s[13]++,this.setStep(i)):d.b[4][1]++,d.s[14]++,void 0!==o?(d.b[5][0]++,d.s[15]++,this.setRange(o)):d.b[5][1]++,d.s[16]++,void 0!==s?(d.b[6][0]++,d.s[17]++,this.setLabels(s)):d.b[6][1]++}getOptions(){return d.f[2]++,d.s[18]++,this.options}getMin(){return d.f[3]++,d.s[19]++,this.options.min>this.options.max?(d.b[7][0]++,d.s[20]++,this.options.max):(d.b[7][1]++,d.s[21]++,this.options.min)}setMin(e){d.f[4]++,d.s[22]++,u.isValidNumber(e)?(d.b[8][0]++,d.s[23]++,this.options.min=e):(d.b[8][1]++,d.s[24]++,this.options.min=0),d.s[25]++,this.broadcastUpdates({min:this.getMin(),max:this.getMax(),values:this.getValues(),step:this.getStep()})}getMax(){return d.f[5]++,d.s[26]++,this.options.max<this.options.min?(d.b[9][0]++,d.s[27]++,this.options.min):(d.b[9][1]++,d.s[28]++,this.options.max===this.options.min?(d.b[10][0]++,d.s[29]++,this.options.max+this.options.step):(d.b[10][1]++,d.s[30]++,this.options.max))}setMax(e){d.f[6]++,d.s[31]++,u.isValidNumber(e)?(d.b[11][0]++,d.s[32]++,this.options.max=e):(d.b[11][1]++,d.s[33]++,this.options.max=0),d.s[34]++,this.broadcastUpdates({min:this.getMin(),max:this.getMax(),values:this.getValues(),step:this.getStep()})}getStep(){return d.f[7]++,d.s[35]++,this.options.step=u.verifyStep(this.options.step,this.getMin(),this.getMax()),d.s[36]++,this.options.step}setStep(e){d.f[8]++,d.s[37]++,u.isValidNumber(e)?(d.b[12][0]++,d.s[38]++,this.options.step=u.verifyStep(e,this.getMin(),this.getMax())):(d.b[12][1]++,d.s[39]++,this.options.step=1),d.s[40]++,this.broadcastUpdates({step:this.getStep(),values:this.getValues()})}getValues(){return d.f[9]++,d.s[41]++,this.options.values=this.options.values.map((e,n)=>(d.f[10]++,d.s[42]++,u.verifyValue(e,n,this.options.values,this.getMin(),this.getMax(),this.getStep()))),d.s[43]++,this.options.values=this.options.values.map(e=>(d.f[11]++,d.s[44]++,u.verifyLimits(e,this.getMin(),this.getMax()))),d.s[45]++,this.options.values=u.verifyMinMaxValues(this.options.values,this.options.hasRange),d.s[46]++,this.options.values}setValues(e){d.f[12]++;let n=(d.s[47]++,e.map(e=>(d.f[13]++,d.s[48]++,u.isValidNumber(e)?(d.b[13][0]++,d.s[49]++,e):(d.b[13][1]++,d.s[50]++,0))));d.s[51]++,n=e.map((e,n)=>(d.f[14]++,d.s[52]++,e!==this.options.values[n]?(d.b[14][0]++,d.s[53]++,u.verifyValue(e,n,this.options.values,this.getMin(),this.getMax(),this.getStep())):(d.b[14][1]++,d.s[54]++,e))),d.s[55]++,n=n.map(e=>(d.f[15]++,d.s[56]++,u.verifyLimits(e,this.getMin(),this.getMax()))),d.s[57]++,this.options.values=u.verifyMinMaxValues(n,this.options.hasRange),d.s[58]++,this.broadcastUpdates({values:this.options.values})}getOrientation(){return d.f[16]++,d.s[59]++,this.options.isVertical}setOrientation(e){d.f[17]++,d.s[60]++,u.isBoolean(e)?(d.b[15][0]++,d.s[61]++,this.options.isVertical=e):(d.b[15][1]++,d.s[62]++,this.options.isVertical=Boolean(e)),d.s[63]++,this.broadcastUpdates({values:this.getValues(),isVertical:this.getOrientation()})}getRange(){return d.f[18]++,d.s[64]++,this.options.hasRange}setRange(e){d.f[19]++,d.s[65]++,u.isBoolean(e)?(d.b[16][0]++,d.s[66]++,this.options.hasRange=e):(d.b[16][1]++,d.s[67]++,this.options.hasRange=Boolean(e)),d.s[68]++,this.broadcastUpdates({values:this.getValues(),hasRange:this.getRange()})}getLabels(){return d.f[20]++,d.s[69]++,this.options.hasLabels}setLabels(e){d.f[21]++,d.s[70]++,u.isBoolean(e)?(d.b[17][0]++,d.s[71]++,this.options.hasLabels=e):(d.b[17][1]++,d.s[72]++,this.options.hasLabels=Boolean(e)),d.s[73]++,this.broadcastUpdates({hasLabels:this.getLabels()})}init(e){d.f[22]++;const{min:n,max:A,values:t,isVertical:l,step:i,hasRange:o,hasLabels:s}=(d.s[74]++,e);d.s[75]++,void 0!==A?(d.b[18][0]++,d.s[76]++,this.setMax(A)):d.b[18][1]++,d.s[77]++,void 0!==n?(d.b[19][0]++,d.s[78]++,this.setMin(n)):d.b[19][1]++,d.s[79]++,void 0!==i?(d.b[20][0]++,d.s[80]++,this.setStep(i)):d.b[20][1]++,d.s[81]++,void 0!==t?(d.b[21][0]++,d.s[82]++,t.push(t[0]+1),d.s[83]++,this.setValues(t)):d.b[21][1]++,d.s[84]++,void 0!==o?(d.b[22][0]++,d.s[85]++,this.setRange(o)):d.b[22][1]++,d.s[86]++,void 0!==l?(d.b[23][0]++,d.s[87]++,this.setOrientation(l)):d.b[23][1]++,d.s[88]++,void 0!==s?(d.b[24][0]++,d.s[89]++,this.setLabels(s)):d.b[24][1]++}broadcastUpdates(e){d.f[23]++,d.s[90]++,this.observer.broadcast(e)}}var p=A(0),h=A.n(p),f=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",n="cbf70ae50c46c5ea0d0caf60f8417595e7eec6f1",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:51}},1:{start:{line:4,column:8},end:{line:4,column:20}},2:{start:{line:7,column:8},end:{line:7,column:26}},3:{start:{line:10,column:8},end:{line:10,column:45}},4:{start:{line:13,column:26},end:{line:15,column:72}},5:{start:{line:16,column:8},end:{line:16,column:25}},6:{start:{line:19,column:38},end:{line:19,column:68}},7:{start:{line:20,column:8},end:{line:20,column:37}},8:{start:{line:23,column:8},end:{line:23,column:50}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:18},end:{line:5,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:17},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:25},end:{line:11,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:37},end:{line:17,column:5}},line:12},4:{name:"(anonymous_4)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:41},end:{line:21,column:5}},line:18},5:{name:"(anonymous_5)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:11},end:{line:24,column:5}},line:22}},branchMap:{0:{loc:{start:{line:13,column:26},end:{line:15,column:72}},type:"cond-expr",locations:[{start:{line:14,column:14},end:{line:14,column:74}},{start:{line:15,column:14},end:{line:15,column:72}}],line:13},1:{loc:{start:{line:19,column:38},end:{line:19,column:68}},type:"cond-expr",locations:[{start:{line:19,column:51},end:{line:19,column:57}},{start:{line:19,column:60},end:{line:19,column:68}}],line:19}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0},f:{0:0,1:0,2:0,3:0,4:0,5:0},b:{0:[0,0],1:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/LabelView.ts"],names:[],mappings:"AAAA,MAAM,CAAC,OAAO,OAAO,SAAS;IAG5B;QAFQ,UAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAG5C,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,aAAa,CAAC,KAAa;QAChC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,YAAY,CAAC,UAAmB,EAAE,MAAmB;QAC1D,MAAM,SAAS,GAAG,UAAU;YAC1B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG;YAC9D,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;QAC/D,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,wBAAwB,CAAC,UAAmB;QACjD,MAAM,qBAAqB,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC7D,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAEO,IAAI;QACV,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;CACF",sourcesContent:["export default class LabelView {\n  private label = document.createElement('div');\n\n  constructor() {\n    this.init();\n  }\n\n  public getElement(): HTMLElement {\n    return this.label;\n  }\n\n  public setLabelValue(value: number): void {\n    this.label.innerText = String(value);\n  }\n\n  public getLabelSize(isVertical: boolean, parent: HTMLElement): number {\n    const labelSize = isVertical\n      ? (this.getElement().offsetHeight / parent.offsetHeight) * 100\n      : (this.getElement().offsetWidth / parent.offsetWidth) * 100;\n    return labelSize;\n  }\n\n  public getFixedPositionProperty(isVertical: boolean): 'left' | 'bottom' {\n    const fixedPositionProperty = isVertical ? 'left' : 'bottom';\n    return fixedPositionProperty;\n  }\n\n  private init(): void {\n    this.label.classList.add('slider__label');\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class I{constructor(){f.f[0]++,f.s[0]++,this.label=document.createElement("div"),f.s[1]++,this.init()}getElement(){return f.f[1]++,f.s[2]++,this.label}setLabelValue(e){f.f[2]++,f.s[3]++,this.label.innerText=String(e)}getLabelSize(e,n){f.f[3]++;const A=(f.s[4]++,e?(f.b[0][0]++,this.getElement().offsetHeight/n.offsetHeight*100):(f.b[0][1]++,this.getElement().offsetWidth/n.offsetWidth*100));return f.s[5]++,A}getFixedPositionProperty(e){f.f[4]++;const n=(f.s[6]++,e?(f.b[1][0]++,"left"):(f.b[1][1]++,"bottom"));return f.s[7]++,n}init(){f.f[5]++,f.s[8]++,this.label.classList.add("slider__label")}}var g=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",n="df8cee4a3794aa7390d576d09bc550f4d6f30b91",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:53}},1:{start:{line:5,column:8},end:{line:5,column:37}},2:{start:{line:8,column:28},end:{line:8,column:37}},3:{start:{line:9,column:33},end:{line:9,column:63}},4:{start:{line:10,column:28},end:{line:10,column:59}},5:{start:{line:11,column:25},end:{line:11,column:78}},6:{start:{line:12,column:8},end:{line:12,column:62}},7:{start:{line:13,column:8},end:{line:13,column:67}},8:{start:{line:14,column:8},end:{line:14,column:42}},9:{start:{line:15,column:8},end:{line:15,column:24}},10:{start:{line:19,column:8},end:{line:26,column:9}},11:{start:{line:20,column:12},end:{line:20,column:67}},12:{start:{line:21,column:12},end:{line:21,column:38}},13:{start:{line:22,column:12},end:{line:22,column:57}},14:{start:{line:25,column:12},end:{line:25,column:92}},15:{start:{line:29,column:8},end:{line:29,column:28}},16:{start:{line:33,column:8},end:{line:33,column:86}},17:{start:{line:36,column:8},end:{line:36,column:41}},18:{start:{line:39,column:8},end:{line:39,column:29}},19:{start:{line:40,column:8},end:{line:40,column:54}},20:{start:{line:41,column:8},end:{line:41,column:56}},21:{start:{line:42,column:8},end:{line:43,column:57}},22:{start:{line:43,column:12},end:{line:43,column:57}},23:{start:{line:46,column:28},end:{line:48,column:72}},24:{start:{line:49,column:8},end:{line:49,column:27}},25:{start:{line:52,column:8},end:{line:60,column:9}},26:{start:{line:53,column:12},end:{line:53,column:38}},27:{start:{line:54,column:30},end:{line:54,column:78}},28:{start:{line:55,column:42},end:{line:55,column:89}},29:{start:{line:56,column:37},end:{line:56,column:67}},30:{start:{line:57,column:34},end:{line:57,column:85}},31:{start:{line:58,column:12},end:{line:58,column:82}},32:{start:{line:59,column:12},end:{line:59,column:74}},33:{start:{line:63,column:8},end:{line:64,column:44}},34:{start:{line:64,column:12},end:{line:64,column:44}},35:{start:{line:67,column:8},end:{line:75,column:9}},36:{start:{line:68,column:26},end:{line:68,column:89}},37:{start:{line:69,column:12},end:{line:69,column:52}},38:{start:{line:70,column:12},end:{line:70,column:44}},39:{start:{line:73,column:26},end:{line:73,column:89}},40:{start:{line:74,column:12},end:{line:74,column:51}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:35},end:{line:6,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:7,column:4},end:{line:7,column:5}},loc:{start:{line:7,column:45},end:{line:16,column:5}},line:7},2:{name:"(anonymous_2)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:34},end:{line:27,column:5}},line:17},3:{name:"(anonymous_3)",decl:{start:{line:28,column:4},end:{line:28,column:5}},loc:{start:{line:28,column:17},end:{line:30,column:5}},line:28},4:{name:"(anonymous_4)",decl:{start:{line:31,column:4},end:{line:31,column:5}},loc:{start:{line:31,column:22},end:{line:34,column:5}},line:31},5:{name:"(anonymous_5)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:20},end:{line:37,column:5}},line:35},6:{name:"(anonymous_6)",decl:{start:{line:38,column:4},end:{line:38,column:5}},loc:{start:{line:38,column:28},end:{line:44,column:5}},line:38},7:{name:"(anonymous_7)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:31},end:{line:50,column:5}},line:45},8:{name:"(anonymous_8)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:58},end:{line:61,column:5}},line:51},9:{name:"(anonymous_9)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:25},end:{line:65,column:5}},line:62},10:{name:"(anonymous_10)",decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:31},end:{line:76,column:5}},line:66}},branchMap:{0:{loc:{start:{line:9,column:33},end:{line:9,column:63}},type:"cond-expr",locations:[{start:{line:9,column:46},end:{line:9,column:54}},{start:{line:9,column:57},end:{line:9,column:63}}],line:9},1:{loc:{start:{line:19,column:8},end:{line:26,column:9}},type:"if",locations:[{start:{line:19,column:8},end:{line:26,column:9}},{start:{line:19,column:8},end:{line:26,column:9}}],line:19},2:{loc:{start:{line:20,column:25},end:{line:20,column:66}},type:"cond-expr",locations:[{start:{line:20,column:38},end:{line:20,column:48}},{start:{line:20,column:51},end:{line:20,column:66}}],line:20},3:{loc:{start:{line:25,column:12},end:{line:25,column:91}},type:"cond-expr",locations:[{start:{line:25,column:58},end:{line:25,column:64}},{start:{line:25,column:67},end:{line:25,column:91}}],line:25},4:{loc:{start:{line:25,column:12},end:{line:25,column:55}},type:"binary-expr",locations:[{start:{line:25,column:12},end:{line:25,column:38}},{start:{line:25,column:42},end:{line:25,column:55}}],line:25},5:{loc:{start:{line:33,column:15},end:{line:33,column:85}},type:"cond-expr",locations:[{start:{line:33,column:61},end:{line:33,column:67}},{start:{line:33,column:70},end:{line:33,column:85}}],line:33},6:{loc:{start:{line:33,column:15},end:{line:33,column:58}},type:"binary-expr",locations:[{start:{line:33,column:15},end:{line:33,column:41}},{start:{line:33,column:45},end:{line:33,column:58}}],line:33},7:{loc:{start:{line:41,column:21},end:{line:41,column:55}},type:"cond-expr",locations:[{start:{line:41,column:33},end:{line:41,column:48}},{start:{line:41,column:51},end:{line:41,column:55}}],line:41},8:{loc:{start:{line:42,column:8},end:{line:43,column:57}},type:"if",locations:[{start:{line:42,column:8},end:{line:43,column:57}},{start:{line:42,column:8},end:{line:43,column:57}}],line:42},9:{loc:{start:{line:46,column:28},end:{line:48,column:72}},type:"cond-expr",locations:[{start:{line:47,column:14},end:{line:47,column:74}},{start:{line:48,column:14},end:{line:48,column:72}}],line:46},10:{loc:{start:{line:52,column:8},end:{line:60,column:9}},type:"if",locations:[{start:{line:52,column:8},end:{line:60,column:9}},{start:{line:52,column:8},end:{line:60,column:9}}],line:52},11:{loc:{start:{line:56,column:37},end:{line:56,column:67}},type:"cond-expr",locations:[{start:{line:56,column:50},end:{line:56,column:58}},{start:{line:56,column:61},end:{line:56,column:67}}],line:56},12:{loc:{start:{line:63,column:8},end:{line:64,column:44}},type:"if",locations:[{start:{line:63,column:8},end:{line:64,column:44}},{start:{line:63,column:8},end:{line:64,column:44}}],line:63},13:{loc:{start:{line:67,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:67,column:8},end:{line:75,column:9}},{start:{line:67,column:8},end:{line:75,column:9}}],line:67}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/HandlerView.ts"],names:[],mappings:"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",sourcesContent:["import LabelView from './LabelView';\n\nexport default class HandlerView {\n  private parent!: HTMLElement;\n\n  private handler = document.createElement('div');\n\n  private label!: LabelView | null;\n\n  constructor(parent: HTMLElement, showLabel: boolean) {\n    this.init(parent, showLabel);\n  }\n\n  public setPosition(value: number, min: number, max: number, isVertical: boolean): number {\n    const valuesCount = max - min;\n    const positionProperty = isVertical ? 'bottom' : 'left';\n    const handlerSize = this.getHandlerSize(isVertical);\n    const position = ((value - min) / valuesCount) * 100 - handlerSize / 2;\n    this.handler.style[positionProperty] = `${position}%`;\n    this.setLabelPosition(value, valuesCount, min, isVertical);\n    this.setDefaultStyles(isVertical);\n    return position;\n  }\n\n  public updateLabel(showLabel: boolean | undefined, value: number): void {\n    if (showLabel) {\n      this.label = this.label ? this.label : new LabelView();\n      this.setLabelValue(value);\n      this.handler.before(this.label.getElement());\n    } else {\n      this.label?.getElement().remove();\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.handler;\n  }\n\n  public getLabelElement(): HTMLElement | undefined {\n    return this.label?.getElement();\n  }\n\n  public appendHandler(): void {\n    this.parent.append(this.handler);\n  }\n\n  private init(parent: HTMLElement, showLabel: boolean): void {\n    this.parent = parent;\n    this.handler.classList.add('slider__handler');\n    this.label = showLabel ? new LabelView() : null;\n    if (this.label) this.handler.before(this.label.getElement());\n  }\n\n  private getHandlerSize(isVertical: boolean): number {\n    const handlerSize = isVertical\n      ? (this.handler.offsetHeight / this.parent.offsetHeight) * 100\n      : (this.handler.offsetWidth / this.parent.offsetWidth) * 100;\n    return handlerSize;\n  }\n\n  private setLabelPosition(value: number, valuesCount: number, min: number, isVertical: boolean): void {\n    if (this.label) {\n      this.setLabelValue(value);\n      const labelSize = this.label.getLabelSize(isVertical, this.parent);\n      const fixedPositionProperty = this.label.getFixedPositionProperty(isVertical);\n      const positionProperty = isVertical ? 'bottom' : 'left';\n      const labelPosition = ((value - min) / valuesCount) * 100 - labelSize / 2;\n      this.label.getElement().style[positionProperty] = `${labelPosition}%`;\n      this.label.getElement().style[fixedPositionProperty] = '330%';\n    }\n  }\n\n  private setLabelValue(value: number): void {\n    if (this.label) this.label.setLabelValue(value);\n  }\n\n  private setDefaultStyles(vertical: boolean): void{\n    if (vertical) {\n      const shift = (this.handler.offsetHeight / 2) - (this.parent.offsetWidth / 2);\n      this.handler.style.left = `-${shift}px`;\n      this.handler.style.top = 'auto';\n    } else {\n      const shift = (this.handler.offsetWidth / 2) - (this.parent.offsetHeight / 2);\n      this.handler.style.top = `-${shift}px`;\n    }\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class v{constructor(e,n){g.f[0]++,g.s[0]++,this.handler=document.createElement("div"),g.s[1]++,this.init(e,n)}setPosition(e,n,A,t){g.f[1]++;const l=(g.s[2]++,A-n),i=(g.s[3]++,t?(g.b[0][0]++,"bottom"):(g.b[0][1]++,"left")),o=(g.s[4]++,this.getHandlerSize(t)),s=(g.s[5]++,(e-n)/l*100-o/2);return g.s[6]++,this.handler.style[i]=`${s}%`,g.s[7]++,this.setLabelPosition(e,l,n,t),g.s[8]++,this.setDefaultStyles(t),g.s[9]++,s}updateLabel(e,n){var A;g.f[2]++,g.s[10]++,e?(g.b[1][0]++,g.s[11]++,this.label=this.label?(g.b[2][0]++,this.label):(g.b[2][1]++,new I),g.s[12]++,this.setLabelValue(n),g.s[13]++,this.handler.before(this.label.getElement())):(g.b[1][1]++,g.s[14]++,g.b[4][0]++,null===(A=this.label)||(g.b[4][1]++,void 0===A)?g.b[3][0]++:(g.b[3][1]++,A.getElement().remove()))}getElement(){return g.f[3]++,g.s[15]++,this.handler}getLabelElement(){var e;return g.f[4]++,g.s[16]++,g.b[6][0]++,null===(e=this.label)||(g.b[6][1]++,void 0===e)?void g.b[5][0]++:(g.b[5][1]++,e.getElement())}appendHandler(){g.f[5]++,g.s[17]++,this.parent.append(this.handler)}init(e,n){g.f[6]++,g.s[18]++,this.parent=e,g.s[19]++,this.handler.classList.add("slider__handler"),g.s[20]++,this.label=n?(g.b[7][0]++,new I):(g.b[7][1]++,null),g.s[21]++,this.label?(g.b[8][0]++,g.s[22]++,this.handler.before(this.label.getElement())):g.b[8][1]++}getHandlerSize(e){g.f[7]++;const n=(g.s[23]++,e?(g.b[9][0]++,this.handler.offsetHeight/this.parent.offsetHeight*100):(g.b[9][1]++,this.handler.offsetWidth/this.parent.offsetWidth*100));return g.s[24]++,n}setLabelPosition(e,n,A,t){if(g.f[8]++,g.s[25]++,this.label){g.b[10][0]++,g.s[26]++,this.setLabelValue(e);const l=(g.s[27]++,this.label.getLabelSize(t,this.parent)),i=(g.s[28]++,this.label.getFixedPositionProperty(t)),o=(g.s[29]++,t?(g.b[11][0]++,"bottom"):(g.b[11][1]++,"left")),s=(g.s[30]++,(e-A)/n*100-l/2);g.s[31]++,this.label.getElement().style[o]=`${s}%`,g.s[32]++,this.label.getElement().style[i]="330%"}else g.b[10][1]++}setLabelValue(e){g.f[9]++,g.s[33]++,this.label?(g.b[12][0]++,g.s[34]++,this.label.setLabelValue(e)):g.b[12][1]++}setDefaultStyles(e){if(g.f[10]++,g.s[35]++,e){g.b[13][0]++;const e=(g.s[36]++,this.handler.offsetHeight/2-this.parent.offsetWidth/2);g.s[37]++,this.handler.style.left=`-${e}px`,g.s[38]++,this.handler.style.top="auto"}else{g.b[13][1]++;const e=(g.s[39]++,this.handler.offsetWidth/2-this.parent.offsetHeight/2);g.s[40]++,this.handler.style.top=`-${e}px`}}}var E=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",n="e63d4445aca870fdab7e8fe03d5c7344127afbd0",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",statementMap:{0:{start:{line:3,column:8},end:{line:3,column:59}},1:{start:{line:4,column:8},end:{line:4,column:27}},2:{start:{line:7,column:8},end:{line:16,column:9}},3:{start:{line:8,column:12},end:{line:8,column:65}},4:{start:{line:9,column:12},end:{line:9,column:74}},5:{start:{line:10,column:12},end:{line:10,column:58}},6:{start:{line:13,column:12},end:{line:13,column:68}},7:{start:{line:14,column:12},end:{line:14,column:71}},8:{start:{line:15,column:12},end:{line:15,column:54}},9:{start:{line:17,column:8},end:{line:17,column:47}},10:{start:{line:20,column:8},end:{line:20,column:34}},11:{start:{line:23,column:64},end:{line:23,column:71}},12:{start:{line:24,column:8},end:{line:24,column:33}},13:{start:{line:25,column:8},end:{line:25,column:47}},14:{start:{line:26,column:8},end:{line:33,column:9}},15:{start:{line:27,column:12},end:{line:27,column:65}},16:{start:{line:28,column:12},end:{line:28,column:60}},17:{start:{line:31,column:12},end:{line:31,column:71}},18:{start:{line:32,column:12},end:{line:32,column:56}},19:{start:{line:34,column:8},end:{line:34,column:52}},20:{start:{line:37,column:8},end:{line:45,column:9}},21:{start:{line:38,column:12},end:{line:40,column:44}},22:{start:{line:43,column:12},end:{line:44,column:98}},23:{start:{line:48,column:23},end:{line:48,column:51}},24:{start:{line:49,column:23},end:{line:49,column:52}},25:{start:{line:50,column:8},end:{line:52,column:174}},26:{start:{line:53,column:8},end:{line:55,column:142}},27:{start:{line:58,column:8},end:{line:71,column:9}},28:{start:{line:59,column:12},end:{line:59,column:52}},29:{start:{line:60,column:12},end:{line:60,column:49}},30:{start:{line:61,column:12},end:{line:63,column:13}},31:{start:{line:62,column:16},end:{line:62,column:55}},32:{start:{line:66,column:12},end:{line:66,column:53}},33:{start:{line:67,column:12},end:{line:67,column:51}},34:{start:{line:68,column:12},end:{line:70,column:13}},35:{start:{line:69,column:16},end:{line:69,column:53}},36:{start:{line:74,column:20},end:{line:74,column:51}},37:{start:{line:75,column:8},end:{line:77,column:9}},38:{start:{line:76,column:12},end:{line:76,column:44}},39:{start:{line:78,column:8},end:{line:78,column:38}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:2,column:4},end:{line:2,column:5}},loc:{start:{line:2,column:25},end:{line:5,column:5}},line:2},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:51},end:{line:18,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:22},end:{line:21,column:5}},line:19},3:{name:"(anonymous_3)",decl:{start:{line:22,column:4},end:{line:22,column:5}},loc:{start:{line:22,column:18},end:{line:35,column:5}},line:22},4:{name:"(anonymous_4)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:41},end:{line:46,column:5}},line:36},5:{name:"(anonymous_5)",decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:41},end:{line:56,column:5}},line:47},6:{name:"(anonymous_6)",decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:38},end:{line:72,column:5}},line:57},7:{name:"(anonymous_7)",decl:{start:{line:73,column:4},end:{line:73,column:5}},loc:{start:{line:73,column:37},end:{line:79,column:5}},line:73}},branchMap:{0:{loc:{start:{line:7,column:8},end:{line:16,column:9}},type:"if",locations:[{start:{line:7,column:8},end:{line:16,column:9}},{start:{line:7,column:8},end:{line:16,column:9}}],line:7},1:{loc:{start:{line:26,column:8},end:{line:33,column:9}},type:"if",locations:[{start:{line:26,column:8},end:{line:33,column:9}},{start:{line:26,column:8},end:{line:33,column:9}}],line:26},2:{loc:{start:{line:37,column:8},end:{line:45,column:9}},type:"if",locations:[{start:{line:37,column:8},end:{line:45,column:9}},{start:{line:37,column:8},end:{line:45,column:9}}],line:37},3:{loc:{start:{line:48,column:23},end:{line:48,column:51}},type:"cond-expr",locations:[{start:{line:48,column:34},end:{line:48,column:42}},{start:{line:48,column:45},end:{line:48,column:51}}],line:48},4:{loc:{start:{line:49,column:23},end:{line:49,column:52}},type:"cond-expr",locations:[{start:{line:49,column:34},end:{line:49,column:42}},{start:{line:49,column:45},end:{line:49,column:52}}],line:49},5:{loc:{start:{line:50,column:43},end:{line:52,column:173}},type:"cond-expr",locations:[{start:{line:51,column:14},end:{line:51,column:174}},{start:{line:52,column:14},end:{line:52,column:173}}],line:50},6:{loc:{start:{line:53,column:43},end:{line:55,column:141}},type:"cond-expr",locations:[{start:{line:54,column:14},end:{line:54,column:142}},{start:{line:55,column:14},end:{line:55,column:141}}],line:53},7:{loc:{start:{line:58,column:8},end:{line:71,column:9}},type:"if",locations:[{start:{line:58,column:8},end:{line:71,column:9}},{start:{line:58,column:8},end:{line:71,column:9}}],line:58},8:{loc:{start:{line:61,column:12},end:{line:63,column:13}},type:"if",locations:[{start:{line:61,column:12},end:{line:63,column:13}},{start:{line:61,column:12},end:{line:63,column:13}}],line:61},9:{loc:{start:{line:68,column:12},end:{line:70,column:13}},type:"if",locations:[{start:{line:68,column:12},end:{line:70,column:13}},{start:{line:68,column:12},end:{line:70,column:13}}],line:68},10:{loc:{start:{line:75,column:8},end:{line:77,column:9}},type:"if",locations:[{start:{line:75,column:8},end:{line:77,column:9}},{start:{line:75,column:8},end:{line:77,column:9}}],line:75}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0],10:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/SelectedAreaView.ts"],names:[],mappings:"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",sourcesContent:["export default class SelectedArea {\n  private selectedRange = document.createElement('div');\n\n  private parent!: HTMLElement;\n\n  constructor(options: {\n    sliderBody: HTMLDivElement;\n    hasRange: boolean;\n    isVertical: boolean;\n    handlers: HTMLElement[];\n  }) {\n    this.init(options);\n  }\n\n  public updateSelectedRange(\n    range: boolean,\n    vertical: boolean,\n    handlers: HTMLElement[],\n  ): void {\n    if (!range) {\n      this.selectedRange.classList.add('slider__selected');\n      this.selectedRange.classList.remove('slider__selected-range');\n      this.setPositionSingle(vertical, handlers[0]);\n    } else {\n      this.selectedRange.classList.remove('slider__selected');\n      this.selectedRange.classList.add('slider__selected-range');\n      this.setPositionRange(vertical, handlers);\n    }\n    this.setDefaultStyles(vertical, range);\n  }\n\n  public getSelectedArea(): HTMLDivElement {\n    return this.selectedRange;\n  }\n\n  private init(options: {\n    sliderBody: HTMLDivElement;\n    hasRange: boolean;\n    isVertical: boolean;\n    handlers: HTMLElement[];\n  }): void {\n    const {\n      sliderBody, hasRange, isVertical, handlers,\n    } = options;\n    this.parent = sliderBody;\n    this.parent.append(this.selectedRange);\n    if (!hasRange) {\n      this.selectedRange.classList.add('slider__selected');\n      this.setPositionSingle(isVertical, handlers[0]);\n    } else {\n      this.selectedRange.classList.add('slider__selected-range');\n      this.setPositionRange(isVertical, handlers);\n    }\n    this.setDefaultStyles(isVertical, hasRange);\n  }\n\n  private setPositionSingle(vertical: boolean, handler: HTMLElement): void {\n    if (vertical) {\n      (this.selectedRange.style.height = `${(this.getCoordinate(this.parent, vertical) - (handler.offsetWidth / 2))\n        - this.getCoordinate(handler, vertical)\n        + handler.offsetHeight}px`);\n    } else {\n      (this.selectedRange.style.width = `${(((this.getCoordinate(handler, vertical) + (handler.offsetWidth / 2))\n        - this.getCoordinate(this.parent, vertical)) / this.parent.offsetWidth) * 100}%`);\n    }\n  }\n\n  private setPositionRange(\n    vertical: boolean,\n    handlers: HTMLElement[],\n  ): void {\n    const posMin = vertical ? 'bottom' : 'left';\n    const length = vertical ? 'height' : 'width';\n    this.selectedRange.style[posMin] = vertical\n      ? `${((this.getCoordinate(this.parent, vertical) - this.getCoordinate(handlers[0], vertical) + (handlers[0].offsetWidth / 2)) / this.parent.offsetHeight) * 100}%`\n      : `${((this.getCoordinate(handlers[0], vertical) - this.getCoordinate(this.parent, vertical) + (handlers[0].offsetWidth / 2)) / this.parent.offsetWidth) * 100}%`;\n    this.selectedRange.style[length] = vertical\n      ? `${((this.getCoordinate(handlers[0], vertical) - this.getCoordinate(handlers[1], vertical)) / this.parent.offsetHeight) * 100}%`\n      : `${((this.getCoordinate(handlers[1], vertical) - this.getCoordinate(handlers[0], vertical)) / this.parent.offsetWidth) * 100}%`;\n  }\n\n  private setDefaultStyles(vertical: boolean, range: boolean): void{\n    if (vertical) {\n      this.selectedRange.style.width = '100%';\n      this.selectedRange.style.left = '0%';\n      if (!range) {\n        this.selectedRange.style.bottom = '0%';\n      }\n    } else {\n      this.selectedRange.style.height = '100%';\n      this.selectedRange.style.bottom = '0%';\n      if (!range) {\n        this.selectedRange.style.left = '0%';\n      }\n    }\n  }\n\n  private getCoordinate(element: HTMLElement, vertical: boolean): number {\n    const box = element.getBoundingClientRect();\n    if (vertical) {\n      return box.bottom + pageYOffset;\n    }\n    return box.left + pageXOffset;\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class b{constructor(e){E.f[0]++,E.s[0]++,this.selectedRange=document.createElement("div"),E.s[1]++,this.init(e)}updateSelectedRange(e,n,A){E.f[1]++,E.s[2]++,e?(E.b[0][1]++,E.s[6]++,this.selectedRange.classList.remove("slider__selected"),E.s[7]++,this.selectedRange.classList.add("slider__selected-range"),E.s[8]++,this.setPositionRange(n,A)):(E.b[0][0]++,E.s[3]++,this.selectedRange.classList.add("slider__selected"),E.s[4]++,this.selectedRange.classList.remove("slider__selected-range"),E.s[5]++,this.setPositionSingle(n,A[0])),E.s[9]++,this.setDefaultStyles(n,e)}getSelectedArea(){return E.f[2]++,E.s[10]++,this.selectedRange}init(e){E.f[3]++;const{sliderBody:n,hasRange:A,isVertical:t,handlers:l}=(E.s[11]++,e);E.s[12]++,this.parent=n,E.s[13]++,this.parent.append(this.selectedRange),E.s[14]++,A?(E.b[1][1]++,E.s[17]++,this.selectedRange.classList.add("slider__selected-range"),E.s[18]++,this.setPositionRange(t,l)):(E.b[1][0]++,E.s[15]++,this.selectedRange.classList.add("slider__selected"),E.s[16]++,this.setPositionSingle(t,l[0])),E.s[19]++,this.setDefaultStyles(t,A)}setPositionSingle(e,n){E.f[4]++,E.s[20]++,e?(E.b[2][0]++,E.s[21]++,this.selectedRange.style.height=`${this.getCoordinate(this.parent,e)-n.offsetWidth/2-this.getCoordinate(n,e)+n.offsetHeight}px`):(E.b[2][1]++,E.s[22]++,this.selectedRange.style.width=`${(this.getCoordinate(n,e)+n.offsetWidth/2-this.getCoordinate(this.parent,e))/this.parent.offsetWidth*100}%`)}setPositionRange(e,n){E.f[5]++;const A=(E.s[23]++,e?(E.b[3][0]++,"bottom"):(E.b[3][1]++,"left")),t=(E.s[24]++,e?(E.b[4][0]++,"height"):(E.b[4][1]++,"width"));E.s[25]++,this.selectedRange.style[A]=e?(E.b[5][0]++,`${(this.getCoordinate(this.parent,e)-this.getCoordinate(n[0],e)+n[0].offsetWidth/2)/this.parent.offsetHeight*100}%`):(E.b[5][1]++,`${(this.getCoordinate(n[0],e)-this.getCoordinate(this.parent,e)+n[0].offsetWidth/2)/this.parent.offsetWidth*100}%`),E.s[26]++,this.selectedRange.style[t]=e?(E.b[6][0]++,`${(this.getCoordinate(n[0],e)-this.getCoordinate(n[1],e))/this.parent.offsetHeight*100}%`):(E.b[6][1]++,`${(this.getCoordinate(n[1],e)-this.getCoordinate(n[0],e))/this.parent.offsetWidth*100}%`)}setDefaultStyles(e,n){E.f[6]++,E.s[27]++,e?(E.b[7][0]++,E.s[28]++,this.selectedRange.style.width="100%",E.s[29]++,this.selectedRange.style.left="0%",E.s[30]++,n?E.b[8][1]++:(E.b[8][0]++,E.s[31]++,this.selectedRange.style.bottom="0%")):(E.b[7][1]++,E.s[32]++,this.selectedRange.style.height="100%",E.s[33]++,this.selectedRange.style.bottom="0%",E.s[34]++,n?E.b[9][1]++:(E.b[9][0]++,E.s[35]++,this.selectedRange.style.left="0%"))}getCoordinate(e,n){E.f[7]++;const A=(E.s[36]++,e.getBoundingClientRect());return E.s[37]++,n?(E.b[10][0]++,E.s[38]++,A.bottom+pageYOffset):(E.b[10][1]++,E.s[39]++,A.left+pageXOffset)}}var M=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",n="adc911bb1242b17c24b2ce62ba27f1f214ce5d36",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",statementMap:{0:{start:{line:1,column:17},end:{line:6,column:1}},1:{start:{line:2,column:12},end:{line:2,column:28}},2:{start:{line:2,column:34},end:{line:2,column:125}},3:{start:{line:3,column:4},end:{line:4,column:150}},4:{start:{line:3,column:79},end:{line:3,column:131}},5:{start:{line:4,column:9},end:{line:4,column:150}},6:{start:{line:4,column:58},end:{line:4,column:150}},7:{start:{line:4,column:81},end:{line:4,column:150}},8:{start:{line:5,column:4},end:{line:5,column:66}},9:{start:{line:13,column:8},end:{line:13,column:44}},10:{start:{line:14,column:8},end:{line:14,column:56}},11:{start:{line:15,column:8},end:{line:15,column:27}},12:{start:{line:16,column:8},end:{line:16,column:34}},13:{start:{line:17,column:8},end:{line:17,column:35}},14:{start:{line:20,column:8},end:{line:20,column:38}},15:{start:{line:21,column:8},end:{line:21,column:53}},16:{start:{line:22,column:8},end:{line:22,column:45}},17:{start:{line:23,column:8},end:{line:23,column:28}},18:{start:{line:24,column:8},end:{line:24,column:34}},19:{start:{line:25,column:8},end:{line:25,column:122}},20:{start:{line:28,column:8},end:{line:28,column:29}},21:{start:{line:31,column:8},end:{line:31,column:68}},22:{start:{line:31,column:46},end:{line:31,column:66}},23:{start:{line:34,column:8},end:{line:41,column:9}},24:{start:{line:35,column:12},end:{line:35,column:62}},25:{start:{line:36,column:12},end:{line:36,column:57}},26:{start:{line:39,column:12},end:{line:39,column:60}},27:{start:{line:40,column:12},end:{line:40,column:59}},28:{start:{line:45,column:43},end:{line:45,column:73}},29:{start:{line:46,column:34},end:{line:46,column:63}},30:{start:{line:47,column:8},end:{line:60,column:9}},31:{start:{line:48,column:38},end:{line:48,column:67}},32:{start:{line:49,column:36},end:{line:49,column:70}},33:{start:{line:50,column:12},end:{line:59,column:13}},34:{start:{line:51,column:16},end:{line:51,column:43}},35:{start:{line:52,column:16},end:{line:52,column:88}},36:{start:{line:55,column:16},end:{line:55,column:59}},37:{start:{line:56,column:16},end:{line:58,column:17}},38:{start:{line:57,column:20},end:{line:57,column:62}},39:{start:{line:63,column:20},end:{line:63,column:51}},40:{start:{line:64,column:8},end:{line:66,column:9}},41:{start:{line:65,column:12},end:{line:65,column:44}},42:{start:{line:67,column:8},end:{line:67,column:38}},43:{start:{line:70,column:8},end:{line:70,column:31}},44:{start:{line:71,column:8},end:{line:71,column:29}},45:{start:{line:72,column:8},end:{line:72,column:54}},46:{start:{line:73,column:8},end:{line:73,column:44}},47:{start:{line:74,column:8},end:{line:74,column:53}},48:{start:{line:75,column:8},end:{line:75,column:27}},49:{start:{line:76,column:8},end:{line:76,column:28}},50:{start:{line:77,column:8},end:{line:77,column:34}},51:{start:{line:78,column:8},end:{line:78,column:26}},52:{start:{line:79,column:8},end:{line:84,column:11}},53:{start:{line:87,column:8},end:{line:89,column:11}},54:{start:{line:88,column:12},end:{line:88,column:92}},55:{start:{line:90,column:8},end:{line:90,column:86}},56:{start:{line:93,column:77},end:{line:93,column:86}},57:{start:{line:94,column:8},end:{line:95,column:35}},58:{start:{line:95,column:12},end:{line:95,column:35}},59:{start:{line:96,column:8},end:{line:97,column:35}},60:{start:{line:97,column:12},end:{line:97,column:35}},61:{start:{line:98,column:8},end:{line:99,column:41}},62:{start:{line:99,column:12},end:{line:99,column:41}},63:{start:{line:100,column:8},end:{line:101,column:49}},64:{start:{line:101,column:12},end:{line:101,column:49}},65:{start:{line:102,column:8},end:{line:103,column:37}},66:{start:{line:103,column:12},end:{line:103,column:37}},67:{start:{line:104,column:8},end:{line:105,column:45}},68:{start:{line:105,column:12},end:{line:105,column:45}},69:{start:{line:106,column:8},end:{line:107,column:47}},70:{start:{line:107,column:12},end:{line:107,column:47}},71:{start:{line:110,column:8},end:{line:112,column:11}},72:{start:{line:111,column:12},end:{line:111,column:89}},73:{start:{line:113,column:8},end:{line:113,column:57}},74:{start:{line:114,column:8},end:{line:114,column:57}},75:{start:{line:115,column:8},end:{line:115,column:41}},76:{start:{line:116,column:8},end:{line:118,column:9}},77:{start:{line:117,column:12},end:{line:117,column:45}},78:{start:{line:121,column:8},end:{line:121,column:160}},79:{start:{line:121,column:50},end:{line:121,column:158}},80:{start:{line:122,column:8},end:{line:127,column:9}},81:{start:{line:123,column:12},end:{line:123,column:63}},82:{start:{line:125,column:13},end:{line:127,column:9}},83:{start:{line:126,column:12},end:{line:126,column:61}},84:{start:{line:130,column:8},end:{line:130,column:123}},85:{start:{line:130,column:50},end:{line:130,column:121}},86:{start:{line:133,column:30},end:{line:133,column:41}},87:{start:{line:134,column:36},end:{line:134,column:134}},88:{start:{line:134,column:67},end:{line:134,column:133}},89:{start:{line:135,column:8},end:{line:137,column:9}},90:{start:{line:136,column:12},end:{line:136,column:42}},91:{start:{line:138,column:32},end:{line:138,column:136}},92:{start:{line:139,column:8},end:{line:147,column:9}},93:{start:{line:140,column:12},end:{line:140,column:49}},94:{start:{line:142,column:13},end:{line:147,column:9}},95:{start:{line:143,column:12},end:{line:143,column:49}},96:{start:{line:146,column:12},end:{line:146,column:49}},97:{start:{line:148,column:8},end:{line:148,column:59}},98:{start:{line:151,column:8},end:{line:151,column:32}},99:{start:{line:152,column:23},end:{line:152,column:35}},100:{start:{line:153,column:8},end:{line:153,column:41}},101:{start:{line:154,column:8},end:{line:154,column:77}},102:{start:{line:155,column:8},end:{line:155,column:73}},103:{start:{line:158,column:8},end:{line:163,column:9}},104:{start:{line:159,column:12},end:{line:159,column:55}},105:{start:{line:162,column:12},end:{line:162,column:55}},106:{start:{line:166,column:33},end:{line:166,column:94}},107:{start:{line:167,column:20},end:{line:169,column:136}},108:{start:{line:170,column:8},end:{line:174,column:9}},109:{start:{line:171,column:12},end:{line:173,column:15}},110:{start:{line:175,column:8},end:{line:204,column:9}},111:{start:{line:176,column:45},end:{line:176,column:152}},112:{start:{line:177,column:12},end:{line:185,column:13}},113:{start:{line:178,column:16},end:{line:178,column:47}},114:{start:{line:179,column:16},end:{line:179,column:66}},115:{start:{line:180,column:16},end:{line:180,column:67}},116:{start:{line:183,column:16},end:{line:183,column:67}},117:{start:{line:184,column:16},end:{line:184,column:66}},118:{start:{line:186,column:12},end:{line:188,column:15}},119:{start:{line:190,column:13},end:{line:204,column:9}},120:{start:{line:191,column:45},end:{line:191,column:152}},121:{start:{line:192,column:12},end:{line:200,column:13}},122:{start:{line:193,column:16},end:{line:193,column:47}},123:{start:{line:194,column:16},end:{line:194,column:67}},124:{start:{line:195,column:16},end:{line:195,column:66}},125:{start:{line:198,column:16},end:{line:198,column:66}},126:{start:{line:199,column:16},end:{line:199,column:67}},127:{start:{line:201,column:12},end:{line:203,column:15}},128:{start:{line:207,column:8},end:{line:207,column:80}},129:{start:{line:208,column:8},end:{line:208,column:76}},130:{start:{line:211,column:0},end:{line:213,column:58}},131:{start:{line:214,column:0},end:{line:216,column:55}},132:{start:{line:217,column:0},end:{line:219,column:56}},133:{start:{line:220,column:0},end:{line:222,column:54}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:1,column:46},end:{line:1,column:47}},loc:{start:{line:1,column:87},end:{line:6,column:1}},line:1},1:{name:"(anonymous_1)",decl:{start:{line:12,column:4},end:{line:12,column:5}},loc:{start:{line:12,column:33},end:{line:18,column:5}},line:12},2:{name:"(anonymous_2)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:22},end:{line:26,column:5}},line:19},3:{name:"(anonymous_3)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:18},end:{line:29,column:5}},line:27},4:{name:"(anonymous_4)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:26},end:{line:32,column:5}},line:30},5:{name:"(anonymous_5)",decl:{start:{line:31,column:33},end:{line:31,column:34}},loc:{start:{line:31,column:46},end:{line:31,column:66}},line:31},6:{name:"(anonymous_6)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:29},end:{line:42,column:5}},line:33},7:{name:"(anonymous_7)",decl:{start:{line:43,column:4},end:{line:43,column:5}},loc:{start:{line:43,column:20},end:{line:61,column:5}},line:43},8:{name:"(anonymous_8)",decl:{start:{line:62,column:4},end:{line:62,column:5}},loc:{start:{line:62,column:38},end:{line:68,column:5}},line:62},9:{name:"(anonymous_9)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:26},end:{line:85,column:5}},line:69},10:{name:"(anonymous_10)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:17},end:{line:91,column:5}},line:86},11:{name:"(anonymous_11)",decl:{start:{line:87,column:30},end:{line:87,column:31}},loc:{start:{line:87,column:43},end:{line:89,column:9}},line:87},12:{name:"(anonymous_12)",decl:{start:{line:92,column:4},end:{line:92,column:5}},loc:{start:{line:92,column:29},end:{line:108,column:5}},line:92},13:{name:"(anonymous_13)",decl:{start:{line:109,column:4},end:{line:109,column:5}},loc:{start:{line:109,column:18},end:{line:119,column:5}},line:109},14:{name:"(anonymous_14)",decl:{start:{line:110,column:36},end:{line:110,column:37}},loc:{start:{line:110,column:42},end:{line:112,column:9}},line:110},15:{name:"(anonymous_15)",decl:{start:{line:120,column:4},end:{line:120,column:5}},loc:{start:{line:120,column:25},end:{line:128,column:5}},line:120},16:{name:"(anonymous_16)",decl:{start:{line:121,column:30},end:{line:121,column:31}},loc:{start:{line:121,column:50},end:{line:121,column:158}},line:121},17:{name:"(anonymous_17)",decl:{start:{line:129,column:4},end:{line:129,column:5}},loc:{start:{line:129,column:19},end:{line:131,column:5}},line:129},18:{name:"(anonymous_18)",decl:{start:{line:130,column:30},end:{line:130,column:31}},loc:{start:{line:130,column:50},end:{line:130,column:121}},line:130},19:{name:"(anonymous_19)",decl:{start:{line:132,column:4},end:{line:132,column:5}},loc:{start:{line:132,column:37},end:{line:149,column:5}},line:132},20:{name:"(anonymous_20)",decl:{start:{line:134,column:54},end:{line:134,column:55}},loc:{start:{line:134,column:67},end:{line:134,column:133}},line:134},21:{name:"(anonymous_21)",decl:{start:{line:150,column:4},end:{line:150,column:5}},loc:{start:{line:150,column:34},end:{line:156,column:5}},line:150},22:{name:"(anonymous_22)",decl:{start:{line:157,column:4},end:{line:157,column:5}},loc:{start:{line:157,column:31},end:{line:164,column:5}},line:157},23:{name:"(anonymous_23)",decl:{start:{line:165,column:4},end:{line:165,column:5}},loc:{start:{line:165,column:33},end:{line:205,column:5}},line:165},24:{name:"(anonymous_24)",decl:{start:{line:206,column:4},end:{line:206,column:5}},loc:{start:{line:206,column:28},end:{line:209,column:5}},line:206}},branchMap:{0:{loc:{start:{line:1,column:17},end:{line:6,column:1}},type:"binary-expr",locations:[{start:{line:1,column:18},end:{line:1,column:22}},{start:{line:1,column:26},end:{line:1,column:41}},{start:{line:1,column:46},end:{line:6,column:1}}],line:1},1:{loc:{start:{line:2,column:34},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:42},end:{line:2,column:48}},{start:{line:2,column:51},end:{line:2,column:125}}],line:2},2:{loc:{start:{line:2,column:51},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:67},end:{line:2,column:118}},{start:{line:2,column:121},end:{line:2,column:125}}],line:2},3:{loc:{start:{line:3,column:4},end:{line:4,column:150}},type:"if",locations:[{start:{line:3,column:4},end:{line:4,column:150}},{start:{line:3,column:4},end:{line:4,column:150}}],line:3},4:{loc:{start:{line:3,column:8},end:{line:3,column:77}},type:"binary-expr",locations:[{start:{line:3,column:8},end:{line:3,column:35}},{start:{line:3,column:39},end:{line:3,column:77}}],line:3},5:{loc:{start:{line:4,column:58},end:{line:4,column:150}},type:"if",locations:[{start:{line:4,column:58},end:{line:4,column:150}},{start:{line:4,column:58},end:{line:4,column:150}}],line:4},6:{loc:{start:{line:4,column:85},end:{line:4,column:149}},type:"binary-expr",locations:[{start:{line:4,column:86},end:{line:4,column:143}},{start:{line:4,column:148},end:{line:4,column:149}}],line:4},7:{loc:{start:{line:4,column:86},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:94},end:{line:4,column:98}},{start:{line:4,column:101},end:{line:4,column:143}}],line:4},8:{loc:{start:{line:4,column:101},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:109},end:{line:4,column:126}},{start:{line:4,column:129},end:{line:4,column:143}}],line:4},9:{loc:{start:{line:5,column:11},end:{line:5,column:62}},type:"binary-expr",locations:[{start:{line:5,column:11},end:{line:5,column:16}},{start:{line:5,column:20},end:{line:5,column:21}},{start:{line:5,column:25},end:{line:5,column:62}}],line:5},10:{loc:{start:{line:34,column:8},end:{line:41,column:9}},type:"if",locations:[{start:{line:34,column:8},end:{line:41,column:9}},{start:{line:34,column:8},end:{line:41,column:9}}],line:34},11:{loc:{start:{line:47,column:8},end:{line:60,column:9}},type:"if",locations:[{start:{line:47,column:8},end:{line:60,column:9}},{start:{line:47,column:8},end:{line:60,column:9}}],line:47},12:{loc:{start:{line:50,column:12},end:{line:59,column:13}},type:"if",locations:[{start:{line:50,column:12},end:{line:59,column:13}},{start:{line:50,column:12},end:{line:59,column:13}}],line:50},13:{loc:{start:{line:52,column:16},end:{line:52,column:87}},type:"cond-expr",locations:[{start:{line:52,column:67},end:{line:52,column:73}},{start:{line:52,column:76},end:{line:52,column:87}}],line:52},14:{loc:{start:{line:52,column:16},end:{line:52,column:64}},type:"binary-expr",locations:[{start:{line:52,column:16},end:{line:52,column:47}},{start:{line:52,column:51},end:{line:52,column:64}}],line:52},15:{loc:{start:{line:56,column:16},end:{line:58,column:17}},type:"if",locations:[{start:{line:56,column:16},end:{line:58,column:17}},{start:{line:56,column:16},end:{line:58,column:17}}],line:56},16:{loc:{start:{line:56,column:20},end:{line:56,column:61}},type:"binary-expr",locations:[{start:{line:56,column:20},end:{line:56,column:35}},{start:{line:56,column:39},end:{line:56,column:61}}],line:56},17:{loc:{start:{line:64,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:66,column:9}},{start:{line:64,column:8},end:{line:66,column:9}}],line:64},18:{loc:{start:{line:94,column:8},end:{line:95,column:35}},type:"if",locations:[{start:{line:94,column:8},end:{line:95,column:35}},{start:{line:94,column:8},end:{line:95,column:35}}],line:94},19:{loc:{start:{line:96,column:8},end:{line:97,column:35}},type:"if",locations:[{start:{line:96,column:8},end:{line:97,column:35}},{start:{line:96,column:8},end:{line:97,column:35}}],line:96},20:{loc:{start:{line:98,column:8},end:{line:99,column:41}},type:"if",locations:[{start:{line:98,column:8},end:{line:99,column:41}},{start:{line:98,column:8},end:{line:99,column:41}}],line:98},21:{loc:{start:{line:100,column:8},end:{line:101,column:49}},type:"if",locations:[{start:{line:100,column:8},end:{line:101,column:49}},{start:{line:100,column:8},end:{line:101,column:49}}],line:100},22:{loc:{start:{line:102,column:8},end:{line:103,column:37}},type:"if",locations:[{start:{line:102,column:8},end:{line:103,column:37}},{start:{line:102,column:8},end:{line:103,column:37}}],line:102},23:{loc:{start:{line:104,column:8},end:{line:105,column:45}},type:"if",locations:[{start:{line:104,column:8},end:{line:105,column:45}},{start:{line:104,column:8},end:{line:105,column:45}}],line:104},24:{loc:{start:{line:106,column:8},end:{line:107,column:47}},type:"if",locations:[{start:{line:106,column:8},end:{line:107,column:47}},{start:{line:106,column:8},end:{line:107,column:47}}],line:106},25:{loc:{start:{line:116,column:8},end:{line:118,column:9}},type:"if",locations:[{start:{line:116,column:8},end:{line:118,column:9}},{start:{line:116,column:8},end:{line:118,column:9}}],line:116},26:{loc:{start:{line:122,column:8},end:{line:127,column:9}},type:"if",locations:[{start:{line:122,column:8},end:{line:127,column:9}},{start:{line:122,column:8},end:{line:127,column:9}}],line:122},27:{loc:{start:{line:125,column:13},end:{line:127,column:9}},type:"if",locations:[{start:{line:125,column:13},end:{line:127,column:9}},{start:{line:125,column:13},end:{line:127,column:9}}],line:125},28:{loc:{start:{line:135,column:8},end:{line:137,column:9}},type:"if",locations:[{start:{line:135,column:8},end:{line:137,column:9}},{start:{line:135,column:8},end:{line:137,column:9}}],line:135},29:{loc:{start:{line:139,column:8},end:{line:147,column:9}},type:"if",locations:[{start:{line:139,column:8},end:{line:147,column:9}},{start:{line:139,column:8},end:{line:147,column:9}}],line:139},30:{loc:{start:{line:142,column:13},end:{line:147,column:9}},type:"if",locations:[{start:{line:142,column:13},end:{line:147,column:9}},{start:{line:142,column:13},end:{line:147,column:9}}],line:142},31:{loc:{start:{line:142,column:17},end:{line:142,column:102}},type:"binary-expr",locations:[{start:{line:142,column:17},end:{line:142,column:58}},{start:{line:142,column:62},end:{line:142,column:102}}],line:142},32:{loc:{start:{line:158,column:8},end:{line:163,column:9}},type:"if",locations:[{start:{line:158,column:8},end:{line:163,column:9}},{start:{line:158,column:8},end:{line:163,column:9}}],line:158},33:{loc:{start:{line:167,column:20},end:{line:169,column:136}},type:"cond-expr",locations:[{start:{line:168,column:14},end:{line:168,column:137}},{start:{line:169,column:14},end:{line:169,column:136}}],line:167},34:{loc:{start:{line:170,column:8},end:{line:174,column:9}},type:"if",locations:[{start:{line:170,column:8},end:{line:174,column:9}},{start:{line:170,column:8},end:{line:174,column:9}}],line:170},35:{loc:{start:{line:175,column:8},end:{line:204,column:9}},type:"if",locations:[{start:{line:175,column:8},end:{line:204,column:9}},{start:{line:175,column:8},end:{line:204,column:9}}],line:175},36:{loc:{start:{line:176,column:45},end:{line:176,column:152}},type:"cond-expr",locations:[{start:{line:176,column:68},end:{line:176,column:98}},{start:{line:176,column:101},end:{line:176,column:152}}],line:176},37:{loc:{start:{line:177,column:12},end:{line:185,column:13}},type:"if",locations:[{start:{line:177,column:12},end:{line:185,column:13}},{start:{line:177,column:12},end:{line:185,column:13}}],line:177},38:{loc:{start:{line:177,column:16},end:{line:177,column:112}},type:"binary-expr",locations:[{start:{line:177,column:16},end:{line:177,column:40}},{start:{line:177,column:44},end:{line:177,column:87}},{start:{line:177,column:91},end:{line:177,column:112}}],line:177},39:{loc:{start:{line:190,column:13},end:{line:204,column:9}},type:"if",locations:[{start:{line:190,column:13},end:{line:204,column:9}},{start:{line:190,column:13},end:{line:204,column:9}}],line:190},40:{loc:{start:{line:191,column:45},end:{line:191,column:152}},type:"cond-expr",locations:[{start:{line:191,column:68},end:{line:191,column:98}},{start:{line:191,column:101},end:{line:191,column:152}}],line:191},41:{loc:{start:{line:192,column:12},end:{line:200,column:13}},type:"if",locations:[{start:{line:192,column:12},end:{line:200,column:13}},{start:{line:192,column:12},end:{line:200,column:13}}],line:192}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0],22:[0,0],23:[0,0],24:[0,0],25:[0,0],26:[0,0],27:[0,0],28:[0,0],29:[0,0],30:[0,0],31:[0,0],32:[0,0],33:[0,0],34:[0,0],35:[0,0],36:[0,0],37:[0,0],38:[0,0,0],39:[0,0],40:[0,0],41:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/view/MainView.ts"],names:[],mappings:"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",sourcesContent:["import bind from 'bind-decorator';\nimport HandlerView from './HandlerView';\nimport SelectedArea from './SelectedAreaView';\nimport EventObserver from '../observer/observer';\nimport { sliderOptions } from '../model/sliderOptions';\nimport { definedOptions } from '../model/definedOptions';\n\nexport default class MainView {\n  public observer = new EventObserver();\n\n  private sliderBody = document.createElement('div');\n\n  private parent!: HTMLElement;\n\n  private selectedArea!: SelectedArea;\n\n  private handlers: HandlerView[] = [];\n\n  private options!: definedOptions;\n\n  private handlerTargetId = '';\n\n  constructor(\n    parent: HTMLElement,\n    options: definedOptions,\n  ) {\n    this.init(parent, options);\n  }\n\n  public update(valueData: sliderOptions): void {\n    this.updateOptions(valueData);\n    this.setOrientation(this.options.isVertical);\n    this.setRange(this.options.hasRange);\n    this.updateLabels();\n    this.setHandlerPosition();\n    this.selectedArea.updateSelectedRange(\n      this.options.hasRange,\n      this.options.isVertical,\n      this.getHandlersElements(),\n    );\n  }\n\n  public getHandlers(): HandlerView[] {\n    return this.handlers;\n  }\n\n  public getHandlersElements(): HTMLElement[] {\n    return this.handlers.map((handler) => handler.getElement());\n  }\n\n  public setOrientation(vertical: boolean): void {\n    if (vertical) {\n      this.parent.classList.remove('slider_horizontal');\n      this.parent.classList.add('slider_vertical');\n    } else {\n      this.parent.classList.remove('slider_vertical');\n      this.parent.classList.add('slider_horizontal');\n    }\n  }\n\n  public setRange(range: boolean): void {\n    const maxHandlerElementIsDefined = this.handlers[1] !== undefined;\n    const minHandlerElement = this.handlers[0].getElement();\n    if (maxHandlerElementIsDefined) {\n      const maxHandlerElement = this.handlers[1].getElement();\n      const maxHandlerLabel = this.handlers[1].getLabelElement();\n      if (!range) {\n        maxHandlerElement.remove();\n        maxHandlerLabel?.remove();\n      } else {\n        minHandlerElement.after(maxHandlerElement);\n        if (maxHandlerLabel && this.options.hasLabels) {\n          maxHandlerElement.before(maxHandlerLabel);\n        }\n      }\n    }\n  }\n\n  public getCoordinates(element: HTMLElement, vertical: boolean): number {\n    const box = element.getBoundingClientRect();\n    if (vertical) {\n      return box.bottom + pageYOffset;\n    }\n    return box.left + pageXOffset;\n  }\n\n  private init(\n    parent: HTMLElement,\n    options: definedOptions,\n  ): void {\n    this.options = options;\n    this.parent = parent;\n    this.sliderBody.classList.add('slider__body');\n    this.parent.append(this.sliderBody);\n    this.setOrientation(this.options.isVertical);\n    this.setHandlers();\n    this.updateLabels();\n    this.setHandlerPosition();\n    this.bindEvents();\n    this.selectedArea = new SelectedArea({\n      sliderBody: this.sliderBody,\n      hasRange: this.options.hasRange,\n      isVertical: this.options.isVertical,\n      handlers: this.getHandlersElements(),\n    });\n  }\n\n  private bindEvents(): void {\n    this.handlers.forEach((handler) => {\n      handler.getElement().addEventListener('mousedown', this.handleHandlerMouseDown);\n    });\n    this.sliderBody.addEventListener('mousedown', this.handleSliderBodyMouseDown);\n  }\n\n  private updateOptions(valueData: sliderOptions): void {\n    const {\n      min, max, values, isVertical, step, hasRange, hasLabels,\n    } = valueData;\n    if (min !== undefined) this.options.min = min;\n    if (max !== undefined) this.options.max = max;\n    if (values !== undefined) this.options.values = values;\n    if (isVertical !== undefined) this.options.isVertical = isVertical;\n    if (step !== undefined) this.options.step = step;\n    if (hasRange !== undefined) this.options.hasRange = hasRange;\n    if (hasLabels !== undefined) this.options.hasLabels = hasLabels;\n  }\n\n  private setHandlers(): void {\n    this.options.values.forEach(() => {\n      this.handlers.push(new HandlerView(this.sliderBody, this.options.hasLabels));\n    });\n    this.handlers[0].getElement().id = 'handler_min';\n    this.handlers[1].getElement().id = 'handler_max';\n    this.handlers[0].appendHandler();\n    if (this.options.hasRange) {\n      this.handlers[1].appendHandler();\n    }\n  }\n\n  private setHandlerPosition(): void {\n    this.handlers.forEach((handler, index) => handler.setPosition(this.options.values[index], this.options.min, this.options.max, this.options.isVertical));\n    if (this.options.values[0] === this.options.max) {\n      this.handlers[0].getElement().style.zIndex = '100';\n    } else if (this.options.values[0] === this.options.min) {\n      this.handlers[0].getElement().style.zIndex = '1';\n    }\n  }\n\n  private updateLabels(): void{\n    this.handlers.forEach((handler, index) => handler.updateLabel(this.options.hasLabels, this.options.values[index]));\n  }\n\n  @bind\n  private handleSliderBodyMouseDown(event: MouseEvent): void {\n    let clickCoordinate = event.pageX;\n    const handlersCoordinates = this.handlers.map((handler) => this.getCoordinates(handler.getElement(), this.options.isVertical));\n    if (this.options.isVertical) {\n      clickCoordinate = event.pageY;\n    }\n    const handlerDistance = [Math.abs(clickCoordinate - handlersCoordinates[0]), Math.abs(clickCoordinate - handlersCoordinates[1])];\n    if (handlerDistance[0] < handlerDistance[1]) {\n      this.handlerTargetId = 'handler_min';\n    } else if (handlerDistance[0] === handlerDistance[1] && clickCoordinate < handlersCoordinates[0]) {\n      this.handlerTargetId = 'handler_min';\n    } else {\n      this.handlerTargetId = 'handler_max';\n    }\n\n    this.moveAt(clickCoordinate, this.handlerTargetId);\n  }\n\n  @bind\n  private handleHandlerMouseDown(event: MouseEvent): void {\n    event.stopPropagation();\n    const target = event.target as HTMLDivElement;\n    this.handlerTargetId = target.id;\n    document.addEventListener('mousemove', this.handleDocumentMouseMove);\n    document.addEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n\n  @bind\n  private handleDocumentMouseMove(e: MouseEvent): void {\n    if (this.options.isVertical) {\n      this.moveAt(e.pageY, this.handlerTargetId);\n    } else {\n      this.moveAt(e.pageX, this.handlerTargetId);\n    }\n  }\n\n  private moveAt(coordinate: number, targetId: string): void {\n    const sliderCoordinate = this.getCoordinates(this.sliderBody, this.options.isVertical);\n    let value = this.options.isVertical\n      ? ((sliderCoordinate - coordinate) / this.sliderBody.offsetHeight) * (this.options.max - this.options.min) + this.options.min\n      : ((coordinate - sliderCoordinate) / this.sliderBody.offsetWidth) * (this.options.max - this.options.min) + this.options.min;\n    if (!this.options.hasRange) {\n      this.observer.broadcast({\n        values: [value, this.options.values[1]],\n      });\n    }\n    if (targetId === 'handler_min') {\n      const minValueMoreThanMaxValue = this.options.min < 0 ? value > this.options.values[1] : (value + this.options.min) > this.options.values[1];\n      if (minValueMoreThanMaxValue && this.options.values[1] !== this.options.max && this.options.hasRange) {\n        value = this.options.values[1];\n        this.handlers[0].getElement().style.zIndex = '10';\n        this.handlers[1].getElement().style.zIndex = '100';\n      } else {\n        this.handlers[0].getElement().style.zIndex = '100';\n        this.handlers[1].getElement().style.zIndex = '10';\n      }\n      this.observer.broadcast({\n        values: [value, this.options.values[1]],\n      });\n    } else if (targetId === 'handler_max') {\n      const maxValueLessThanMinValue = this.options.min < 0 ? value < this.options.values[0] : (value + this.options.min) < this.options.values[0];\n      if (maxValueLessThanMinValue) {\n        value = this.options.values[0];\n        this.handlers[0].getElement().style.zIndex = '100';\n        this.handlers[1].getElement().style.zIndex = '10';\n      } else {\n        this.handlers[0].getElement().style.zIndex = '10';\n        this.handlers[1].getElement().style.zIndex = '100';\n      }\n      this.observer.broadcast({\n        values: [this.options.values[0], value],\n      });\n    }\n  }\n\n  @bind\n  private handleDocumentMouseUp(): void {\n    document.removeEventListener('mousemove', this.handleDocumentMouseMove);\n    document.removeEventListener('mouseup', this.handleDocumentMouseUp);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}(),y=(M.s[0]++,void M.b[0][0]++&&(M.b[0][1]++,(void 0).__decorate)||(M.b[0][2]++,function(e,n,A,t){M.f[0]++;var l,i=(M.s[1]++,arguments.length),o=(M.s[2]++,i<3?(M.b[1][0]++,n):(M.b[1][1]++,null===t?(M.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(M.b[2][1]++,t)));if(M.s[3]++,M.b[4][0]++,"object"==typeof Reflect&&(M.b[4][1]++,"function"==typeof Reflect.decorate))M.b[3][0]++,M.s[4]++,o=Reflect.decorate(e,n,A,t);else{M.b[3][1]++,M.s[5]++;for(var s=e.length-1;s>=0;s--)M.s[6]++,(l=e[s])?(M.b[5][0]++,M.s[7]++,M.b[6][0]++,o=(i<3?(M.b[7][0]++,l(o)):(M.b[7][1]++,i>3?(M.b[8][0]++,l(n,A,o)):(M.b[8][1]++,l(n,A))))||(M.b[6][1]++,o)):M.b[5][1]++}return M.s[8]++,M.b[9][0]++,i>3&&(M.b[9][1]++,o)&&(M.b[9][2]++,Object.defineProperty(n,A,o)),o}));class G{constructor(e,n){M.f[1]++,M.s[9]++,this.observer=new C,M.s[10]++,this.sliderBody=document.createElement("div"),M.s[11]++,this.handlers=[],M.s[12]++,this.handlerTargetId="",M.s[13]++,this.init(e,n)}update(e){M.f[2]++,M.s[14]++,this.updateOptions(e),M.s[15]++,this.setOrientation(this.options.isVertical),M.s[16]++,this.setRange(this.options.hasRange),M.s[17]++,this.updateLabels(),M.s[18]++,this.setHandlerPosition(),M.s[19]++,this.selectedArea.updateSelectedRange(this.options.hasRange,this.options.isVertical,this.getHandlersElements())}getHandlers(){return M.f[3]++,M.s[20]++,this.handlers}getHandlersElements(){return M.f[4]++,M.s[21]++,this.handlers.map(e=>(M.f[5]++,M.s[22]++,e.getElement()))}setOrientation(e){M.f[6]++,M.s[23]++,e?(M.b[10][0]++,M.s[24]++,this.parent.classList.remove("slider_horizontal"),M.s[25]++,this.parent.classList.add("slider_vertical")):(M.b[10][1]++,M.s[26]++,this.parent.classList.remove("slider_vertical"),M.s[27]++,this.parent.classList.add("slider_horizontal"))}setRange(e){var n;M.f[7]++;const A=(M.s[28]++,void 0!==this.handlers[1]),t=(M.s[29]++,this.handlers[0].getElement());if(M.s[30]++,A){M.b[11][0]++;const A=(M.s[31]++,this.handlers[1].getElement()),l=(M.s[32]++,this.handlers[1].getLabelElement());M.s[33]++,e?(M.b[12][1]++,M.s[36]++,t.after(A),M.s[37]++,M.b[16][0]++,l&&(M.b[16][1]++,this.options.hasLabels)?(M.b[15][0]++,M.s[38]++,A.before(l)):M.b[15][1]++):(M.b[12][0]++,M.s[34]++,A.remove(),M.s[35]++,M.b[14][0]++,null===(n=l)||(M.b[14][1]++,void 0===n)?M.b[13][0]++:(M.b[13][1]++,n.remove()))}else M.b[11][1]++}getCoordinates(e,n){M.f[8]++;const A=(M.s[39]++,e.getBoundingClientRect());return M.s[40]++,n?(M.b[17][0]++,M.s[41]++,A.bottom+pageYOffset):(M.b[17][1]++,M.s[42]++,A.left+pageXOffset)}init(e,n){M.f[9]++,M.s[43]++,this.options=n,M.s[44]++,this.parent=e,M.s[45]++,this.sliderBody.classList.add("slider__body"),M.s[46]++,this.parent.append(this.sliderBody),M.s[47]++,this.setOrientation(this.options.isVertical),M.s[48]++,this.setHandlers(),M.s[49]++,this.updateLabels(),M.s[50]++,this.setHandlerPosition(),M.s[51]++,this.bindEvents(),M.s[52]++,this.selectedArea=new b({sliderBody:this.sliderBody,hasRange:this.options.hasRange,isVertical:this.options.isVertical,handlers:this.getHandlersElements()})}bindEvents(){M.f[10]++,M.s[53]++,this.handlers.forEach(e=>{M.f[11]++,M.s[54]++,e.getElement().addEventListener("mousedown",this.handleHandlerMouseDown)}),M.s[55]++,this.sliderBody.addEventListener("mousedown",this.handleSliderBodyMouseDown)}updateOptions(e){M.f[12]++;const{min:n,max:A,values:t,isVertical:l,step:i,hasRange:o,hasLabels:s}=(M.s[56]++,e);M.s[57]++,void 0!==n?(M.b[18][0]++,M.s[58]++,this.options.min=n):M.b[18][1]++,M.s[59]++,void 0!==A?(M.b[19][0]++,M.s[60]++,this.options.max=A):M.b[19][1]++,M.s[61]++,void 0!==t?(M.b[20][0]++,M.s[62]++,this.options.values=t):M.b[20][1]++,M.s[63]++,void 0!==l?(M.b[21][0]++,M.s[64]++,this.options.isVertical=l):M.b[21][1]++,M.s[65]++,void 0!==i?(M.b[22][0]++,M.s[66]++,this.options.step=i):M.b[22][1]++,M.s[67]++,void 0!==o?(M.b[23][0]++,M.s[68]++,this.options.hasRange=o):M.b[23][1]++,M.s[69]++,void 0!==s?(M.b[24][0]++,M.s[70]++,this.options.hasLabels=s):M.b[24][1]++}setHandlers(){M.f[13]++,M.s[71]++,this.options.values.forEach(()=>{M.f[14]++,M.s[72]++,this.handlers.push(new v(this.sliderBody,this.options.hasLabels))}),M.s[73]++,this.handlers[0].getElement().id="handler_min",M.s[74]++,this.handlers[1].getElement().id="handler_max",M.s[75]++,this.handlers[0].appendHandler(),M.s[76]++,this.options.hasRange?(M.b[25][0]++,M.s[77]++,this.handlers[1].appendHandler()):M.b[25][1]++}setHandlerPosition(){M.f[15]++,M.s[78]++,this.handlers.forEach((e,n)=>(M.f[16]++,M.s[79]++,e.setPosition(this.options.values[n],this.options.min,this.options.max,this.options.isVertical))),M.s[80]++,this.options.values[0]===this.options.max?(M.b[26][0]++,M.s[81]++,this.handlers[0].getElement().style.zIndex="100"):(M.b[26][1]++,M.s[82]++,this.options.values[0]===this.options.min?(M.b[27][0]++,M.s[83]++,this.handlers[0].getElement().style.zIndex="1"):M.b[27][1]++)}updateLabels(){M.f[17]++,M.s[84]++,this.handlers.forEach((e,n)=>(M.f[18]++,M.s[85]++,e.updateLabel(this.options.hasLabels,this.options.values[n])))}handleSliderBodyMouseDown(e){M.f[19]++;let n=(M.s[86]++,e.pageX);const A=(M.s[87]++,this.handlers.map(e=>(M.f[20]++,M.s[88]++,this.getCoordinates(e.getElement(),this.options.isVertical))));M.s[89]++,this.options.isVertical?(M.b[28][0]++,M.s[90]++,n=e.pageY):M.b[28][1]++;const t=(M.s[91]++,[Math.abs(n-A[0]),Math.abs(n-A[1])]);M.s[92]++,t[0]<t[1]?(M.b[29][0]++,M.s[93]++,this.handlerTargetId="handler_min"):(M.b[29][1]++,M.s[94]++,M.b[31][0]++,t[0]===t[1]&&(M.b[31][1]++,n<A[0])?(M.b[30][0]++,M.s[95]++,this.handlerTargetId="handler_min"):(M.b[30][1]++,M.s[96]++,this.handlerTargetId="handler_max")),M.s[97]++,this.moveAt(n,this.handlerTargetId)}handleHandlerMouseDown(e){M.f[21]++,M.s[98]++,e.stopPropagation();const n=(M.s[99]++,e.target);M.s[100]++,this.handlerTargetId=n.id,M.s[101]++,document.addEventListener("mousemove",this.handleDocumentMouseMove),M.s[102]++,document.addEventListener("mouseup",this.handleDocumentMouseUp)}handleDocumentMouseMove(e){M.f[22]++,M.s[103]++,this.options.isVertical?(M.b[32][0]++,M.s[104]++,this.moveAt(e.pageY,this.handlerTargetId)):(M.b[32][1]++,M.s[105]++,this.moveAt(e.pageX,this.handlerTargetId))}moveAt(e,n){M.f[23]++;const A=(M.s[106]++,this.getCoordinates(this.sliderBody,this.options.isVertical));let t=(M.s[107]++,this.options.isVertical?(M.b[33][0]++,(A-e)/this.sliderBody.offsetHeight*(this.options.max-this.options.min)+this.options.min):(M.b[33][1]++,(e-A)/this.sliderBody.offsetWidth*(this.options.max-this.options.min)+this.options.min));if(M.s[108]++,this.options.hasRange?M.b[34][1]++:(M.b[34][0]++,M.s[109]++,this.observer.broadcast({values:[t,this.options.values[1]]})),M.s[110]++,"handler_min"===n){M.b[35][0]++;const e=(M.s[111]++,this.options.min<0?(M.b[36][0]++,t>this.options.values[1]):(M.b[36][1]++,t+this.options.min>this.options.values[1]));M.s[112]++,M.b[38][0]++,e&&(M.b[38][1]++,this.options.values[1]!==this.options.max)&&(M.b[38][2]++,this.options.hasRange)?(M.b[37][0]++,M.s[113]++,t=this.options.values[1],M.s[114]++,this.handlers[0].getElement().style.zIndex="10",M.s[115]++,this.handlers[1].getElement().style.zIndex="100"):(M.b[37][1]++,M.s[116]++,this.handlers[0].getElement().style.zIndex="100",M.s[117]++,this.handlers[1].getElement().style.zIndex="10"),M.s[118]++,this.observer.broadcast({values:[t,this.options.values[1]]})}else if(M.b[35][1]++,M.s[119]++,"handler_max"===n){M.b[39][0]++;const e=(M.s[120]++,this.options.min<0?(M.b[40][0]++,t<this.options.values[0]):(M.b[40][1]++,t+this.options.min<this.options.values[0]));M.s[121]++,e?(M.b[41][0]++,M.s[122]++,t=this.options.values[0],M.s[123]++,this.handlers[0].getElement().style.zIndex="100",M.s[124]++,this.handlers[1].getElement().style.zIndex="10"):(M.b[41][1]++,M.s[125]++,this.handlers[0].getElement().style.zIndex="10",M.s[126]++,this.handlers[1].getElement().style.zIndex="100"),M.s[127]++,this.observer.broadcast({values:[this.options.values[0],t]})}else M.b[39][1]++}handleDocumentMouseUp(){M.f[24]++,M.s[128]++,document.removeEventListener("mousemove",this.handleDocumentMouseMove),M.s[129]++,document.removeEventListener("mouseup",this.handleDocumentMouseUp)}}M.s[130]++,y([h.a],G.prototype,"handleSliderBodyMouseDown",null),M.s[131]++,y([h.a],G.prototype,"handleHandlerMouseDown",null),M.s[132]++,y([h.a],G.prototype,"handleDocumentMouseMove",null),M.s[133]++,y([h.a],G.prototype,"handleDocumentMouseUp",null);var O=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",n="9c0f64b9662fd33b3a96fb23f3e628f7d921f215",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",statementMap:{0:{start:{line:4,column:8},end:{line:4,column:33}},1:{start:{line:7,column:8},end:{line:7,column:27}},2:{start:{line:10,column:8},end:{line:10,column:27}},3:{start:{line:11,column:8},end:{line:11,column:29}},4:{start:{line:12,column:8},end:{line:12,column:71}},5:{start:{line:13,column:8},end:{line:13,column:27}},6:{start:{line:14,column:8},end:{line:14,column:26}},7:{start:{line:17,column:8},end:{line:19,column:11}},8:{start:{line:18,column:12},end:{line:18,column:41}},9:{start:{line:22,column:8},end:{line:24,column:11}},10:{start:{line:23,column:12},end:{line:23,column:40}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:3,column:4},end:{line:3,column:5}},loc:{start:{line:3,column:31},end:{line:5,column:5}},line:3},1:{name:"(anonymous_1)",decl:{start:{line:6,column:4},end:{line:6,column:5}},loc:{start:{line:6,column:16},end:{line:8,column:5}},line:6},2:{name:"(anonymous_2)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:24},end:{line:15,column:5}},line:9},3:{name:"(anonymous_3)",decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:18},end:{line:20,column:5}},line:16},4:{name:"(anonymous_4)",decl:{start:{line:17,column:37},end:{line:17,column:38}},loc:{start:{line:17,column:52},end:{line:19,column:9}},line:17},5:{name:"(anonymous_5)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:17},end:{line:25,column:5}},line:21},6:{name:"(anonymous_6)",decl:{start:{line:22,column:38},end:{line:22,column:39}},loc:{start:{line:22,column:53},end:{line:24,column:9}},line:22}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Presenter.ts"],names:[],mappings:"AACA,OAAO,QAAQ,MAAM,kBAAkB,CAAC;AAGxC,MAAM,CAAC,OAAO,OAAO,SAAS;IAO5B,YAAY,MAAmB,EAAE,KAAgB;QAC/C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEO,IAAI,CAAC,MAAmB,EAAE,KAAgB;QAChD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,QAAQ,CACtB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CACxB,CAAC;QACF,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACxD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACzD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;CACF",sourcesContent:["import MainModel from '../model/MainModel';\nimport MainView from '../view/MainView';\nimport { sliderOptions } from '../model/sliderOptions';\n\nexport default class Presenter {\n  private model!: MainModel;\n\n  private view!: MainView;\n\n  private parent!: HTMLElement;\n\n  constructor(parent: HTMLElement, model: MainModel) {\n    this.init(parent, model);\n  }\n\n  public getParent(): HTMLElement {\n    return this.parent;\n  }\n\n  private init(parent: HTMLElement, model: MainModel): void {\n    this.model = model;\n    this.parent = parent;\n    this.view = new MainView(\n      this.parent,\n      this.model.getOptions(),\n    );\n    this.updateModel();\n    this.updateView();\n  }\n\n  private updateModel(): void {\n    this.view.observer.subscribe((valueData: sliderOptions) => {\n      this.model.update(valueData);\n    });\n  }\n\n  private updateView(): void {\n    this.model.observer.subscribe((valueData: sliderOptions) => {\n      this.view.update(valueData);\n    });\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class x{constructor(e,n){O.f[0]++,O.s[0]++,this.init(e,n)}getParent(){return O.f[1]++,O.s[1]++,this.parent}init(e,n){O.f[2]++,O.s[2]++,this.model=n,O.s[3]++,this.parent=e,O.s[4]++,this.view=new G(this.parent,this.model.getOptions()),O.s[5]++,this.updateModel(),O.s[6]++,this.updateView()}updateModel(){O.f[3]++,O.s[7]++,this.view.observer.subscribe(e=>{O.f[4]++,O.s[8]++,this.model.update(e)})}updateView(){O.f[5]++,O.s[9]++,this.model.observer.subscribe(e=>{O.f[6]++,O.s[10]++,this.view.update(e)})}}A.d(n,"a",(function(){return B}));var S=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",n="b45ca3417f2755cef17d3a7046f44b58bdb1c955",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",statementMap:{0:{start:{line:6,column:8},end:{line:6,column:44}},1:{start:{line:7,column:8},end:{line:7,column:35}},2:{start:{line:10,column:8},end:{line:12,column:11}},3:{start:{line:11,column:12},end:{line:11,column:47}},4:{start:{line:15,column:8},end:{line:15,column:42}},5:{start:{line:18,column:8},end:{line:18,column:58}},6:{start:{line:21,column:8},end:{line:21,column:36}},7:{start:{line:22,column:8},end:{line:22,column:36}},8:{start:{line:25,column:8},end:{line:25,column:38}},9:{start:{line:28,column:8},end:{line:28,column:37}},10:{start:{line:31,column:8},end:{line:31,column:36}},11:{start:{line:34,column:8},end:{line:34,column:34}},12:{start:{line:37,column:8},end:{line:37,column:43}},13:{start:{line:40,column:8},end:{line:40,column:44}},14:{start:{line:43,column:8},end:{line:43,column:37}},15:{start:{line:46,column:8},end:{line:46,column:35}},16:{start:{line:49,column:8},end:{line:49,column:38}},17:{start:{line:52,column:8},end:{line:52,column:36}},18:{start:{line:55,column:8},end:{line:55,column:44}},19:{start:{line:56,column:8},end:{line:56,column:59}},20:{start:{line:57,column:8},end:{line:57,column:28}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:5,column:4},end:{line:5,column:5}},loc:{start:{line:5,column:33},end:{line:8,column:5}},line:5},1:{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:19},end:{line:13,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:10,column:38},end:{line:10,column:39}},loc:{start:{line:10,column:53},end:{line:12,column:9}},line:10},3:{name:"(anonymous_3)",decl:{start:{line:14,column:4},end:{line:14,column:5}},loc:{start:{line:14,column:16},end:{line:16,column:5}},line:14},4:{name:"(anonymous_4)",decl:{start:{line:17,column:4},end:{line:17,column:5}},loc:{start:{line:17,column:16},end:{line:19,column:5}},line:17},5:{name:"(anonymous_5)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:21},end:{line:23,column:5}},line:20},6:{name:"(anonymous_6)",decl:{start:{line:24,column:4},end:{line:24,column:5}},loc:{start:{line:24,column:16},end:{line:26,column:5}},line:24},7:{name:"(anonymous_7)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:22},end:{line:29,column:5}},line:27},8:{name:"(anonymous_8)",decl:{start:{line:30,column:4},end:{line:30,column:5}},loc:{start:{line:30,column:14},end:{line:32,column:5}},line:30},9:{name:"(anonymous_9)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:19},end:{line:35,column:5}},line:33},10:{name:"(anonymous_10)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:21},end:{line:38,column:5}},line:36},11:{name:"(anonymous_11)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:29},end:{line:41,column:5}},line:39},12:{name:"(anonymous_12)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:15},end:{line:44,column:5}},line:42},13:{name:"(anonymous_13)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:20},end:{line:47,column:5}},line:45},14:{name:"(anonymous_14)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:16},end:{line:50,column:5}},line:48},15:{name:"(anonymous_15)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:21},end:{line:53,column:5}},line:51},16:{name:"(anonymous_16)",decl:{start:{line:54,column:4},end:{line:54,column:5}},loc:{start:{line:54,column:26},end:{line:58,column:5}},line:54}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/presenter/Facade.ts"],names:[],mappings:"AAAA,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAC3C,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,OAAO,aAAa,MAAM,sBAAsB,CAAC;AAEjD,MAAM,CAAC,OAAO,OAAO,MAAM;IAOzB,YAAY,MAAmB,EAAE,OAAsB;QAFhD,aAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;QAGpC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEM,YAAY;QACjB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,SAAwB,EAAE,EAAE;YACzD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;IACpC,CAAC;IAEM,SAAS;QACd,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IACpD,CAAC;IAEM,SAAS,CAAC,KAAe;QAC9B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;IAEM,SAAS,CAAC,MAAgB;QAC/B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,KAAa;QAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAEM,cAAc,CAAC,QAAiB;QACrC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAEM,QAAQ,CAAC,KAAc;QAC5B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;IAChC,CAAC;IAEM,SAAS,CAAC,KAAc;QAC7B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAEO,IAAI,CAAC,MAAmB,EAAE,OAAsB;QACtD,IAAI,CAAC,KAAK,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;CACF",sourcesContent:["import MainModel from '../model/MainModel';\nimport Presenter from './Presenter';\nimport { sliderOptions } from '../model/sliderOptions';\nimport EventObserver from '../observer/observer';\n\nexport default class Facade {\n  private model!: MainModel;\n\n  private presenter!: Presenter;\n\n  public observer = new EventObserver();\n\n  constructor(parent: HTMLElement, options: sliderOptions) {\n    this.init(parent, options);\n  }\n\n  public updateValues(): void {\n    this.model.observer.subscribe((valueData: sliderOptions) => {\n      this.observer.broadcast(valueData);\n    });\n  }\n\n  public getParent(): HTMLElement {\n    return this.presenter.getParent();\n  }\n\n  public getMinMax(): number[] {\n    return [this.model.getMin(), this.model.getMax()];\n  }\n\n  public setMinMax(value: number[]): void {\n    this.model.setMin(value[0]);\n    this.model.setMax(value[1]);\n  }\n\n  public getValues(): number[] {\n    return this.model.getValues();\n  }\n\n  public setValues(values: number[]): void {\n    this.model.setValues(values);\n  }\n\n  public getStep(): number {\n    return this.model.getStep();\n  }\n\n  public setStep(value: number): void {\n    this.model.setStep(value);\n  }\n\n  public getOrientation(): boolean {\n    return this.model.getOrientation();\n  }\n\n  public setOrientation(vertical: boolean): void {\n    this.model.setOrientation(vertical);\n  }\n\n  public getRange(): boolean {\n    return this.model.getRange();\n  }\n\n  public setRange(range: boolean): void {\n    this.model.setRange(range);\n  }\n\n  public getLabels(): boolean {\n    return this.model.getLabels();\n  }\n\n  public setLabels(label: boolean): void {\n    this.model.setLabels(label);\n  }\n\n  private init(parent: HTMLElement, options: sliderOptions): void {\n    this.model = new MainModel(options);\n    this.presenter = new Presenter(parent, this.model);\n    this.updateValues();\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class B{constructor(e,n){S.f[0]++,S.s[0]++,this.observer=new C,S.s[1]++,this.init(e,n)}updateValues(){S.f[1]++,S.s[2]++,this.model.observer.subscribe(e=>{S.f[2]++,S.s[3]++,this.observer.broadcast(e)})}getParent(){return S.f[3]++,S.s[4]++,this.presenter.getParent()}getMinMax(){return S.f[4]++,S.s[5]++,[this.model.getMin(),this.model.getMax()]}setMinMax(e){S.f[5]++,S.s[6]++,this.model.setMin(e[0]),S.s[7]++,this.model.setMax(e[1])}getValues(){return S.f[6]++,S.s[8]++,this.model.getValues()}setValues(e){S.f[7]++,S.s[9]++,this.model.setValues(e)}getStep(){return S.f[8]++,S.s[10]++,this.model.getStep()}setStep(e){S.f[9]++,S.s[11]++,this.model.setStep(e)}getOrientation(){return S.f[10]++,S.s[12]++,this.model.getOrientation()}setOrientation(e){S.f[11]++,S.s[13]++,this.model.setOrientation(e)}getRange(){return S.f[12]++,S.s[14]++,this.model.getRange()}setRange(e){S.f[13]++,S.s[15]++,this.model.setRange(e)}getLabels(){return S.f[14]++,S.s[16]++,this.model.getLabels()}setLabels(e){S.f[15]++,S.s[17]++,this.model.setLabels(e)}init(e,n){S.f[16]++,S.s[18]++,this.model=new m(n),S.s[19]++,this.presenter=new x(e,this.model),S.s[20]++,this.updateValues()}}},function(e,n,A){"use strict";var t,l=function(){return void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t},i=function(){var e={};return function(n){if(void 0===e[n]){var A=document.querySelector(n);if(window.HTMLIFrameElement&&A instanceof window.HTMLIFrameElement)try{A=A.contentDocument.head}catch(e){A=null}e[n]=A}return e[n]}}(),o=[];function s(e){for(var n=-1,A=0;A<o.length;A++)if(o[A].identifier===e){n=A;break}return n}function a(e,n){for(var A={},t=[],l=0;l<e.length;l++){var i=e[l],a=n.base?i[0]+n.base:i[0],r=A[a]||0,C="".concat(a," ").concat(r);A[a]=r+1;var c=s(C),u={css:i[1],media:i[2],sourceMap:i[3]};-1!==c?(o[c].references++,o[c].updater(u)):o.push({identifier:C,updater:h(u,n),references:1}),t.push(C)}return t}function r(e){var n=document.createElement("style"),t=e.attributes||{};if(void 0===t.nonce){var l=A.nc;l&&(t.nonce=l)}if(Object.keys(t).forEach((function(e){n.setAttribute(e,t[e])})),"function"==typeof e.insert)e.insert(n);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var C,c=(C=[],function(e,n){return C[e]=n,C.filter(Boolean).join("\n")});function u(e,n,A,t){var l=A?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(e.styleSheet)e.styleSheet.cssText=c(n,l);else{var i=document.createTextNode(l),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function d(e,n,A){var t=A.css,l=A.media,i=A.sourceMap;if(l?e.setAttribute("media",l):e.removeAttribute("media"),i&&btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var m=null,p=0;function h(e,n){var A,t,l;if(n.singleton){var i=p++;A=m||(m=r(n)),t=u.bind(null,A,i,!1),l=u.bind(null,A,i,!0)}else A=r(n),t=d.bind(null,A,n),l=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(A)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else l()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=l());var A=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var t=0;t<A.length;t++){var l=s(A[t]);o[l].references--}for(var i=a(e,n),r=0;r<A.length;r++){var C=s(A[r]);0===o[C].references&&(o[C].updater(),o.splice(C,1))}A=i}}}},function(e,n,A){A(4),e.exports=A(22)},function(e,n,A){"use strict";A.r(n),function(e){A(6),A(8);var n,t,l,i,o,s,a=A(1),r=(n="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",t="b14157655183ea7237d108a4f05e00f8156b3f89",l=new(0,function(){}.constructor)("return this")(),o={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",statementMap:{0:{start:{line:4,column:0},end:{line:9,column:3}},1:{start:{line:5,column:4},end:{line:8,column:6}},2:{start:{line:6,column:23},end:{line:6,column:55}},3:{start:{line:7,column:8},end:{line:7,column:22}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:2},end:{line:4,column:3}},loc:{start:{line:4,column:8},end:{line:9,column:1}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:5,column:18},end:{line:5,column:19}},loc:{start:{line:5,column:37},end:{line:8,column:5}},line:5}},branchMap:{},s:{0:0,1:0,2:0,3:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/index.ts"],names:[],mappings:"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,4BAA4B,CAAC;AACpC,OAAO,MAAM,MAAM,oBAAoB,CAAC;AAExC,CAAC,CAAC,GAAG,EAAE;IACL,CAAC,CAAC,EAAE,CAAC,MAAM,GAAG,UAAU,OAAY;QAClC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC",sourcesContent:["import './scss/main.scss';\nimport './assets/favicons/favicons';\nimport Facade from './presenter/Facade';\n\n$(() => {\n  $.fn.slider = function (options: any): Facade {\n    const facade: Facade = new Facade(this.get(0), options);\n    return facade;\n  };\n});\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(s=l[i="__coverage__"]||(l[i]={}))[n]&&s[n].hash===t?s[n]:(o.hash=t,s[n]=o));r.s[0]++,e(()=>{r.f[0]++,r.s[1]++,e.fn.slider=function(e){r.f[1]++;const n=(r.s[2]++,new a.a(this.get(0),e));return r.s[3]++,n}})}.call(this,A(5))},function(e,n,A){var t;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(n,A){"use strict";"object"==typeof e.exports?e.exports=n.document?A(n,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return A(e)}:A(n)}("undefined"!=typeof window?window:this,(function(A,l){"use strict";var i=[],o=A.document,s=Object.getPrototypeOf,a=i.slice,r=i.concat,C=i.push,c=i.indexOf,u={},d=u.toString,m=u.hasOwnProperty,p=m.toString,h=p.call(Object),f={},I=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},v={type:!0,src:!0,nonce:!0,noModule:!0};function E(e,n,A){var t,l,i=(A=A||o).createElement("script");if(i.text=e,n)for(t in v)(l=n[t]||n.getAttribute&&n.getAttribute(t))&&i.setAttribute(t,l);A.head.appendChild(i).parentNode.removeChild(i)}function b(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[d.call(e)]||"object":typeof e}var M=function(e,n){return new M.fn.init(e,n)},y=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function G(e){var n=!!e&&"length"in e&&e.length,A=b(e);return!I(e)&&!g(e)&&("array"===A||0===n||"number"==typeof n&&n>0&&n-1 in e)}M.fn=M.prototype={jquery:"3.4.1",constructor:M,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var n=M.merge(this.constructor(),e);return n.prevObject=this,n},each:function(e){return M.each(this,e)},map:function(e){return this.pushStack(M.map(this,(function(n,A){return e.call(n,A,n)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var n=this.length,A=+e+(e<0?n:0);return this.pushStack(A>=0&&A<n?[this[A]]:[])},end:function(){return this.prevObject||this.constructor()},push:C,sort:i.sort,splice:i.splice},M.extend=M.fn.extend=function(){var e,n,A,t,l,i,o=arguments[0]||{},s=1,a=arguments.length,r=!1;for("boolean"==typeof o&&(r=o,o=arguments[s]||{},s++),"object"==typeof o||I(o)||(o={}),s===a&&(o=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(n in e)t=e[n],"__proto__"!==n&&o!==t&&(r&&t&&(M.isPlainObject(t)||(l=Array.isArray(t)))?(A=o[n],i=l&&!Array.isArray(A)?[]:l||M.isPlainObject(A)?A:{},l=!1,o[n]=M.extend(r,i,t)):void 0!==t&&(o[n]=t));return o},M.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var n,A;return!(!e||"[object Object]"!==d.call(e))&&(!(n=s(e))||"function"==typeof(A=m.call(n,"constructor")&&n.constructor)&&p.call(A)===h)},isEmptyObject:function(e){var n;for(n in e)return!1;return!0},globalEval:function(e,n){E(e,{nonce:n&&n.nonce})},each:function(e,n){var A,t=0;if(G(e))for(A=e.length;t<A&&!1!==n.call(e[t],t,e[t]);t++);else for(t in e)if(!1===n.call(e[t],t,e[t]))break;return e},trim:function(e){return null==e?"":(e+"").replace(y,"")},makeArray:function(e,n){var A=n||[];return null!=e&&(G(Object(e))?M.merge(A,"string"==typeof e?[e]:e):C.call(A,e)),A},inArray:function(e,n,A){return null==n?-1:c.call(n,e,A)},merge:function(e,n){for(var A=+n.length,t=0,l=e.length;t<A;t++)e[l++]=n[t];return e.length=l,e},grep:function(e,n,A){for(var t=[],l=0,i=e.length,o=!A;l<i;l++)!n(e[l],l)!==o&&t.push(e[l]);return t},map:function(e,n,A){var t,l,i=0,o=[];if(G(e))for(t=e.length;i<t;i++)null!=(l=n(e[i],i,A))&&o.push(l);else for(i in e)null!=(l=n(e[i],i,A))&&o.push(l);return r.apply([],o)},guid:1,support:f}),"function"==typeof Symbol&&(M.fn[Symbol.iterator]=i[Symbol.iterator]),M.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,n){u["[object "+n+"]"]=n.toLowerCase()}));var O=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var n,A,t,l,i,o,s,a,r,C,c,u,d,m,p,h,f,I,g,v="sizzle"+1*new Date,E=e.document,b=0,M=0,y=ae(),G=ae(),O=ae(),x=ae(),S=function(e,n){return e===n&&(c=!0),0},B={}.hasOwnProperty,Q=[],K=Q.pop,D=Q.push,w=Q.push,k=Q.slice,L=function(e,n){for(var A=0,t=e.length;A<t;A++)if(e[A]===n)return A;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",U="[\\x20\\t\\r\\n\\f]",Y="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",T="\\["+U+"*("+Y+")(?:"+U+"*([*^$|!~]?=)"+U+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+Y+"))|)"+U+"*\\]",V=":("+Y+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+T+")*)|.*)\\)|)",R=new RegExp(U+"+","g"),P=new RegExp("^"+U+"+|((?:^|[^\\\\])(?:\\\\.)*)"+U+"+$","g"),H=new RegExp("^"+U+"*,"+U+"*"),j=new RegExp("^"+U+"*([>+~]|"+U+")"+U+"*"),W=new RegExp(U+"|>"),N=new RegExp(V),F=new RegExp("^"+Y+"$"),q={ID:new RegExp("^#("+Y+")"),CLASS:new RegExp("^\\.("+Y+")"),TAG:new RegExp("^("+Y+"|[*])"),ATTR:new RegExp("^"+T),PSEUDO:new RegExp("^"+V),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+U+"*(even|odd|(([+-]|)(\\d*)n|)"+U+"*(?:([+-]|)"+U+"*(\\d+)|))"+U+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+U+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+U+"*((?:-\\d)?\\d*)"+U+"*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,ne=new RegExp("\\\\([\\da-f]{1,6}"+U+"?|("+U+")|.)","ig"),Ae=function(e,n,A){var t="0x"+n-65536;return t!=t||A?n:t<0?String.fromCharCode(t+65536):String.fromCharCode(t>>10|55296,1023&t|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,le=function(e,n){return n?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){u()},oe=ve((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{w.apply(Q=k.call(E.childNodes),E.childNodes),Q[E.childNodes.length].nodeType}catch(e){w={apply:Q.length?function(e,n){D.apply(e,k.call(n))}:function(e,n){for(var A=e.length,t=0;e[A++]=n[t++];);e.length=A-1}}}function se(e,n,t,l){var i,s,r,C,c,m,f,I=n&&n.ownerDocument,b=n?n.nodeType:9;if(t=t||[],"string"!=typeof e||!e||1!==b&&9!==b&&11!==b)return t;if(!l&&((n?n.ownerDocument||n:E)!==d&&u(n),n=n||d,p)){if(11!==b&&(c=Z.exec(e)))if(i=c[1]){if(9===b){if(!(r=n.getElementById(i)))return t;if(r.id===i)return t.push(r),t}else if(I&&(r=I.getElementById(i))&&g(n,r)&&r.id===i)return t.push(r),t}else{if(c[2])return w.apply(t,n.getElementsByTagName(e)),t;if((i=c[3])&&A.getElementsByClassName&&n.getElementsByClassName)return w.apply(t,n.getElementsByClassName(i)),t}if(A.qsa&&!x[e+" "]&&(!h||!h.test(e))&&(1!==b||"object"!==n.nodeName.toLowerCase())){if(f=e,I=n,1===b&&W.test(e)){for((C=n.getAttribute("id"))?C=C.replace(te,le):n.setAttribute("id",C=v),s=(m=o(e)).length;s--;)m[s]="#"+C+" "+ge(m[s]);f=m.join(","),I=ee.test(e)&&fe(n.parentNode)||n}try{return w.apply(t,I.querySelectorAll(f)),t}catch(n){x(e,!0)}finally{C===v&&n.removeAttribute("id")}}}return a(e.replace(P,"$1"),n,t,l)}function ae(){var e=[];return function n(A,l){return e.push(A+" ")>t.cacheLength&&delete n[e.shift()],n[A+" "]=l}}function re(e){return e[v]=!0,e}function Ce(e){var n=d.createElement("fieldset");try{return!!e(n)}catch(e){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function ce(e,n){for(var A=e.split("|"),l=A.length;l--;)t.attrHandle[A[l]]=n}function ue(e,n){var A=n&&e,t=A&&1===e.nodeType&&1===n.nodeType&&e.sourceIndex-n.sourceIndex;if(t)return t;if(A)for(;A=A.nextSibling;)if(A===n)return-1;return e?1:-1}function de(e){return function(n){return"input"===n.nodeName.toLowerCase()&&n.type===e}}function me(e){return function(n){var A=n.nodeName.toLowerCase();return("input"===A||"button"===A)&&n.type===e}}function pe(e){return function(n){return"form"in n?n.parentNode&&!1===n.disabled?"label"in n?"label"in n.parentNode?n.parentNode.disabled===e:n.disabled===e:n.isDisabled===e||n.isDisabled!==!e&&oe(n)===e:n.disabled===e:"label"in n&&n.disabled===e}}function he(e){return re((function(n){return n=+n,re((function(A,t){for(var l,i=e([],A.length,n),o=i.length;o--;)A[l=i[o]]&&(A[l]=!(t[l]=A[l]))}))}))}function fe(e){return e&&void 0!==e.getElementsByTagName&&e}for(n in A=se.support={},i=se.isXML=function(e){var n=e.namespaceURI,A=(e.ownerDocument||e).documentElement;return!z.test(n||A&&A.nodeName||"HTML")},u=se.setDocument=function(e){var n,l,o=e?e.ownerDocument||e:E;return o!==d&&9===o.nodeType&&o.documentElement?(m=(d=o).documentElement,p=!i(d),E!==d&&(l=d.defaultView)&&l.top!==l&&(l.addEventListener?l.addEventListener("unload",ie,!1):l.attachEvent&&l.attachEvent("onunload",ie)),A.attributes=Ce((function(e){return e.className="i",!e.getAttribute("className")})),A.getElementsByTagName=Ce((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),A.getElementsByClassName=J.test(d.getElementsByClassName),A.getById=Ce((function(e){return m.appendChild(e).id=v,!d.getElementsByName||!d.getElementsByName(v).length})),A.getById?(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){return e.getAttribute("id")===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&p){var A=n.getElementById(e);return A?[A]:[]}}):(t.filter.ID=function(e){var n=e.replace(ne,Ae);return function(e){var A=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return A&&A.value===n}},t.find.ID=function(e,n){if(void 0!==n.getElementById&&p){var A,t,l,i=n.getElementById(e);if(i){if((A=i.getAttributeNode("id"))&&A.value===e)return[i];for(l=n.getElementsByName(e),t=0;i=l[t++];)if((A=i.getAttributeNode("id"))&&A.value===e)return[i]}return[]}}),t.find.TAG=A.getElementsByTagName?function(e,n){return void 0!==n.getElementsByTagName?n.getElementsByTagName(e):A.qsa?n.querySelectorAll(e):void 0}:function(e,n){var A,t=[],l=0,i=n.getElementsByTagName(e);if("*"===e){for(;A=i[l++];)1===A.nodeType&&t.push(A);return t}return i},t.find.CLASS=A.getElementsByClassName&&function(e,n){if(void 0!==n.getElementsByClassName&&p)return n.getElementsByClassName(e)},f=[],h=[],(A.qsa=J.test(d.querySelectorAll))&&(Ce((function(e){m.appendChild(e).innerHTML="<a id='"+v+"'></a><select id='"+v+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+U+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\["+U+"*(?:value|"+_+")"),e.querySelectorAll("[id~="+v+"-]").length||h.push("~="),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+v+"+*").length||h.push(".#.+[+~]")})),Ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var n=d.createElement("input");n.setAttribute("type","hidden"),e.appendChild(n).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name"+U+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")}))),(A.matchesSelector=J.test(I=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&Ce((function(e){A.disconnectedMatch=I.call(e,"*"),I.call(e,"[s!='']:x"),f.push("!=",V)})),h=h.length&&new RegExp(h.join("|")),f=f.length&&new RegExp(f.join("|")),n=J.test(m.compareDocumentPosition),g=n||J.test(m.contains)?function(e,n){var A=9===e.nodeType?e.documentElement:e,t=n&&n.parentNode;return e===t||!(!t||1!==t.nodeType||!(A.contains?A.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,n){if(n)for(;n=n.parentNode;)if(n===e)return!0;return!1},S=n?function(e,n){if(e===n)return c=!0,0;var t=!e.compareDocumentPosition-!n.compareDocumentPosition;return t||(1&(t=(e.ownerDocument||e)===(n.ownerDocument||n)?e.compareDocumentPosition(n):1)||!A.sortDetached&&n.compareDocumentPosition(e)===t?e===d||e.ownerDocument===E&&g(E,e)?-1:n===d||n.ownerDocument===E&&g(E,n)?1:C?L(C,e)-L(C,n):0:4&t?-1:1)}:function(e,n){if(e===n)return c=!0,0;var A,t=0,l=e.parentNode,i=n.parentNode,o=[e],s=[n];if(!l||!i)return e===d?-1:n===d?1:l?-1:i?1:C?L(C,e)-L(C,n):0;if(l===i)return ue(e,n);for(A=e;A=A.parentNode;)o.unshift(A);for(A=n;A=A.parentNode;)s.unshift(A);for(;o[t]===s[t];)t++;return t?ue(o[t],s[t]):o[t]===E?-1:s[t]===E?1:0},d):d},se.matches=function(e,n){return se(e,null,null,n)},se.matchesSelector=function(e,n){if((e.ownerDocument||e)!==d&&u(e),A.matchesSelector&&p&&!x[n+" "]&&(!f||!f.test(n))&&(!h||!h.test(n)))try{var t=I.call(e,n);if(t||A.disconnectedMatch||e.document&&11!==e.document.nodeType)return t}catch(e){x(n,!0)}return se(n,d,null,[e]).length>0},se.contains=function(e,n){return(e.ownerDocument||e)!==d&&u(e),g(e,n)},se.attr=function(e,n){(e.ownerDocument||e)!==d&&u(e);var l=t.attrHandle[n.toLowerCase()],i=l&&B.call(t.attrHandle,n.toLowerCase())?l(e,n,!p):void 0;return void 0!==i?i:A.attributes||!p?e.getAttribute(n):(i=e.getAttributeNode(n))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(te,le)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var n,t=[],l=0,i=0;if(c=!A.detectDuplicates,C=!A.sortStable&&e.slice(0),e.sort(S),c){for(;n=e[i++];)n===e[i]&&(l=t.push(i));for(;l--;)e.splice(t[l],1)}return C=null,e},l=se.getText=function(e){var n,A="",t=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)A+=l(e)}else if(3===i||4===i)return e.nodeValue}else for(;n=e[t++];)A+=l(n);return A},(t=se.selectors={cacheLength:50,createPseudo:re,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ne,Ae),e[3]=(e[3]||e[4]||e[5]||"").replace(ne,Ae),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var n,A=!e[6]&&e[2];return q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":A&&N.test(A)&&(n=o(A,!0))&&(n=A.indexOf(")",A.length-n)-A.length)&&(e[0]=e[0].slice(0,n),e[2]=A.slice(0,n)),e.slice(0,3))}},filter:{TAG:function(e){var n=e.replace(ne,Ae).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===n}},CLASS:function(e){var n=y[e+" "];return n||(n=new RegExp("(^|"+U+")"+e+"("+U+"|$)"))&&y(e,(function(e){return n.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,n,A){return function(t){var l=se.attr(t,e);return null==l?"!="===n:!n||(l+="","="===n?l===A:"!="===n?l!==A:"^="===n?A&&0===l.indexOf(A):"*="===n?A&&l.indexOf(A)>-1:"$="===n?A&&l.slice(-A.length)===A:"~="===n?(" "+l.replace(R," ")+" ").indexOf(A)>-1:"|="===n&&(l===A||l.slice(0,A.length+1)===A+"-"))}},CHILD:function(e,n,A,t,l){var i="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===n;return 1===t&&0===l?function(e){return!!e.parentNode}:function(n,A,a){var r,C,c,u,d,m,p=i!==o?"nextSibling":"previousSibling",h=n.parentNode,f=s&&n.nodeName.toLowerCase(),I=!a&&!s,g=!1;if(h){if(i){for(;p;){for(u=n;u=u[p];)if(s?u.nodeName.toLowerCase()===f:1===u.nodeType)return!1;m=p="only"===e&&!m&&"nextSibling"}return!0}if(m=[o?h.firstChild:h.lastChild],o&&I){for(g=(d=(r=(C=(c=(u=h)[v]||(u[v]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===b&&r[1])&&r[2],u=d&&h.childNodes[d];u=++d&&u&&u[p]||(g=d=0)||m.pop();)if(1===u.nodeType&&++g&&u===n){C[e]=[b,d,g];break}}else if(I&&(g=d=(r=(C=(c=(u=n)[v]||(u[v]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]||[])[0]===b&&r[1]),!1===g)for(;(u=++d&&u&&u[p]||(g=d=0)||m.pop())&&((s?u.nodeName.toLowerCase()!==f:1!==u.nodeType)||!++g||(I&&((C=(c=u[v]||(u[v]={}))[u.uniqueID]||(c[u.uniqueID]={}))[e]=[b,g]),u!==n)););return(g-=l)===t||g%t==0&&g/t>=0}}},PSEUDO:function(e,n){var A,l=t.pseudos[e]||t.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return l[v]?l(n):l.length>1?(A=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?re((function(e,A){for(var t,i=l(e,n),o=i.length;o--;)e[t=L(e,i[o])]=!(A[t]=i[o])})):function(e){return l(e,0,A)}):l}},pseudos:{not:re((function(e){var n=[],A=[],t=s(e.replace(P,"$1"));return t[v]?re((function(e,n,A,l){for(var i,o=t(e,null,l,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(n[s]=i))})):function(e,l,i){return n[0]=e,t(n,null,i,A),n[0]=null,!A.pop()}})),has:re((function(e){return function(n){return se(e,n).length>0}})),contains:re((function(e){return e=e.replace(ne,Ae),function(n){return(n.textContent||l(n)).indexOf(e)>-1}})),lang:re((function(e){return F.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(ne,Ae).toLowerCase(),function(n){var A;do{if(A=p?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return(A=A.toLowerCase())===e||0===A.indexOf(e+"-")}while((n=n.parentNode)&&1===n.nodeType);return!1}})),target:function(n){var A=e.location&&e.location.hash;return A&&A.slice(1)===n.id},root:function(e){return e===m},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&!!e.checked||"option"===n&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var n=e.nodeName.toLowerCase();return"input"===n&&"button"===e.type||"button"===n},text:function(e){var n;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(n=e.getAttribute("type"))||"text"===n.toLowerCase())},first:he((function(){return[0]})),last:he((function(e,n){return[n-1]})),eq:he((function(e,n,A){return[A<0?A+n:A]})),even:he((function(e,n){for(var A=0;A<n;A+=2)e.push(A);return e})),odd:he((function(e,n){for(var A=1;A<n;A+=2)e.push(A);return e})),lt:he((function(e,n,A){for(var t=A<0?A+n:A>n?n:A;--t>=0;)e.push(t);return e})),gt:he((function(e,n,A){for(var t=A<0?A+n:A;++t<n;)e.push(t);return e}))}}).pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[n]=de(n);for(n in{submit:!0,reset:!0})t.pseudos[n]=me(n);function Ie(){}function ge(e){for(var n=0,A=e.length,t="";n<A;n++)t+=e[n].value;return t}function ve(e,n,A){var t=n.dir,l=n.next,i=l||t,o=A&&"parentNode"===i,s=M++;return n.first?function(n,A,l){for(;n=n[t];)if(1===n.nodeType||o)return e(n,A,l);return!1}:function(n,A,a){var r,C,c,u=[b,s];if(a){for(;n=n[t];)if((1===n.nodeType||o)&&e(n,A,a))return!0}else for(;n=n[t];)if(1===n.nodeType||o)if(C=(c=n[v]||(n[v]={}))[n.uniqueID]||(c[n.uniqueID]={}),l&&l===n.nodeName.toLowerCase())n=n[t]||n;else{if((r=C[i])&&r[0]===b&&r[1]===s)return u[2]=r[2];if(C[i]=u,u[2]=e(n,A,a))return!0}return!1}}function Ee(e){return e.length>1?function(n,A,t){for(var l=e.length;l--;)if(!e[l](n,A,t))return!1;return!0}:e[0]}function be(e,n,A,t,l){for(var i,o=[],s=0,a=e.length,r=null!=n;s<a;s++)(i=e[s])&&(A&&!A(i,t,l)||(o.push(i),r&&n.push(s)));return o}function Me(e,n,A,t,l,i){return t&&!t[v]&&(t=Me(t)),l&&!l[v]&&(l=Me(l,i)),re((function(i,o,s,a){var r,C,c,u=[],d=[],m=o.length,p=i||function(e,n,A){for(var t=0,l=n.length;t<l;t++)se(e,n[t],A);return A}(n||"*",s.nodeType?[s]:s,[]),h=!e||!i&&n?p:be(p,u,e,s,a),f=A?l||(i?e:m||t)?[]:o:h;if(A&&A(h,f,s,a),t)for(r=be(f,d),t(r,[],s,a),C=r.length;C--;)(c=r[C])&&(f[d[C]]=!(h[d[C]]=c));if(i){if(l||e){if(l){for(r=[],C=f.length;C--;)(c=f[C])&&r.push(h[C]=c);l(null,f=[],r,a)}for(C=f.length;C--;)(c=f[C])&&(r=l?L(i,c):u[C])>-1&&(i[r]=!(o[r]=c))}}else f=be(f===o?f.splice(m,f.length):f),l?l(null,o,f,a):w.apply(o,f)}))}function ye(e){for(var n,A,l,i=e.length,o=t.relative[e[0].type],s=o||t.relative[" "],a=o?1:0,C=ve((function(e){return e===n}),s,!0),c=ve((function(e){return L(n,e)>-1}),s,!0),u=[function(e,A,t){var l=!o&&(t||A!==r)||((n=A).nodeType?C(e,A,t):c(e,A,t));return n=null,l}];a<i;a++)if(A=t.relative[e[a].type])u=[ve(Ee(u),A)];else{if((A=t.filter[e[a].type].apply(null,e[a].matches))[v]){for(l=++a;l<i&&!t.relative[e[l].type];l++);return Me(a>1&&Ee(u),a>1&&ge(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(P,"$1"),A,a<l&&ye(e.slice(a,l)),l<i&&ye(e=e.slice(l)),l<i&&ge(e))}u.push(A)}return Ee(u)}return Ie.prototype=t.filters=t.pseudos,t.setFilters=new Ie,o=se.tokenize=function(e,n){var A,l,i,o,s,a,r,C=G[e+" "];if(C)return n?0:C.slice(0);for(s=e,a=[],r=t.preFilter;s;){for(o in A&&!(l=H.exec(s))||(l&&(s=s.slice(l[0].length)||s),a.push(i=[])),A=!1,(l=j.exec(s))&&(A=l.shift(),i.push({value:A,type:l[0].replace(P," ")}),s=s.slice(A.length)),t.filter)!(l=q[o].exec(s))||r[o]&&!(l=r[o](l))||(A=l.shift(),i.push({value:A,type:o,matches:l}),s=s.slice(A.length));if(!A)break}return n?s.length:s?se.error(e):G(e,a).slice(0)},s=se.compile=function(e,n){var A,l=[],i=[],s=O[e+" "];if(!s){for(n||(n=o(e)),A=n.length;A--;)(s=ye(n[A]))[v]?l.push(s):i.push(s);(s=O(e,function(e,n){var A=n.length>0,l=e.length>0,i=function(i,o,s,a,C){var c,m,h,f=0,I="0",g=i&&[],v=[],E=r,M=i||l&&t.find.TAG("*",C),y=b+=null==E?1:Math.random()||.1,G=M.length;for(C&&(r=o===d||o||C);I!==G&&null!=(c=M[I]);I++){if(l&&c){for(m=0,o||c.ownerDocument===d||(u(c),s=!p);h=e[m++];)if(h(c,o||d,s)){a.push(c);break}C&&(b=y)}A&&((c=!h&&c)&&f--,i&&g.push(c))}if(f+=I,A&&I!==f){for(m=0;h=n[m++];)h(g,v,o,s);if(i){if(f>0)for(;I--;)g[I]||v[I]||(v[I]=K.call(a));v=be(v)}w.apply(a,v),C&&!i&&v.length>0&&f+n.length>1&&se.uniqueSort(a)}return C&&(b=y,r=E),g};return A?re(i):i}(i,l))).selector=e}return s},a=se.select=function(e,n,A,l){var i,a,r,C,c,u="function"==typeof e&&e,d=!l&&o(e=u.selector||e);if(A=A||[],1===d.length){if((a=d[0]=d[0].slice(0)).length>2&&"ID"===(r=a[0]).type&&9===n.nodeType&&p&&t.relative[a[1].type]){if(!(n=(t.find.ID(r.matches[0].replace(ne,Ae),n)||[])[0]))return A;u&&(n=n.parentNode),e=e.slice(a.shift().value.length)}for(i=q.needsContext.test(e)?0:a.length;i--&&(r=a[i],!t.relative[C=r.type]);)if((c=t.find[C])&&(l=c(r.matches[0].replace(ne,Ae),ee.test(a[0].type)&&fe(n.parentNode)||n))){if(a.splice(i,1),!(e=l.length&&ge(a)))return w.apply(A,l),A;break}}return(u||s(e,d))(l,n,!p,A,!n||ee.test(e)&&fe(n.parentNode)||n),A},A.sortStable=v.split("").sort(S).join("")===v,A.detectDuplicates=!!c,u(),A.sortDetached=Ce((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),Ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,n,A){if(!A)return e.getAttribute(n,"type"===n.toLowerCase()?1:2)})),A.attributes&&Ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,n,A){if(!A&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),Ce((function(e){return null==e.getAttribute("disabled")}))||ce(_,(function(e,n,A){var t;if(!A)return!0===e[n]?n.toLowerCase():(t=e.getAttributeNode(n))&&t.specified?t.value:null})),se}(A);M.find=O,M.expr=O.selectors,M.expr[":"]=M.expr.pseudos,M.uniqueSort=M.unique=O.uniqueSort,M.text=O.getText,M.isXMLDoc=O.isXML,M.contains=O.contains,M.escapeSelector=O.escape;var x=function(e,n,A){for(var t=[],l=void 0!==A;(e=e[n])&&9!==e.nodeType;)if(1===e.nodeType){if(l&&M(e).is(A))break;t.push(e)}return t},S=function(e,n){for(var A=[];e;e=e.nextSibling)1===e.nodeType&&e!==n&&A.push(e);return A},B=M.expr.match.needsContext;function Q(e,n){return e.nodeName&&e.nodeName.toLowerCase()===n.toLowerCase()}var K=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,n,A){return I(n)?M.grep(e,(function(e,t){return!!n.call(e,t,e)!==A})):n.nodeType?M.grep(e,(function(e){return e===n!==A})):"string"!=typeof n?M.grep(e,(function(e){return c.call(n,e)>-1!==A})):M.filter(n,e,A)}M.filter=function(e,n,A){var t=n[0];return A&&(e=":not("+e+")"),1===n.length&&1===t.nodeType?M.find.matchesSelector(t,e)?[t]:[]:M.find.matches(e,M.grep(n,(function(e){return 1===e.nodeType})))},M.fn.extend({find:function(e){var n,A,t=this.length,l=this;if("string"!=typeof e)return this.pushStack(M(e).filter((function(){for(n=0;n<t;n++)if(M.contains(l[n],this))return!0})));for(A=this.pushStack([]),n=0;n<t;n++)M.find(e,l[n],A);return t>1?M.uniqueSort(A):A},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&B.test(e)?M(e):e||[],!1).length}});var w,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(M.fn.init=function(e,n,A){var t,l;if(!e)return this;if(A=A||w,"string"==typeof e){if(!(t="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:k.exec(e))||!t[1]&&n)return!n||n.jquery?(n||A).find(e):this.constructor(n).find(e);if(t[1]){if(n=n instanceof M?n[0]:n,M.merge(this,M.parseHTML(t[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),K.test(t[1])&&M.isPlainObject(n))for(t in n)I(this[t])?this[t](n[t]):this.attr(t,n[t]);return this}return(l=o.getElementById(t[2]))&&(this[0]=l,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):I(e)?void 0!==A.ready?A.ready(e):e(M):M.makeArray(e,this)}).prototype=M.fn,w=M(o);var L=/^(?:parents|prev(?:Until|All))/,_={children:!0,contents:!0,next:!0,prev:!0};function U(e,n){for(;(e=e[n])&&1!==e.nodeType;);return e}M.fn.extend({has:function(e){var n=M(e,this),A=n.length;return this.filter((function(){for(var e=0;e<A;e++)if(M.contains(this,n[e]))return!0}))},closest:function(e,n){var A,t=0,l=this.length,i=[],o="string"!=typeof e&&M(e);if(!B.test(e))for(;t<l;t++)for(A=this[t];A&&A!==n;A=A.parentNode)if(A.nodeType<11&&(o?o.index(A)>-1:1===A.nodeType&&M.find.matchesSelector(A,e))){i.push(A);break}return this.pushStack(i.length>1?M.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?c.call(M(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,n){return this.pushStack(M.uniqueSort(M.merge(this.get(),M(e,n))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),M.each({parent:function(e){var n=e.parentNode;return n&&11!==n.nodeType?n:null},parents:function(e){return x(e,"parentNode")},parentsUntil:function(e,n,A){return x(e,"parentNode",A)},next:function(e){return U(e,"nextSibling")},prev:function(e){return U(e,"previousSibling")},nextAll:function(e){return x(e,"nextSibling")},prevAll:function(e){return x(e,"previousSibling")},nextUntil:function(e,n,A){return x(e,"nextSibling",A)},prevUntil:function(e,n,A){return x(e,"previousSibling",A)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(Q(e,"template")&&(e=e.content||e),M.merge([],e.childNodes))}},(function(e,n){M.fn[e]=function(A,t){var l=M.map(this,n,A);return"Until"!==e.slice(-5)&&(t=A),t&&"string"==typeof t&&(l=M.filter(t,l)),this.length>1&&(_[e]||M.uniqueSort(l),L.test(e)&&l.reverse()),this.pushStack(l)}}));var Y=/[^\x20\t\r\n\f]+/g;function T(e){return e}function V(e){throw e}function R(e,n,A,t){var l;try{e&&I(l=e.promise)?l.call(e).done(n).fail(A):e&&I(l=e.then)?l.call(e,n,A):n.apply(void 0,[e].slice(t))}catch(e){A.apply(void 0,[e])}}M.Callbacks=function(e){e="string"==typeof e?function(e){var n={};return M.each(e.match(Y)||[],(function(e,A){n[A]=!0})),n}(e):M.extend({},e);var n,A,t,l,i=[],o=[],s=-1,a=function(){for(l=l||e.once,t=n=!0;o.length;s=-1)for(A=o.shift();++s<i.length;)!1===i[s].apply(A[0],A[1])&&e.stopOnFalse&&(s=i.length,A=!1);e.memory||(A=!1),n=!1,l&&(i=A?[]:"")},r={add:function(){return i&&(A&&!n&&(s=i.length-1,o.push(A)),function n(A){M.each(A,(function(A,t){I(t)?e.unique&&r.has(t)||i.push(t):t&&t.length&&"string"!==b(t)&&n(t)}))}(arguments),A&&!n&&a()),this},remove:function(){return M.each(arguments,(function(e,n){for(var A;(A=M.inArray(n,i,A))>-1;)i.splice(A,1),A<=s&&s--})),this},has:function(e){return e?M.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return l=o=[],i=A="",this},disabled:function(){return!i},lock:function(){return l=o=[],A||n||(i=A=""),this},locked:function(){return!!l},fireWith:function(e,A){return l||(A=[e,(A=A||[]).slice?A.slice():A],o.push(A),n||a()),this},fire:function(){return r.fireWith(this,arguments),this},fired:function(){return!!t}};return r},M.extend({Deferred:function(e){var n=[["notify","progress",M.Callbacks("memory"),M.Callbacks("memory"),2],["resolve","done",M.Callbacks("once memory"),M.Callbacks("once memory"),0,"resolved"],["reject","fail",M.Callbacks("once memory"),M.Callbacks("once memory"),1,"rejected"]],t="pending",l={state:function(){return t},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return l.then(null,e)},pipe:function(){var e=arguments;return M.Deferred((function(A){M.each(n,(function(n,t){var l=I(e[t[4]])&&e[t[4]];i[t[1]]((function(){var e=l&&l.apply(this,arguments);e&&I(e.promise)?e.promise().progress(A.notify).done(A.resolve).fail(A.reject):A[t[0]+"With"](this,l?[e]:arguments)}))})),e=null})).promise()},then:function(e,t,l){var i=0;function o(e,n,t,l){return function(){var s=this,a=arguments,r=function(){var A,r;if(!(e<i)){if((A=t.apply(s,a))===n.promise())throw new TypeError("Thenable self-resolution");r=A&&("object"==typeof A||"function"==typeof A)&&A.then,I(r)?l?r.call(A,o(i,n,T,l),o(i,n,V,l)):(i++,r.call(A,o(i,n,T,l),o(i,n,V,l),o(i,n,T,n.notifyWith))):(t!==T&&(s=void 0,a=[A]),(l||n.resolveWith)(s,a))}},C=l?r:function(){try{r()}catch(A){M.Deferred.exceptionHook&&M.Deferred.exceptionHook(A,C.stackTrace),e+1>=i&&(t!==V&&(s=void 0,a=[A]),n.rejectWith(s,a))}};e?C():(M.Deferred.getStackHook&&(C.stackTrace=M.Deferred.getStackHook()),A.setTimeout(C))}}return M.Deferred((function(A){n[0][3].add(o(0,A,I(l)?l:T,A.notifyWith)),n[1][3].add(o(0,A,I(e)?e:T)),n[2][3].add(o(0,A,I(t)?t:V))})).promise()},promise:function(e){return null!=e?M.extend(e,l):l}},i={};return M.each(n,(function(e,A){var o=A[2],s=A[5];l[A[1]]=o.add,s&&o.add((function(){t=s}),n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),o.add(A[3].fire),i[A[0]]=function(){return i[A[0]+"With"](this===i?void 0:this,arguments),this},i[A[0]+"With"]=o.fireWith})),l.promise(i),e&&e.call(i,i),i},when:function(e){var n=arguments.length,A=n,t=Array(A),l=a.call(arguments),i=M.Deferred(),o=function(e){return function(A){t[e]=this,l[e]=arguments.length>1?a.call(arguments):A,--n||i.resolveWith(t,l)}};if(n<=1&&(R(e,i.done(o(A)).resolve,i.reject,!n),"pending"===i.state()||I(l[A]&&l[A].then)))return i.then();for(;A--;)R(l[A],o(A),i.reject);return i.promise()}});var P=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;M.Deferred.exceptionHook=function(e,n){A.console&&A.console.warn&&e&&P.test(e.name)&&A.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},M.readyException=function(e){A.setTimeout((function(){throw e}))};var H=M.Deferred();function j(){o.removeEventListener("DOMContentLoaded",j),A.removeEventListener("load",j),M.ready()}M.fn.ready=function(e){return H.then(e).catch((function(e){M.readyException(e)})),this},M.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--M.readyWait:M.isReady)||(M.isReady=!0,!0!==e&&--M.readyWait>0||H.resolveWith(o,[M]))}}),M.ready.then=H.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?A.setTimeout(M.ready):(o.addEventListener("DOMContentLoaded",j),A.addEventListener("load",j));var W=function(e,n,A,t,l,i,o){var s=0,a=e.length,r=null==A;if("object"===b(A))for(s in l=!0,A)W(e,n,s,A[s],!0,i,o);else if(void 0!==t&&(l=!0,I(t)||(o=!0),r&&(o?(n.call(e,t),n=null):(r=n,n=function(e,n,A){return r.call(M(e),A)})),n))for(;s<a;s++)n(e[s],A,o?t:t.call(e[s],s,n(e[s],A)));return l?e:r?n.call(e):a?n(e[0],A):i},N=/^-ms-/,F=/-([a-z])/g;function q(e,n){return n.toUpperCase()}function z(e){return e.replace(N,"ms-").replace(F,q)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=M.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var n=e[this.expando];return n||(n={},$(e)&&(e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,configurable:!0}))),n},set:function(e,n,A){var t,l=this.cache(e);if("string"==typeof n)l[z(n)]=A;else for(t in n)l[z(t)]=n[t];return l},get:function(e,n){return void 0===n?this.cache(e):e[this.expando]&&e[this.expando][z(n)]},access:function(e,n,A){return void 0===n||n&&"string"==typeof n&&void 0===A?this.get(e,n):(this.set(e,n,A),void 0!==A?A:n)},remove:function(e,n){var A,t=e[this.expando];if(void 0!==t){if(void 0!==n){A=(n=Array.isArray(n)?n.map(z):(n=z(n))in t?[n]:n.match(Y)||[]).length;for(;A--;)delete t[n[A]]}(void 0===n||M.isEmptyObject(t))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var n=e[this.expando];return void 0!==n&&!M.isEmptyObject(n)}};var J=new X,Z=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ne=/[A-Z]/g;function Ae(e,n,A){var t;if(void 0===A&&1===e.nodeType)if(t="data-"+n.replace(ne,"-$&").toLowerCase(),"string"==typeof(A=e.getAttribute(t))){try{A=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(A)}catch(e){}Z.set(e,n,A)}else A=void 0;return A}M.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,n,A){return Z.access(e,n,A)},removeData:function(e,n){Z.remove(e,n)},_data:function(e,n,A){return J.access(e,n,A)},_removeData:function(e,n){J.remove(e,n)}}),M.fn.extend({data:function(e,n){var A,t,l,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(l=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(A=o.length;A--;)o[A]&&0===(t=o[A].name).indexOf("data-")&&(t=z(t.slice(5)),Ae(i,t,l[t]));J.set(i,"hasDataAttrs",!0)}return l}return"object"==typeof e?this.each((function(){Z.set(this,e)})):W(this,(function(n){var A;if(i&&void 0===n)return void 0!==(A=Z.get(i,e))?A:void 0!==(A=Ae(i,e))?A:void 0;this.each((function(){Z.set(this,e,n)}))}),null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),M.extend({queue:function(e,n,A){var t;if(e)return n=(n||"fx")+"queue",t=J.get(e,n),A&&(!t||Array.isArray(A)?t=J.access(e,n,M.makeArray(A)):t.push(A)),t||[]},dequeue:function(e,n){n=n||"fx";var A=M.queue(e,n),t=A.length,l=A.shift(),i=M._queueHooks(e,n);"inprogress"===l&&(l=A.shift(),t--),l&&("fx"===n&&A.unshift("inprogress"),delete i.stop,l.call(e,(function(){M.dequeue(e,n)}),i)),!t&&i&&i.empty.fire()},_queueHooks:function(e,n){var A=n+"queueHooks";return J.get(e,A)||J.access(e,A,{empty:M.Callbacks("once memory").add((function(){J.remove(e,[n+"queue",A])}))})}}),M.fn.extend({queue:function(e,n){var A=2;return"string"!=typeof e&&(n=e,e="fx",A--),arguments.length<A?M.queue(this[0],e):void 0===n?this:this.each((function(){var A=M.queue(this,e,n);M._queueHooks(this,e),"fx"===e&&"inprogress"!==A[0]&&M.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){M.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,n){var A,t=1,l=M.Deferred(),i=this,o=this.length,s=function(){--t||l.resolveWith(i,[i])};for("string"!=typeof e&&(n=e,e=void 0),e=e||"fx";o--;)(A=J.get(i[o],e+"queueHooks"))&&A.empty&&(t++,A.empty.add(s));return s(),l.promise(n)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,le=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=o.documentElement,se=function(e){return M.contains(e.ownerDocument,e)},ae={composed:!0};oe.getRootNode&&(se=function(e){return M.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var re=function(e,n){return"none"===(e=n||e).style.display||""===e.style.display&&se(e)&&"none"===M.css(e,"display")},Ce=function(e,n,A,t){var l,i,o={};for(i in n)o[i]=e.style[i],e.style[i]=n[i];for(i in l=A.apply(e,t||[]),n)e.style[i]=o[i];return l};function ce(e,n,A,t){var l,i,o=20,s=t?function(){return t.cur()}:function(){return M.css(e,n,"")},a=s(),r=A&&A[3]||(M.cssNumber[n]?"":"px"),C=e.nodeType&&(M.cssNumber[n]||"px"!==r&&+a)&&le.exec(M.css(e,n));if(C&&C[3]!==r){for(a/=2,r=r||C[3],C=+a||1;o--;)M.style(e,n,C+r),(1-i)*(1-(i=s()/a||.5))<=0&&(o=0),C/=i;C*=2,M.style(e,n,C+r),A=A||[]}return A&&(C=+C||+a||0,l=A[1]?C+(A[1]+1)*A[2]:+A[2],t&&(t.unit=r,t.start=C,t.end=l)),l}var ue={};function de(e){var n,A=e.ownerDocument,t=e.nodeName,l=ue[t];return l||(n=A.body.appendChild(A.createElement(t)),l=M.css(n,"display"),n.parentNode.removeChild(n),"none"===l&&(l="block"),ue[t]=l,l)}function me(e,n){for(var A,t,l=[],i=0,o=e.length;i<o;i++)(t=e[i]).style&&(A=t.style.display,n?("none"===A&&(l[i]=J.get(t,"display")||null,l[i]||(t.style.display="")),""===t.style.display&&re(t)&&(l[i]=de(t))):"none"!==A&&(l[i]="none",J.set(t,"display",A)));for(i=0;i<o;i++)null!=l[i]&&(e[i].style.display=l[i]);return e}M.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){re(this)?M(this).show():M(this).hide()}))}});var pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,Ie={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,n){var A;return A=void 0!==e.getElementsByTagName?e.getElementsByTagName(n||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(n||"*"):[],void 0===n||n&&Q(e,n)?M.merge([e],A):A}function ve(e,n){for(var A=0,t=e.length;A<t;A++)J.set(e[A],"globalEval",!n||J.get(n[A],"globalEval"))}Ie.optgroup=Ie.option,Ie.tbody=Ie.tfoot=Ie.colgroup=Ie.caption=Ie.thead,Ie.th=Ie.td;var Ee,be,Me=/<|&#?\w+;/;function ye(e,n,A,t,l){for(var i,o,s,a,r,C,c=n.createDocumentFragment(),u=[],d=0,m=e.length;d<m;d++)if((i=e[d])||0===i)if("object"===b(i))M.merge(u,i.nodeType?[i]:i);else if(Me.test(i)){for(o=o||c.appendChild(n.createElement("div")),s=(he.exec(i)||["",""])[1].toLowerCase(),a=Ie[s]||Ie._default,o.innerHTML=a[1]+M.htmlPrefilter(i)+a[2],C=a[0];C--;)o=o.lastChild;M.merge(u,o.childNodes),(o=c.firstChild).textContent=""}else u.push(n.createTextNode(i));for(c.textContent="",d=0;i=u[d++];)if(t&&M.inArray(i,t)>-1)l&&l.push(i);else if(r=se(i),o=ge(c.appendChild(i),"script"),r&&ve(o),A)for(C=0;i=o[C++];)fe.test(i.type||"")&&A.push(i);return c}Ee=o.createDocumentFragment().appendChild(o.createElement("div")),(be=o.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),Ee.appendChild(be),f.checkClone=Ee.cloneNode(!0).cloneNode(!0).lastChild.checked,Ee.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!Ee.cloneNode(!0).lastChild.defaultValue;var Ge=/^key/,Oe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xe=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Be(){return!1}function Qe(e,n){return e===function(){try{return o.activeElement}catch(e){}}()==("focus"===n)}function Ke(e,n,A,t,l,i){var o,s;if("object"==typeof n){for(s in"string"!=typeof A&&(t=t||A,A=void 0),n)Ke(e,s,A,t,n[s],i);return e}if(null==t&&null==l?(l=A,t=A=void 0):null==l&&("string"==typeof A?(l=t,t=void 0):(l=t,t=A,A=void 0)),!1===l)l=Be;else if(!l)return e;return 1===i&&(o=l,(l=function(e){return M().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=M.guid++)),e.each((function(){M.event.add(this,n,l,t,A)}))}function De(e,n,A){A?(J.set(e,n,!1),M.event.add(e,n,{namespace:!1,handler:function(e){var t,l,i=J.get(this,n);if(1&e.isTrigger&&this[n]){if(i.length)(M.event.special[n]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),J.set(this,n,i),t=A(this,n),this[n](),i!==(l=J.get(this,n))||t?J.set(this,n,!1):l={},i!==l)return e.stopImmediatePropagation(),e.preventDefault(),l.value}else i.length&&(J.set(this,n,{value:M.event.trigger(M.extend(i[0],M.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,n)&&M.event.add(e,n,Se)}M.event={global:{},add:function(e,n,A,t,l){var i,o,s,a,r,C,c,u,d,m,p,h=J.get(e);if(h)for(A.handler&&(A=(i=A).handler,l=i.selector),l&&M.find.matchesSelector(oe,l),A.guid||(A.guid=M.guid++),(a=h.events)||(a=h.events={}),(o=h.handle)||(o=h.handle=function(n){return void 0!==M&&M.event.triggered!==n.type?M.event.dispatch.apply(e,arguments):void 0}),r=(n=(n||"").match(Y)||[""]).length;r--;)d=p=(s=xe.exec(n[r])||[])[1],m=(s[2]||"").split(".").sort(),d&&(c=M.event.special[d]||{},d=(l?c.delegateType:c.bindType)||d,c=M.event.special[d]||{},C=M.extend({type:d,origType:p,data:t,handler:A,guid:A.guid,selector:l,needsContext:l&&M.expr.match.needsContext.test(l),namespace:m.join(".")},i),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,t,m,o)||e.addEventListener&&e.addEventListener(d,o)),c.add&&(c.add.call(e,C),C.handler.guid||(C.handler.guid=A.guid)),l?u.splice(u.delegateCount++,0,C):u.push(C),M.event.global[d]=!0)},remove:function(e,n,A,t,l){var i,o,s,a,r,C,c,u,d,m,p,h=J.hasData(e)&&J.get(e);if(h&&(a=h.events)){for(r=(n=(n||"").match(Y)||[""]).length;r--;)if(d=p=(s=xe.exec(n[r])||[])[1],m=(s[2]||"").split(".").sort(),d){for(c=M.event.special[d]||{},u=a[d=(t?c.delegateType:c.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=u.length;i--;)C=u[i],!l&&p!==C.origType||A&&A.guid!==C.guid||s&&!s.test(C.namespace)||t&&t!==C.selector&&("**"!==t||!C.selector)||(u.splice(i,1),C.selector&&u.delegateCount--,c.remove&&c.remove.call(e,C));o&&!u.length&&(c.teardown&&!1!==c.teardown.call(e,m,h.handle)||M.removeEvent(e,d,h.handle),delete a[d])}else for(d in a)M.event.remove(e,d+n[r],A,t,!0);M.isEmptyObject(a)&&J.remove(e,"handle events")}},dispatch:function(e){var n,A,t,l,i,o,s=M.event.fix(e),a=new Array(arguments.length),r=(J.get(this,"events")||{})[s.type]||[],C=M.event.special[s.type]||{};for(a[0]=s,n=1;n<arguments.length;n++)a[n]=arguments[n];if(s.delegateTarget=this,!C.preDispatch||!1!==C.preDispatch.call(this,s)){for(o=M.event.handlers.call(this,s,r),n=0;(l=o[n++])&&!s.isPropagationStopped();)for(s.currentTarget=l.elem,A=0;(i=l.handlers[A++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(t=((M.event.special[i.origType]||{}).handle||i.handler).apply(l.elem,a))&&!1===(s.result=t)&&(s.preventDefault(),s.stopPropagation()));return C.postDispatch&&C.postDispatch.call(this,s),s.result}},handlers:function(e,n){var A,t,l,i,o,s=[],a=n.delegateCount,r=e.target;if(a&&r.nodeType&&!("click"===e.type&&e.button>=1))for(;r!==this;r=r.parentNode||this)if(1===r.nodeType&&("click"!==e.type||!0!==r.disabled)){for(i=[],o={},A=0;A<a;A++)void 0===o[l=(t=n[A]).selector+" "]&&(o[l]=t.needsContext?M(l,this).index(r)>-1:M.find(l,this,null,[r]).length),o[l]&&i.push(t);i.length&&s.push({elem:r,handlers:i})}return r=this,a<n.length&&s.push({elem:r,handlers:n.slice(a)}),s},addProp:function(e,n){Object.defineProperty(M.Event.prototype,e,{enumerable:!0,configurable:!0,get:I(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(n){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:n})}})},fix:function(e){return e[M.expando]?e:new M.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var n=this||e;return pe.test(n.type)&&n.click&&Q(n,"input")&&De(n,"click",Se),!1},trigger:function(e){var n=this||e;return pe.test(n.type)&&n.click&&Q(n,"input")&&De(n,"click"),!0},_default:function(e){var n=e.target;return pe.test(n.type)&&n.click&&Q(n,"input")&&J.get(n,"click")||Q(n,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},M.removeEvent=function(e,n,A){e.removeEventListener&&e.removeEventListener(n,A)},M.Event=function(e,n){if(!(this instanceof M.Event))return new M.Event(e,n);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Be,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,n&&M.extend(this,n),this.timeStamp=e&&e.timeStamp||Date.now(),this[M.expando]=!0},M.Event.prototype={constructor:M.Event,isDefaultPrevented:Be,isPropagationStopped:Be,isImmediatePropagationStopped:Be,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},M.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var n=e.button;return null==e.which&&Ge.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==n&&Oe.test(e.type)?1&n?1:2&n?3:4&n?2:0:e.which}},M.event.addProp),M.each({focus:"focusin",blur:"focusout"},(function(e,n){M.event.special[e]={setup:function(){return De(this,e,Qe),!1},trigger:function(){return De(this,e),!0},delegateType:n}})),M.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,n){M.event.special[e]={delegateType:n,bindType:n,handle:function(e){var A,t=this,l=e.relatedTarget,i=e.handleObj;return l&&(l===t||M.contains(t,l))||(e.type=i.origType,A=i.handler.apply(this,arguments),e.type=n),A}}})),M.fn.extend({on:function(e,n,A,t){return Ke(this,e,n,A,t)},one:function(e,n,A,t){return Ke(this,e,n,A,t,1)},off:function(e,n,A){var t,l;if(e&&e.preventDefault&&e.handleObj)return t=e.handleObj,M(e.delegateTarget).off(t.namespace?t.origType+"."+t.namespace:t.origType,t.selector,t.handler),this;if("object"==typeof e){for(l in e)this.off(l,n,e[l]);return this}return!1!==n&&"function"!=typeof n||(A=n,n=void 0),!1===A&&(A=Be),this.each((function(){M.event.remove(this,e,A,n)}))}});var we=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,_e=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ue(e,n){return Q(e,"table")&&Q(11!==n.nodeType?n:n.firstChild,"tr")&&M(e).children("tbody")[0]||e}function Ye(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Te(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ve(e,n){var A,t,l,i,o,s,a,r;if(1===n.nodeType){if(J.hasData(e)&&(i=J.access(e),o=J.set(n,i),r=i.events))for(l in delete o.handle,o.events={},r)for(A=0,t=r[l].length;A<t;A++)M.event.add(n,l,r[l][A]);Z.hasData(e)&&(s=Z.access(e),a=M.extend({},s),Z.set(n,a))}}function Re(e,n){var A=n.nodeName.toLowerCase();"input"===A&&pe.test(e.type)?n.checked=e.checked:"input"!==A&&"textarea"!==A||(n.defaultValue=e.defaultValue)}function Pe(e,n,A,t){n=r.apply([],n);var l,i,o,s,a,C,c=0,u=e.length,d=u-1,m=n[0],p=I(m);if(p||u>1&&"string"==typeof m&&!f.checkClone&&Le.test(m))return e.each((function(l){var i=e.eq(l);p&&(n[0]=m.call(this,l,i.html())),Pe(i,n,A,t)}));if(u&&(i=(l=ye(n,e[0].ownerDocument,!1,e,t)).firstChild,1===l.childNodes.length&&(l=i),i||t)){for(s=(o=M.map(ge(l,"script"),Ye)).length;c<u;c++)a=l,c!==d&&(a=M.clone(a,!0,!0),s&&M.merge(o,ge(a,"script"))),A.call(e[c],a,c);if(s)for(C=o[o.length-1].ownerDocument,M.map(o,Te),c=0;c<s;c++)a=o[c],fe.test(a.type||"")&&!J.access(a,"globalEval")&&M.contains(C,a)&&(a.src&&"module"!==(a.type||"").toLowerCase()?M._evalUrl&&!a.noModule&&M._evalUrl(a.src,{nonce:a.nonce||a.getAttribute("nonce")}):E(a.textContent.replace(_e,""),a,C))}return e}function He(e,n,A){for(var t,l=n?M.filter(n,e):e,i=0;null!=(t=l[i]);i++)A||1!==t.nodeType||M.cleanData(ge(t)),t.parentNode&&(A&&se(t)&&ve(ge(t,"script")),t.parentNode.removeChild(t));return e}M.extend({htmlPrefilter:function(e){return e.replace(we,"<$1></$2>")},clone:function(e,n,A){var t,l,i,o,s=e.cloneNode(!0),a=se(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||M.isXMLDoc(e)))for(o=ge(s),t=0,l=(i=ge(e)).length;t<l;t++)Re(i[t],o[t]);if(n)if(A)for(i=i||ge(e),o=o||ge(s),t=0,l=i.length;t<l;t++)Ve(i[t],o[t]);else Ve(e,s);return(o=ge(s,"script")).length>0&&ve(o,!a&&ge(e,"script")),s},cleanData:function(e){for(var n,A,t,l=M.event.special,i=0;void 0!==(A=e[i]);i++)if($(A)){if(n=A[J.expando]){if(n.events)for(t in n.events)l[t]?M.event.remove(A,t):M.removeEvent(A,t,n.handle);A[J.expando]=void 0}A[Z.expando]&&(A[Z.expando]=void 0)}}}),M.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return W(this,(function(e){return void 0===e?M.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Pe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ue(this,e).appendChild(e)}))},prepend:function(){return Pe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=Ue(this,e);n.insertBefore(e,n.firstChild)}}))},before:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,n=0;null!=(e=this[n]);n++)1===e.nodeType&&(M.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,n){return e=null!=e&&e,n=null==n?e:n,this.map((function(){return M.clone(this,e,n)}))},html:function(e){return W(this,(function(e){var n=this[0]||{},A=0,t=this.length;if(void 0===e&&1===n.nodeType)return n.innerHTML;if("string"==typeof e&&!ke.test(e)&&!Ie[(he.exec(e)||["",""])[1].toLowerCase()]){e=M.htmlPrefilter(e);try{for(;A<t;A++)1===(n=this[A]||{}).nodeType&&(M.cleanData(ge(n,!1)),n.innerHTML=e);n=0}catch(e){}}n&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Pe(this,arguments,(function(n){var A=this.parentNode;M.inArray(this,e)<0&&(M.cleanData(ge(this)),A&&A.replaceChild(n,this))}),e)}}),M.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,n){M.fn[e]=function(e){for(var A,t=[],l=M(e),i=l.length-1,o=0;o<=i;o++)A=o===i?this:this.clone(!0),M(l[o])[n](A),C.apply(t,A.get());return this.pushStack(t)}}));var je=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),We=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=A),n.getComputedStyle(e)},Ne=new RegExp(ie.join("|"),"i");function Fe(e,n,A){var t,l,i,o,s=e.style;return(A=A||We(e))&&(""!==(o=A.getPropertyValue(n)||A[n])||se(e)||(o=M.style(e,n)),!f.pixelBoxStyles()&&je.test(o)&&Ne.test(n)&&(t=s.width,l=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=A.width,s.width=t,s.minWidth=l,s.maxWidth=i)),void 0!==o?o+"":o}function qe(e,n){return{get:function(){if(!e())return(this.get=n).apply(this,arguments);delete this.get}}}!function(){function e(){if(C){r.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",C.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(r).appendChild(C);var e=A.getComputedStyle(C);t="1%"!==e.top,a=12===n(e.marginLeft),C.style.right="60%",s=36===n(e.right),l=36===n(e.width),C.style.position="absolute",i=12===n(C.offsetWidth/3),oe.removeChild(r),C=null}}function n(e){return Math.round(parseFloat(e))}var t,l,i,s,a,r=o.createElement("div"),C=o.createElement("div");C.style&&(C.style.backgroundClip="content-box",C.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===C.style.backgroundClip,M.extend(f,{boxSizingReliable:function(){return e(),l},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),t},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var ze=["Webkit","Moz","ms"],$e=o.createElement("div").style,Xe={};function Je(e){var n=M.cssProps[e]||Xe[e];return n||(e in $e?e:Xe[e]=function(e){for(var n=e[0].toUpperCase()+e.slice(1),A=ze.length;A--;)if((e=ze[A]+n)in $e)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,en=/^--/,nn={position:"absolute",visibility:"hidden",display:"block"},An={letterSpacing:"0",fontWeight:"400"};function tn(e,n,A){var t=le.exec(n);return t?Math.max(0,t[2]-(A||0))+(t[3]||"px"):n}function ln(e,n,A,t,l,i){var o="width"===n?1:0,s=0,a=0;if(A===(t?"border":"content"))return 0;for(;o<4;o+=2)"margin"===A&&(a+=M.css(e,A+ie[o],!0,l)),t?("content"===A&&(a-=M.css(e,"padding"+ie[o],!0,l)),"margin"!==A&&(a-=M.css(e,"border"+ie[o]+"Width",!0,l))):(a+=M.css(e,"padding"+ie[o],!0,l),"padding"!==A?a+=M.css(e,"border"+ie[o]+"Width",!0,l):s+=M.css(e,"border"+ie[o]+"Width",!0,l));return!t&&i>=0&&(a+=Math.max(0,Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-i-a-s-.5))||0),a}function on(e,n,A){var t=We(e),l=(!f.boxSizingReliable()||A)&&"border-box"===M.css(e,"boxSizing",!1,t),i=l,o=Fe(e,n,t),s="offset"+n[0].toUpperCase()+n.slice(1);if(je.test(o)){if(!A)return o;o="auto"}return(!f.boxSizingReliable()&&l||"auto"===o||!parseFloat(o)&&"inline"===M.css(e,"display",!1,t))&&e.getClientRects().length&&(l="border-box"===M.css(e,"boxSizing",!1,t),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+ln(e,n,A||(l?"border":"content"),i,t,o)+"px"}function sn(e,n,A,t,l){return new sn.prototype.init(e,n,A,t,l)}M.extend({cssHooks:{opacity:{get:function(e,n){if(n){var A=Fe(e,"opacity");return""===A?"1":A}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,n,A,t){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var l,i,o,s=z(n),a=en.test(n),r=e.style;if(a||(n=Je(s)),o=M.cssHooks[n]||M.cssHooks[s],void 0===A)return o&&"get"in o&&void 0!==(l=o.get(e,!1,t))?l:r[n];"string"===(i=typeof A)&&(l=le.exec(A))&&l[1]&&(A=ce(e,n,l),i="number"),null!=A&&A==A&&("number"!==i||a||(A+=l&&l[3]||(M.cssNumber[s]?"":"px")),f.clearCloneStyle||""!==A||0!==n.indexOf("background")||(r[n]="inherit"),o&&"set"in o&&void 0===(A=o.set(e,A,t))||(a?r.setProperty(n,A):r[n]=A))}},css:function(e,n,A,t){var l,i,o,s=z(n);return en.test(n)||(n=Je(s)),(o=M.cssHooks[n]||M.cssHooks[s])&&"get"in o&&(l=o.get(e,!0,A)),void 0===l&&(l=Fe(e,n,t)),"normal"===l&&n in An&&(l=An[n]),""===A||A?(i=parseFloat(l),!0===A||isFinite(i)?i||0:l):l}}),M.each(["height","width"],(function(e,n){M.cssHooks[n]={get:function(e,A,t){if(A)return!Ze.test(M.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?on(e,n,t):Ce(e,nn,(function(){return on(e,n,t)}))},set:function(e,A,t){var l,i=We(e),o=!f.scrollboxSize()&&"absolute"===i.position,s=(o||t)&&"border-box"===M.css(e,"boxSizing",!1,i),a=t?ln(e,n,t,s,i):0;return s&&o&&(a-=Math.ceil(e["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(i[n])-ln(e,n,"border",!1,i)-.5)),a&&(l=le.exec(A))&&"px"!==(l[3]||"px")&&(e.style[n]=A,A=M.css(e,n)),tn(0,A,a)}}})),M.cssHooks.marginLeft=qe(f.reliableMarginLeft,(function(e,n){if(n)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-Ce(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),M.each({margin:"",padding:"",border:"Width"},(function(e,n){M.cssHooks[e+n]={expand:function(A){for(var t=0,l={},i="string"==typeof A?A.split(" "):[A];t<4;t++)l[e+ie[t]+n]=i[t]||i[t-2]||i[0];return l}},"margin"!==e&&(M.cssHooks[e+n].set=tn)})),M.fn.extend({css:function(e,n){return W(this,(function(e,n,A){var t,l,i={},o=0;if(Array.isArray(n)){for(t=We(e),l=n.length;o<l;o++)i[n[o]]=M.css(e,n[o],!1,t);return i}return void 0!==A?M.style(e,n,A):M.css(e,n)}),e,n,arguments.length>1)}}),M.Tween=sn,sn.prototype={constructor:sn,init:function(e,n,A,t,l,i){this.elem=e,this.prop=A,this.easing=l||M.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=t,this.unit=i||(M.cssNumber[A]?"":"px")},cur:function(){var e=sn.propHooks[this.prop];return e&&e.get?e.get(this):sn.propHooks._default.get(this)},run:function(e){var n,A=sn.propHooks[this.prop];return this.options.duration?this.pos=n=M.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=n=e,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),A&&A.set?A.set(this):sn.propHooks._default.set(this),this}},sn.prototype.init.prototype=sn.prototype,sn.propHooks={_default:{get:function(e){var n;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(n=M.css(e.elem,e.prop,""))&&"auto"!==n?n:0},set:function(e){M.fx.step[e.prop]?M.fx.step[e.prop](e):1!==e.elem.nodeType||!M.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:M.style(e.elem,e.prop,e.now+e.unit)}}},sn.propHooks.scrollTop=sn.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},M.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},M.fx=sn.prototype.init,M.fx.step={};var an,rn,Cn=/^(?:toggle|show|hide)$/,cn=/queueHooks$/;function un(){rn&&(!1===o.hidden&&A.requestAnimationFrame?A.requestAnimationFrame(un):A.setTimeout(un,M.fx.interval),M.fx.tick())}function dn(){return A.setTimeout((function(){an=void 0})),an=Date.now()}function mn(e,n){var A,t=0,l={height:e};for(n=n?1:0;t<4;t+=2-n)l["margin"+(A=ie[t])]=l["padding"+A]=e;return n&&(l.opacity=l.width=e),l}function pn(e,n,A){for(var t,l=(hn.tweeners[n]||[]).concat(hn.tweeners["*"]),i=0,o=l.length;i<o;i++)if(t=l[i].call(A,n,e))return t}function hn(e,n,A){var t,l,i=0,o=hn.prefilters.length,s=M.Deferred().always((function(){delete a.elem})),a=function(){if(l)return!1;for(var n=an||dn(),A=Math.max(0,r.startTime+r.duration-n),t=1-(A/r.duration||0),i=0,o=r.tweens.length;i<o;i++)r.tweens[i].run(t);return s.notifyWith(e,[r,t,A]),t<1&&o?A:(o||s.notifyWith(e,[r,1,0]),s.resolveWith(e,[r]),!1)},r=s.promise({elem:e,props:M.extend({},n),opts:M.extend(!0,{specialEasing:{},easing:M.easing._default},A),originalProperties:n,originalOptions:A,startTime:an||dn(),duration:A.duration,tweens:[],createTween:function(n,A){var t=M.Tween(e,r.opts,n,A,r.opts.specialEasing[n]||r.opts.easing);return r.tweens.push(t),t},stop:function(n){var A=0,t=n?r.tweens.length:0;if(l)return this;for(l=!0;A<t;A++)r.tweens[A].run(1);return n?(s.notifyWith(e,[r,1,0]),s.resolveWith(e,[r,n])):s.rejectWith(e,[r,n]),this}}),C=r.props;for(!function(e,n){var A,t,l,i,o;for(A in e)if(l=n[t=z(A)],i=e[A],Array.isArray(i)&&(l=i[1],i=e[A]=i[0]),A!==t&&(e[t]=i,delete e[A]),(o=M.cssHooks[t])&&"expand"in o)for(A in i=o.expand(i),delete e[t],i)A in e||(e[A]=i[A],n[A]=l);else n[t]=l}(C,r.opts.specialEasing);i<o;i++)if(t=hn.prefilters[i].call(r,e,C,r.opts))return I(t.stop)&&(M._queueHooks(r.elem,r.opts.queue).stop=t.stop.bind(t)),t;return M.map(C,pn,r),I(r.opts.start)&&r.opts.start.call(e,r),r.progress(r.opts.progress).done(r.opts.done,r.opts.complete).fail(r.opts.fail).always(r.opts.always),M.fx.timer(M.extend(a,{elem:e,anim:r,queue:r.opts.queue})),r}M.Animation=M.extend(hn,{tweeners:{"*":[function(e,n){var A=this.createTween(e,n);return ce(A.elem,e,le.exec(n),A),A}]},tweener:function(e,n){I(e)?(n=e,e=["*"]):e=e.match(Y);for(var A,t=0,l=e.length;t<l;t++)A=e[t],hn.tweeners[A]=hn.tweeners[A]||[],hn.tweeners[A].unshift(n)},prefilters:[function(e,n,A){var t,l,i,o,s,a,r,C,c="width"in n||"height"in n,u=this,d={},m=e.style,p=e.nodeType&&re(e),h=J.get(e,"fxshow");for(t in A.queue||(null==(o=M._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,u.always((function(){u.always((function(){o.unqueued--,M.queue(e,"fx").length||o.empty.fire()}))}))),n)if(l=n[t],Cn.test(l)){if(delete n[t],i=i||"toggle"===l,l===(p?"hide":"show")){if("show"!==l||!h||void 0===h[t])continue;p=!0}d[t]=h&&h[t]||M.style(e,t)}if((a=!M.isEmptyObject(n))||!M.isEmptyObject(d))for(t in c&&1===e.nodeType&&(A.overflow=[m.overflow,m.overflowX,m.overflowY],null==(r=h&&h.display)&&(r=J.get(e,"display")),"none"===(C=M.css(e,"display"))&&(r?C=r:(me([e],!0),r=e.style.display||r,C=M.css(e,"display"),me([e]))),("inline"===C||"inline-block"===C&&null!=r)&&"none"===M.css(e,"float")&&(a||(u.done((function(){m.display=r})),null==r&&(C=m.display,r="none"===C?"":C)),m.display="inline-block")),A.overflow&&(m.overflow="hidden",u.always((function(){m.overflow=A.overflow[0],m.overflowX=A.overflow[1],m.overflowY=A.overflow[2]}))),a=!1,d)a||(h?"hidden"in h&&(p=h.hidden):h=J.access(e,"fxshow",{display:r}),i&&(h.hidden=!p),p&&me([e],!0),u.done((function(){for(t in p||me([e]),J.remove(e,"fxshow"),d)M.style(e,t,d[t])}))),a=pn(p?h[t]:0,t,u),t in h||(h[t]=a.start,p&&(a.end=a.start,a.start=0))}],prefilter:function(e,n){n?hn.prefilters.unshift(e):hn.prefilters.push(e)}}),M.speed=function(e,n,A){var t=e&&"object"==typeof e?M.extend({},e):{complete:A||!A&&n||I(e)&&e,duration:e,easing:A&&n||n&&!I(n)&&n};return M.fx.off?t.duration=0:"number"!=typeof t.duration&&(t.duration in M.fx.speeds?t.duration=M.fx.speeds[t.duration]:t.duration=M.fx.speeds._default),null!=t.queue&&!0!==t.queue||(t.queue="fx"),t.old=t.complete,t.complete=function(){I(t.old)&&t.old.call(this),t.queue&&M.dequeue(this,t.queue)},t},M.fn.extend({fadeTo:function(e,n,A,t){return this.filter(re).css("opacity",0).show().end().animate({opacity:n},e,A,t)},animate:function(e,n,A,t){var l=M.isEmptyObject(e),i=M.speed(n,A,t),o=function(){var n=hn(this,M.extend({},e),i);(l||J.get(this,"finish"))&&n.stop(!0)};return o.finish=o,l||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,n,A){var t=function(e){var n=e.stop;delete e.stop,n(A)};return"string"!=typeof e&&(A=n,n=e,e=void 0),n&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var n=!0,l=null!=e&&e+"queueHooks",i=M.timers,o=J.get(this);if(l)o[l]&&o[l].stop&&t(o[l]);else for(l in o)o[l]&&o[l].stop&&cn.test(l)&&t(o[l]);for(l=i.length;l--;)i[l].elem!==this||null!=e&&i[l].queue!==e||(i[l].anim.stop(A),n=!1,i.splice(l,1));!n&&A||M.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var n,A=J.get(this),t=A[e+"queue"],l=A[e+"queueHooks"],i=M.timers,o=t?t.length:0;for(A.finish=!0,M.queue(this,e,[]),l&&l.stop&&l.stop.call(this,!0),n=i.length;n--;)i[n].elem===this&&i[n].queue===e&&(i[n].anim.stop(!0),i.splice(n,1));for(n=0;n<o;n++)t[n]&&t[n].finish&&t[n].finish.call(this);delete A.finish}))}}),M.each(["toggle","show","hide"],(function(e,n){var A=M.fn[n];M.fn[n]=function(e,t,l){return null==e||"boolean"==typeof e?A.apply(this,arguments):this.animate(mn(n,!0),e,t,l)}})),M.each({slideDown:mn("show"),slideUp:mn("hide"),slideToggle:mn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,n){M.fn[e]=function(e,A,t){return this.animate(n,e,A,t)}})),M.timers=[],M.fx.tick=function(){var e,n=0,A=M.timers;for(an=Date.now();n<A.length;n++)(e=A[n])()||A[n]!==e||A.splice(n--,1);A.length||M.fx.stop(),an=void 0},M.fx.timer=function(e){M.timers.push(e),M.fx.start()},M.fx.interval=13,M.fx.start=function(){rn||(rn=!0,un())},M.fx.stop=function(){rn=null},M.fx.speeds={slow:600,fast:200,_default:400},M.fn.delay=function(e,n){return e=M.fx&&M.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,t){var l=A.setTimeout(n,e);t.stop=function(){A.clearTimeout(l)}}))},function(){var e=o.createElement("input"),n=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=n.selected,(e=o.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var fn,In=M.expr.attrHandle;M.fn.extend({attr:function(e,n){return W(this,M.attr,e,n,arguments.length>1)},removeAttr:function(e){return this.each((function(){M.removeAttr(this,e)}))}}),M.extend({attr:function(e,n,A){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?M.prop(e,n,A):(1===i&&M.isXMLDoc(e)||(l=M.attrHooks[n.toLowerCase()]||(M.expr.match.bool.test(n)?fn:void 0)),void 0!==A?null===A?void M.removeAttr(e,n):l&&"set"in l&&void 0!==(t=l.set(e,A,n))?t:(e.setAttribute(n,A+""),A):l&&"get"in l&&null!==(t=l.get(e,n))?t:null==(t=M.find.attr(e,n))?void 0:t)},attrHooks:{type:{set:function(e,n){if(!f.radioValue&&"radio"===n&&Q(e,"input")){var A=e.value;return e.setAttribute("type",n),A&&(e.value=A),n}}}},removeAttr:function(e,n){var A,t=0,l=n&&n.match(Y);if(l&&1===e.nodeType)for(;A=l[t++];)e.removeAttribute(A)}}),fn={set:function(e,n,A){return!1===n?M.removeAttr(e,A):e.setAttribute(A,A),A}},M.each(M.expr.match.bool.source.match(/\w+/g),(function(e,n){var A=In[n]||M.find.attr;In[n]=function(e,n,t){var l,i,o=n.toLowerCase();return t||(i=In[o],In[o]=l,l=null!=A(e,n,t)?o:null,In[o]=i),l}}));var gn=/^(?:input|select|textarea|button)$/i,vn=/^(?:a|area)$/i;function En(e){return(e.match(Y)||[]).join(" ")}function bn(e){return e.getAttribute&&e.getAttribute("class")||""}function Mn(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Y)||[]}M.fn.extend({prop:function(e,n){return W(this,M.prop,e,n,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[M.propFix[e]||e]}))}}),M.extend({prop:function(e,n,A){var t,l,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&M.isXMLDoc(e)||(n=M.propFix[n]||n,l=M.propHooks[n]),void 0!==A?l&&"set"in l&&void 0!==(t=l.set(e,A,n))?t:e[n]=A:l&&"get"in l&&null!==(t=l.get(e,n))?t:e[n]},propHooks:{tabIndex:{get:function(e){var n=M.find.attr(e,"tabindex");return n?parseInt(n,10):gn.test(e.nodeName)||vn.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(M.propHooks.selected={get:function(e){var n=e.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null},set:function(e){var n=e.parentNode;n&&(n.selectedIndex,n.parentNode&&n.parentNode.selectedIndex)}}),M.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){M.propFix[this.toLowerCase()]=this})),M.fn.extend({addClass:function(e){var n,A,t,l,i,o,s,a=0;if(I(e))return this.each((function(n){M(this).addClass(e.call(this,n,bn(this)))}));if((n=Mn(e)).length)for(;A=this[a++];)if(l=bn(A),t=1===A.nodeType&&" "+En(l)+" "){for(o=0;i=n[o++];)t.indexOf(" "+i+" ")<0&&(t+=i+" ");l!==(s=En(t))&&A.setAttribute("class",s)}return this},removeClass:function(e){var n,A,t,l,i,o,s,a=0;if(I(e))return this.each((function(n){M(this).removeClass(e.call(this,n,bn(this)))}));if(!arguments.length)return this.attr("class","");if((n=Mn(e)).length)for(;A=this[a++];)if(l=bn(A),t=1===A.nodeType&&" "+En(l)+" "){for(o=0;i=n[o++];)for(;t.indexOf(" "+i+" ")>-1;)t=t.replace(" "+i+" "," ");l!==(s=En(t))&&A.setAttribute("class",s)}return this},toggleClass:function(e,n){var A=typeof e,t="string"===A||Array.isArray(e);return"boolean"==typeof n&&t?n?this.addClass(e):this.removeClass(e):I(e)?this.each((function(A){M(this).toggleClass(e.call(this,A,bn(this),n),n)})):this.each((function(){var n,l,i,o;if(t)for(l=0,i=M(this),o=Mn(e);n=o[l++];)i.hasClass(n)?i.removeClass(n):i.addClass(n);else void 0!==e&&"boolean"!==A||((n=bn(this))&&J.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var n,A,t=0;for(n=" "+e+" ";A=this[t++];)if(1===A.nodeType&&(" "+En(bn(A))+" ").indexOf(n)>-1)return!0;return!1}});var yn=/\r/g;M.fn.extend({val:function(e){var n,A,t,l=this[0];return arguments.length?(t=I(e),this.each((function(A){var l;1===this.nodeType&&(null==(l=t?e.call(this,A,M(this).val()):e)?l="":"number"==typeof l?l+="":Array.isArray(l)&&(l=M.map(l,(function(e){return null==e?"":e+""}))),(n=M.valHooks[this.type]||M.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,l,"value")||(this.value=l))}))):l?(n=M.valHooks[l.type]||M.valHooks[l.nodeName.toLowerCase()])&&"get"in n&&void 0!==(A=n.get(l,"value"))?A:"string"==typeof(A=l.value)?A.replace(yn,""):null==A?"":A:void 0}}),M.extend({valHooks:{option:{get:function(e){var n=M.find.attr(e,"value");return null!=n?n:En(M.text(e))}},select:{get:function(e){var n,A,t,l=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],a=o?i+1:l.length;for(t=i<0?a:o?i:0;t<a;t++)if(((A=l[t]).selected||t===i)&&!A.disabled&&(!A.parentNode.disabled||!Q(A.parentNode,"optgroup"))){if(n=M(A).val(),o)return n;s.push(n)}return s},set:function(e,n){for(var A,t,l=e.options,i=M.makeArray(n),o=l.length;o--;)((t=l[o]).selected=M.inArray(M.valHooks.option.get(t),i)>-1)&&(A=!0);return A||(e.selectedIndex=-1),i}}}}),M.each(["radio","checkbox"],(function(){M.valHooks[this]={set:function(e,n){if(Array.isArray(n))return e.checked=M.inArray(M(e).val(),n)>-1}},f.checkOn||(M.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in A;var Gn=/^(?:focusinfocus|focusoutblur)$/,On=function(e){e.stopPropagation()};M.extend(M.event,{trigger:function(e,n,t,l){var i,s,a,r,C,c,u,d,p=[t||o],h=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(s=d=a=t=t||o,3!==t.nodeType&&8!==t.nodeType&&!Gn.test(h+M.event.triggered)&&(h.indexOf(".")>-1&&(f=h.split("."),h=f.shift(),f.sort()),C=h.indexOf(":")<0&&"on"+h,(e=e[M.expando]?e:new M.Event(h,"object"==typeof e&&e)).isTrigger=l?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=t),n=null==n?[e]:M.makeArray(n,[e]),u=M.event.special[h]||{},l||!u.trigger||!1!==u.trigger.apply(t,n))){if(!l&&!u.noBubble&&!g(t)){for(r=u.delegateType||h,Gn.test(r+h)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(t.ownerDocument||o)&&p.push(a.defaultView||a.parentWindow||A)}for(i=0;(s=p[i++])&&!e.isPropagationStopped();)d=s,e.type=i>1?r:u.bindType||h,(c=(J.get(s,"events")||{})[e.type]&&J.get(s,"handle"))&&c.apply(s,n),(c=C&&s[C])&&c.apply&&$(s)&&(e.result=c.apply(s,n),!1===e.result&&e.preventDefault());return e.type=h,l||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(p.pop(),n)||!$(t)||C&&I(t[h])&&!g(t)&&((a=t[C])&&(t[C]=null),M.event.triggered=h,e.isPropagationStopped()&&d.addEventListener(h,On),t[h](),e.isPropagationStopped()&&d.removeEventListener(h,On),M.event.triggered=void 0,a&&(t[C]=a)),e.result}},simulate:function(e,n,A){var t=M.extend(new M.Event,A,{type:e,isSimulated:!0});M.event.trigger(t,null,n)}}),M.fn.extend({trigger:function(e,n){return this.each((function(){M.event.trigger(e,n,this)}))},triggerHandler:function(e,n){var A=this[0];if(A)return M.event.trigger(e,n,A,!0)}}),f.focusin||M.each({focus:"focusin",blur:"focusout"},(function(e,n){var A=function(e){M.event.simulate(n,e.target,M.event.fix(e))};M.event.special[n]={setup:function(){var t=this.ownerDocument||this,l=J.access(t,n);l||t.addEventListener(e,A,!0),J.access(t,n,(l||0)+1)},teardown:function(){var t=this.ownerDocument||this,l=J.access(t,n)-1;l?J.access(t,n,l):(t.removeEventListener(e,A,!0),J.remove(t,n))}}}));var xn=A.location,Sn=Date.now(),Bn=/\?/;M.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new A.DOMParser).parseFromString(e,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||M.error("Invalid XML: "+e),n};var Qn=/\[\]$/,Kn=/\r?\n/g,Dn=/^(?:submit|button|image|reset|file)$/i,wn=/^(?:input|select|textarea|keygen)/i;function kn(e,n,A,t){var l;if(Array.isArray(n))M.each(n,(function(n,l){A||Qn.test(e)?t(e,l):kn(e+"["+("object"==typeof l&&null!=l?n:"")+"]",l,A,t)}));else if(A||"object"!==b(n))t(e,n);else for(l in n)kn(e+"["+l+"]",n[l],A,t)}M.param=function(e,n){var A,t=[],l=function(e,n){var A=I(n)?n():n;t[t.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==A?"":A)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!M.isPlainObject(e))M.each(e,(function(){l(this.name,this.value)}));else for(A in e)kn(A,e[A],n,l);return t.join("&")},M.fn.extend({serialize:function(){return M.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=M.prop(this,"elements");return e?M.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!M(this).is(":disabled")&&wn.test(this.nodeName)&&!Dn.test(e)&&(this.checked||!pe.test(e))})).map((function(e,n){var A=M(this).val();return null==A?null:Array.isArray(A)?M.map(A,(function(e){return{name:n.name,value:e.replace(Kn,"\r\n")}})):{name:n.name,value:A.replace(Kn,"\r\n")}})).get()}});var Ln=/%20/g,_n=/#.*$/,Un=/([?&])_=[^&]*/,Yn=/^(.*?):[ \t]*([^\r\n]*)$/gm,Tn=/^(?:GET|HEAD)$/,Vn=/^\/\//,Rn={},Pn={},Hn="*/".concat("*"),jn=o.createElement("a");function Wn(e){return function(n,A){"string"!=typeof n&&(A=n,n="*");var t,l=0,i=n.toLowerCase().match(Y)||[];if(I(A))for(;t=i[l++];)"+"===t[0]?(t=t.slice(1)||"*",(e[t]=e[t]||[]).unshift(A)):(e[t]=e[t]||[]).push(A)}}function Nn(e,n,A,t){var l={},i=e===Pn;function o(s){var a;return l[s]=!0,M.each(e[s]||[],(function(e,s){var r=s(n,A,t);return"string"!=typeof r||i||l[r]?i?!(a=r):void 0:(n.dataTypes.unshift(r),o(r),!1)})),a}return o(n.dataTypes[0])||!l["*"]&&o("*")}function Fn(e,n){var A,t,l=M.ajaxSettings.flatOptions||{};for(A in n)void 0!==n[A]&&((l[A]?e:t||(t={}))[A]=n[A]);return t&&M.extend(!0,e,t),e}jn.href=xn.href,M.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xn.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xn.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Hn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":M.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,n){return n?Fn(Fn(e,M.ajaxSettings),n):Fn(M.ajaxSettings,e)},ajaxPrefilter:Wn(Rn),ajaxTransport:Wn(Pn),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var t,l,i,s,a,r,C,c,u,d,m=M.ajaxSetup({},n),p=m.context||m,h=m.context&&(p.nodeType||p.jquery)?M(p):M.event,f=M.Deferred(),I=M.Callbacks("once memory"),g=m.statusCode||{},v={},E={},b="canceled",y={readyState:0,getResponseHeader:function(e){var n;if(C){if(!s)for(s={};n=Yn.exec(i);)s[n[1].toLowerCase()+" "]=(s[n[1].toLowerCase()+" "]||[]).concat(n[2]);n=s[e.toLowerCase()+" "]}return null==n?null:n.join(", ")},getAllResponseHeaders:function(){return C?i:null},setRequestHeader:function(e,n){return null==C&&(e=E[e.toLowerCase()]=E[e.toLowerCase()]||e,v[e]=n),this},overrideMimeType:function(e){return null==C&&(m.mimeType=e),this},statusCode:function(e){var n;if(e)if(C)y.always(e[y.status]);else for(n in e)g[n]=[g[n],e[n]];return this},abort:function(e){var n=e||b;return t&&t.abort(n),G(0,n),this}};if(f.promise(y),m.url=((e||m.url||xn.href)+"").replace(Vn,xn.protocol+"//"),m.type=n.method||n.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(Y)||[""],null==m.crossDomain){r=o.createElement("a");try{r.href=m.url,r.href=r.href,m.crossDomain=jn.protocol+"//"+jn.host!=r.protocol+"//"+r.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=M.param(m.data,m.traditional)),Nn(Rn,m,n,y),C)return y;for(u in(c=M.event&&m.global)&&0==M.active++&&M.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Tn.test(m.type),l=m.url.replace(_n,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Ln,"+")):(d=m.url.slice(l.length),m.data&&(m.processData||"string"==typeof m.data)&&(l+=(Bn.test(l)?"&":"?")+m.data,delete m.data),!1===m.cache&&(l=l.replace(Un,"$1"),d=(Bn.test(l)?"&":"?")+"_="+Sn+++d),m.url=l+d),m.ifModified&&(M.lastModified[l]&&y.setRequestHeader("If-Modified-Since",M.lastModified[l]),M.etag[l]&&y.setRequestHeader("If-None-Match",M.etag[l])),(m.data&&m.hasContent&&!1!==m.contentType||n.contentType)&&y.setRequestHeader("Content-Type",m.contentType),y.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Hn+"; q=0.01":""):m.accepts["*"]),m.headers)y.setRequestHeader(u,m.headers[u]);if(m.beforeSend&&(!1===m.beforeSend.call(p,y,m)||C))return y.abort();if(b="abort",I.add(m.complete),y.done(m.success),y.fail(m.error),t=Nn(Pn,m,n,y)){if(y.readyState=1,c&&h.trigger("ajaxSend",[y,m]),C)return y;m.async&&m.timeout>0&&(a=A.setTimeout((function(){y.abort("timeout")}),m.timeout));try{C=!1,t.send(v,G)}catch(e){if(C)throw e;G(-1,e)}}else G(-1,"No Transport");function G(e,n,o,s){var r,u,d,v,E,b=n;C||(C=!0,a&&A.clearTimeout(a),t=void 0,i=s||"",y.readyState=e>0?4:0,r=e>=200&&e<300||304===e,o&&(v=function(e,n,A){for(var t,l,i,o,s=e.contents,a=e.dataTypes;"*"===a[0];)a.shift(),void 0===t&&(t=e.mimeType||n.getResponseHeader("Content-Type"));if(t)for(l in s)if(s[l]&&s[l].test(t)){a.unshift(l);break}if(a[0]in A)i=a[0];else{for(l in A){if(!a[0]||e.converters[l+" "+a[0]]){i=l;break}o||(o=l)}i=i||o}if(i)return i!==a[0]&&a.unshift(i),A[i]}(m,y,o)),v=function(e,n,A,t){var l,i,o,s,a,r={},C=e.dataTypes.slice();if(C[1])for(o in e.converters)r[o.toLowerCase()]=e.converters[o];for(i=C.shift();i;)if(e.responseFields[i]&&(A[e.responseFields[i]]=n),!a&&t&&e.dataFilter&&(n=e.dataFilter(n,e.dataType)),a=i,i=C.shift())if("*"===i)i=a;else if("*"!==a&&a!==i){if(!(o=r[a+" "+i]||r["* "+i]))for(l in r)if((s=l.split(" "))[1]===i&&(o=r[a+" "+s[0]]||r["* "+s[0]])){!0===o?o=r[l]:!0!==r[l]&&(i=s[0],C.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)n=o(n);else try{n=o(n)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+a+" to "+i}}}return{state:"success",data:n}}(m,v,y,r),r?(m.ifModified&&((E=y.getResponseHeader("Last-Modified"))&&(M.lastModified[l]=E),(E=y.getResponseHeader("etag"))&&(M.etag[l]=E)),204===e||"HEAD"===m.type?b="nocontent":304===e?b="notmodified":(b=v.state,u=v.data,r=!(d=v.error))):(d=b,!e&&b||(b="error",e<0&&(e=0))),y.status=e,y.statusText=(n||b)+"",r?f.resolveWith(p,[u,b,y]):f.rejectWith(p,[y,b,d]),y.statusCode(g),g=void 0,c&&h.trigger(r?"ajaxSuccess":"ajaxError",[y,m,r?u:d]),I.fireWith(p,[y,b]),c&&(h.trigger("ajaxComplete",[y,m]),--M.active||M.event.trigger("ajaxStop")))}return y},getJSON:function(e,n,A){return M.get(e,n,A,"json")},getScript:function(e,n){return M.get(e,void 0,n,"script")}}),M.each(["get","post"],(function(e,n){M[n]=function(e,A,t,l){return I(A)&&(l=l||t,t=A,A=void 0),M.ajax(M.extend({url:e,type:n,dataType:l,data:A,success:t},M.isPlainObject(e)&&e))}})),M._evalUrl=function(e,n){return M.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){M.globalEval(e,n)}})},M.fn.extend({wrapAll:function(e){var n;return this[0]&&(I(e)&&(e=e.call(this[0])),n=M(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return I(e)?this.each((function(n){M(this).wrapInner(e.call(this,n))})):this.each((function(){var n=M(this),A=n.contents();A.length?A.wrapAll(e):n.append(e)}))},wrap:function(e){var n=I(e);return this.each((function(A){M(this).wrapAll(n?e.call(this,A):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){M(this).replaceWith(this.childNodes)})),this}}),M.expr.pseudos.hidden=function(e){return!M.expr.pseudos.visible(e)},M.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},M.ajaxSettings.xhr=function(){try{return new A.XMLHttpRequest}catch(e){}};var qn={0:200,1223:204},zn=M.ajaxSettings.xhr();f.cors=!!zn&&"withCredentials"in zn,f.ajax=zn=!!zn,M.ajaxTransport((function(e){var n,t;if(f.cors||zn&&!e.crossDomain)return{send:function(l,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||l["X-Requested-With"]||(l["X-Requested-With"]="XMLHttpRequest"),l)s.setRequestHeader(o,l[o]);n=function(e){return function(){n&&(n=t=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(qn[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),t=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=t:s.onreadystatechange=function(){4===s.readyState&&A.setTimeout((function(){n&&t()}))},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}})),M.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),M.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return M.globalEval(e),e}}}),M.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),M.ajaxTransport("script",(function(e){var n,A;if(e.crossDomain||e.scriptAttrs)return{send:function(t,l){n=M("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",A=function(e){n.remove(),A=null,e&&l("error"===e.type?404:200,e.type)}),o.head.appendChild(n[0])},abort:function(){A&&A()}}}));var $n,Xn=[],Jn=/(=)\?(?=&|$)|\?\?/;M.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xn.pop()||M.expando+"_"+Sn++;return this[e]=!0,e}}),M.ajaxPrefilter("json jsonp",(function(e,n,t){var l,i,o,s=!1!==e.jsonp&&(Jn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return l=e.jsonpCallback=I(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Jn,"$1"+l):!1!==e.jsonp&&(e.url+=(Bn.test(e.url)?"&":"?")+e.jsonp+"="+l),e.converters["script json"]=function(){return o||M.error(l+" was not called"),o[0]},e.dataTypes[0]="json",i=A[l],A[l]=function(){o=arguments},t.always((function(){void 0===i?M(A).removeProp(l):A[l]=i,e[l]&&(e.jsonpCallback=n.jsonpCallback,Xn.push(l)),o&&I(i)&&i(o[0]),o=i=void 0})),"script"})),f.createHTMLDocument=(($n=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$n.childNodes.length),M.parseHTML=function(e,n,A){return"string"!=typeof e?[]:("boolean"==typeof n&&(A=n,n=!1),n||(f.createHTMLDocument?((t=(n=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,n.head.appendChild(t)):n=o),i=!A&&[],(l=K.exec(e))?[n.createElement(l[1])]:(l=ye([e],n,i),i&&i.length&&M(i).remove(),M.merge([],l.childNodes)));var t,l,i},M.fn.load=function(e,n,A){var t,l,i,o=this,s=e.indexOf(" ");return s>-1&&(t=En(e.slice(s)),e=e.slice(0,s)),I(n)?(A=n,n=void 0):n&&"object"==typeof n&&(l="POST"),o.length>0&&M.ajax({url:e,type:l||"GET",dataType:"html",data:n}).done((function(e){i=arguments,o.html(t?M("<div>").append(M.parseHTML(e)).find(t):e)})).always(A&&function(e,n){o.each((function(){A.apply(this,i||[e.responseText,n,e])}))}),this},M.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,n){M.fn[n]=function(e){return this.on(n,e)}})),M.expr.pseudos.animated=function(e){return M.grep(M.timers,(function(n){return e===n.elem})).length},M.offset={setOffset:function(e,n,A){var t,l,i,o,s,a,r=M.css(e,"position"),C=M(e),c={};"static"===r&&(e.style.position="relative"),s=C.offset(),i=M.css(e,"top"),a=M.css(e,"left"),("absolute"===r||"fixed"===r)&&(i+a).indexOf("auto")>-1?(o=(t=C.position()).top,l=t.left):(o=parseFloat(i)||0,l=parseFloat(a)||0),I(n)&&(n=n.call(e,A,M.extend({},s))),null!=n.top&&(c.top=n.top-s.top+o),null!=n.left&&(c.left=n.left-s.left+l),"using"in n?n.using.call(e,c):C.css(c)}},M.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(n){M.offset.setOffset(this,e,n)}));var n,A,t=this[0];return t?t.getClientRects().length?(n=t.getBoundingClientRect(),A=t.ownerDocument.defaultView,{top:n.top+A.pageYOffset,left:n.left+A.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,n,A,t=this[0],l={top:0,left:0};if("fixed"===M.css(t,"position"))n=t.getBoundingClientRect();else{for(n=this.offset(),A=t.ownerDocument,e=t.offsetParent||A.documentElement;e&&(e===A.body||e===A.documentElement)&&"static"===M.css(e,"position");)e=e.parentNode;e&&e!==t&&1===e.nodeType&&((l=M(e).offset()).top+=M.css(e,"borderTopWidth",!0),l.left+=M.css(e,"borderLeftWidth",!0))}return{top:n.top-l.top-M.css(t,"marginTop",!0),left:n.left-l.left-M.css(t,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===M.css(e,"position");)e=e.offsetParent;return e||oe}))}}),M.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,n){var A="pageYOffset"===n;M.fn[e]=function(t){return W(this,(function(e,t,l){var i;if(g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===l)return i?i[n]:e[t];i?i.scrollTo(A?i.pageXOffset:l,A?l:i.pageYOffset):e[t]=l}),e,t,arguments.length)}})),M.each(["top","left"],(function(e,n){M.cssHooks[n]=qe(f.pixelPosition,(function(e,A){if(A)return A=Fe(e,n),je.test(A)?M(e).position()[n]+"px":A}))})),M.each({Height:"height",Width:"width"},(function(e,n){M.each({padding:"inner"+e,content:n,"":"outer"+e},(function(A,t){M.fn[t]=function(l,i){var o=arguments.length&&(A||"boolean"!=typeof l),s=A||(!0===l||!0===i?"margin":"border");return W(this,(function(n,A,l){var i;return g(n)?0===t.indexOf("outer")?n["inner"+e]:n.document.documentElement["client"+e]:9===n.nodeType?(i=n.documentElement,Math.max(n.body["scroll"+e],i["scroll"+e],n.body["offset"+e],i["offset"+e],i["client"+e])):void 0===l?M.css(n,A,s):M.style(n,A,l,s)}),n,o?l:void 0,o)}}))})),M.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,n){M.fn[n]=function(e,A){return arguments.length>0?this.on(n,null,e,A):this.trigger(n)}})),M.fn.extend({hover:function(e,n){return this.mouseenter(e).mouseleave(n||e)}}),M.fn.extend({bind:function(e,n,A){return this.on(e,null,n,A)},unbind:function(e,n){return this.off(e,null,n)},delegate:function(e,n,A,t){return this.on(n,e,A,t)},undelegate:function(e,n,A){return 1===arguments.length?this.off(e,"**"):this.off(n,e||"**",A)}}),M.proxy=function(e,n){var A,t,l;if("string"==typeof n&&(A=e[n],n=e,e=A),I(e))return t=a.call(arguments,2),(l=function(){return e.apply(n||this,t.concat(a.call(arguments)))}).guid=e.guid=e.guid||M.guid++,l},M.holdReady=function(e){e?M.readyWait++:M.ready(!0)},M.isArray=Array.isArray,M.parseJSON=JSON.parse,M.nodeName=Q,M.isFunction=I,M.isWindow=g,M.camelCase=z,M.type=b,M.now=Date.now,M.isNumeric=function(e){var n=M.type(e);return("number"===n||"string"===n)&&!isNaN(e-parseFloat(e))},void 0===(t=function(){return M}.apply(n,[]))||(e.exports=t);var Zn=A.jQuery,eA=A.$;return M.noConflict=function(e){return A.$===M&&(A.$=eA),e&&A.jQuery===M&&(A.jQuery=Zn),M},l||(A.jQuery=A.$=M),M}))},function(e,n,A){var t=A(2),l=A(7);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.i,l,""]]);var i={insert:"head",singleton:!1},o=(t(l,i),l.locals?l.locals:{});e.exports=o},function(e,n,A){},function(e,n,A){const t=A(9);t.keys().forEach(t)},function(e,n,A){var t={"./android-chrome-192x192.png":10,"./android-chrome-512x512.png":11,"./apple-touch-icon.png":12,"./browserconfig.xml":13,"./favicon-16x16.png":14,"./favicon-32x32.png":15,"./favicon.ico":16,"./mstile-150x150.png":17,"./safari-favicon.svg":18,"./safari-pinned-tab.svg":19};function l(e){var n=i(e);return A(n)}function i(e){if(!A.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}l.keys=function(){return Object.keys(t)},l.resolve=i,e.exports=l,l.id=9},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/android-chrome-192x192.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/android-chrome-512x512.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/apple-touch-icon.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/browserconfig.xml"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon-16x16.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon-32x32.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/favicon.ico"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/mstile-150x150.png"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/safari-favicon.svg"},function(e,n,A){"use strict";A.r(n),n.default=A.p+"assets/favicons/safari-pinned-tab.svg"},function(e,n,A){var t=A(2),l=A(21);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.i,l,""]]);var i={insert:"head",singleton:!1},o=(t(l,i),l.locals?l.locals:{});e.exports=o},function(e,n,A){},function(e,n,A){"use strict";A.r(n);A(20);var t,l,i,o,s,a,r=A(1),C=A(0),c=A.n(C),u=(t="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",l="d5d659f69139eda23c53e8758ed0d425e73a6b90",i=new(0,function(){}.constructor)("return this")(),s={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",statementMap:{0:{start:{line:1,column:17},end:{line:6,column:1}},1:{start:{line:2,column:12},end:{line:2,column:28}},2:{start:{line:2,column:34},end:{line:2,column:125}},3:{start:{line:3,column:4},end:{line:4,column:150}},4:{start:{line:3,column:79},end:{line:3,column:131}},5:{start:{line:4,column:9},end:{line:4,column:150}},6:{start:{line:4,column:58},end:{line:4,column:150}},7:{start:{line:4,column:81},end:{line:4,column:150}},8:{start:{line:5,column:4},end:{line:5,column:66}},9:{start:{line:10,column:8},end:{line:10,column:58}},10:{start:{line:11,column:8},end:{line:11,column:25}},11:{start:{line:12,column:8},end:{line:12,column:25}},12:{start:{line:13,column:8},end:{line:13,column:52}},13:{start:{line:14,column:8},end:{line:14,column:64}},14:{start:{line:15,column:8},end:{line:15,column:58}},15:{start:{line:16,column:8},end:{line:16,column:62}},16:{start:{line:17,column:8},end:{line:17,column:26}},17:{start:{line:20,column:8},end:{line:20,column:107}},18:{start:{line:20,column:48},end:{line:20,column:103}},19:{start:{line:21,column:8},end:{line:21,column:107}},20:{start:{line:21,column:48},end:{line:21,column:103}},21:{start:{line:22,column:8},end:{line:22,column:56}},22:{start:{line:23,column:8},end:{line:25,column:9}},23:{start:{line:24,column:12},end:{line:24,column:57}},24:{start:{line:26,column:8},end:{line:28,column:9}},25:{start:{line:27,column:12},end:{line:27,column:51}},26:{start:{line:29,column:8},end:{line:31,column:9}},27:{start:{line:30,column:12},end:{line:30,column:55}},28:{start:{line:34,column:8},end:{line:34,column:27}},29:{start:{line:37,column:8},end:{line:37,column:27}},30:{start:{line:40,column:8},end:{line:40,column:25}},31:{start:{line:43,column:8},end:{line:43,column:37}},32:{start:{line:46,column:8},end:{line:46,column:31}},33:{start:{line:49,column:8},end:{line:49,column:35}},34:{start:{line:53,column:8},end:{line:53,column:29}},35:{start:{line:54,column:8},end:{line:54,column:57}},36:{start:{line:55,column:8},end:{line:55,column:42}},37:{start:{line:56,column:8},end:{line:56,column:70}},38:{start:{line:57,column:30},end:{line:57,column:102}},39:{start:{line:58,column:8},end:{line:59,column:53}},40:{start:{line:59,column:12},end:{line:59,column:53}},41:{start:{line:60,column:8},end:{line:60,column:34}},42:{start:{line:61,column:8},end:{line:61,column:33}},43:{start:{line:62,column:8},end:{line:62,column:31}},44:{start:{line:63,column:8},end:{line:63,column:41}},45:{start:{line:64,column:8},end:{line:64,column:35}},46:{start:{line:65,column:8},end:{line:65,column:39}},47:{start:{line:66,column:8},end:{line:66,column:26}},48:{start:{line:67,column:8},end:{line:67,column:32}},49:{start:{line:68,column:8},end:{line:68,column:28}},50:{start:{line:71,column:8},end:{line:71,column:98}},51:{start:{line:71,column:39},end:{line:71,column:96}},52:{start:{line:72,column:8},end:{line:72,column:98}},53:{start:{line:72,column:39},end:{line:72,column:96}},54:{start:{line:73,column:8},end:{line:73,column:68}},55:{start:{line:74,column:8},end:{line:74,column:95}},56:{start:{line:75,column:8},end:{line:75,column:83}},57:{start:{line:76,column:8},end:{line:76,column:97}},58:{start:{line:79,column:26},end:{line:79,column:79}},59:{start:{line:79,column:53},end:{line:79,column:78}},60:{start:{line:80,column:8},end:{line:80,column:41}},61:{start:{line:83,column:26},end:{line:83,column:79}},62:{start:{line:83,column:53},end:{line:83,column:78}},63:{start:{line:84,column:8},end:{line:84,column:41}},64:{start:{line:87,column:24},end:{line:87,column:53}},65:{start:{line:88,column:8},end:{line:88,column:37}},66:{start:{line:91,column:31},end:{line:91,column:68}},67:{start:{line:92,column:8},end:{line:92,column:51}},68:{start:{line:95,column:25},end:{line:95,column:56}},69:{start:{line:96,column:8},end:{line:101,column:9}},70:{start:{line:97,column:12},end:{line:97,column:36}},71:{start:{line:100,column:12},end:{line:100,column:49}},72:{start:{line:102,column:8},end:{line:102,column:39}},73:{start:{line:105,column:27},end:{line:105,column:62}},74:{start:{line:106,column:8},end:{line:106,column:42}},75:{start:{line:109,column:8},end:{line:121,column:11}},76:{start:{line:110,column:12},end:{line:113,column:13}},77:{start:{line:111,column:35},end:{line:111,column:44}},78:{start:{line:112,column:16},end:{line:112,column:98}},79:{start:{line:112,column:56},end:{line:112,column:94}},80:{start:{line:114,column:12},end:{line:117,column:13}},81:{start:{line:115,column:31},end:{line:115,column:61}},82:{start:{line:116,column:16},end:{line:116,column:98}},83:{start:{line:116,column:56},end:{line:116,column:94}},84:{start:{line:118,column:12},end:{line:120,column:13}},85:{start:{line:119,column:16},end:{line:119,column:57}},86:{start:{line:124,column:22},end:{line:124,column:49}},87:{start:{line:125,column:8},end:{line:125,column:50}},88:{start:{line:126,column:8},end:{line:126,column:36}},89:{start:{line:127,column:25},end:{line:127,column:56}},90:{start:{line:128,column:25},end:{line:128,column:56}},91:{start:{line:129,column:8},end:{line:129,column:53}},92:{start:{line:130,column:8},end:{line:130,column:53}},93:{start:{line:131,column:8},end:{line:131,column:33}},94:{start:{line:132,column:8},end:{line:132,column:33}},95:{start:{line:133,column:8},end:{line:133,column:60}},96:{start:{line:134,column:8},end:{line:134,column:43}},97:{start:{line:137,column:22},end:{line:137,column:49}},98:{start:{line:138,column:8},end:{line:138,column:50}},99:{start:{line:139,column:8},end:{line:139,column:35}},100:{start:{line:140,column:25},end:{line:140,column:56}},101:{start:{line:141,column:25},end:{line:141,column:56}},102:{start:{line:142,column:8},end:{line:142,column:83}},103:{start:{line:143,column:8},end:{line:143,column:83}},104:{start:{line:144,column:8},end:{line:144,column:33}},105:{start:{line:145,column:8},end:{line:145,column:33}},106:{start:{line:146,column:8},end:{line:146,column:50}},107:{start:{line:147,column:8},end:{line:147,column:45}},108:{start:{line:148,column:8},end:{line:152,column:9}},109:{start:{line:149,column:12},end:{line:149,column:69}},110:{start:{line:150,column:12},end:{line:150,column:69}},111:{start:{line:151,column:12},end:{line:151,column:47}},112:{start:{line:155,column:22},end:{line:155,column:49}},113:{start:{line:156,column:8},end:{line:156,column:50}},114:{start:{line:157,column:8},end:{line:157,column:33}},115:{start:{line:158,column:8},end:{line:158,column:54}},116:{start:{line:159,column:8},end:{line:159,column:34}},117:{start:{line:160,column:8},end:{line:160,column:51}},118:{start:{line:163,column:22},end:{line:163,column:49}},119:{start:{line:164,column:8},end:{line:164,column:50}},120:{start:{line:165,column:8},end:{line:165,column:37}},121:{start:{line:166,column:8},end:{line:166,column:66}},122:{start:{line:167,column:8},end:{line:167,column:48}},123:{start:{line:168,column:8},end:{line:168,column:63}},124:{start:{line:171,column:22},end:{line:171,column:49}},125:{start:{line:172,column:8},end:{line:172,column:50}},126:{start:{line:173,column:8},end:{line:173,column:34}},127:{start:{line:174,column:8},end:{line:174,column:60}},128:{start:{line:175,column:8},end:{line:175,column:42}},129:{start:{line:176,column:8},end:{line:176,column:57}},130:{start:{line:179,column:22},end:{line:179,column:49}},131:{start:{line:180,column:8},end:{line:180,column:50}},132:{start:{line:181,column:8},end:{line:181,column:40}},133:{start:{line:182,column:8},end:{line:182,column:64}},134:{start:{line:183,column:8},end:{line:183,column:46}},135:{start:{line:184,column:8},end:{line:184,column:61}},136:{start:{line:187,column:0},end:{line:189,column:55}},137:{start:{line:190,column:0},end:{line:192,column:55}},138:{start:{line:193,column:0},end:{line:195,column:53}},139:{start:{line:196,column:0},end:{line:198,column:60}},140:{start:{line:199,column:0},end:{line:201,column:54}},141:{start:{line:202,column:0},end:{line:204,column:64}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:1,column:46},end:{line:1,column:47}},loc:{start:{line:1,column:87},end:{line:6,column:1}},line:1},1:{name:"(anonymous_1)",decl:{start:{line:9,column:4},end:{line:9,column:5}},loc:{start:{line:9,column:24},end:{line:18,column:5}},line:9},2:{name:"(anonymous_2)",decl:{start:{line:19,column:4},end:{line:19,column:5}},loc:{start:{line:19,column:23},end:{line:32,column:5}},line:19},3:{name:"(anonymous_3)",decl:{start:{line:20,column:28},end:{line:20,column:29}},loc:{start:{line:20,column:46},end:{line:20,column:105}},line:20},4:{name:"(anonymous_4)",decl:{start:{line:21,column:28},end:{line:21,column:29}},loc:{start:{line:21,column:46},end:{line:21,column:105}},line:21},5:{name:"(anonymous_5)",decl:{start:{line:33,column:4},end:{line:33,column:5}},loc:{start:{line:33,column:22},end:{line:35,column:5}},line:33},6:{name:"(anonymous_6)",decl:{start:{line:36,column:4},end:{line:36,column:5}},loc:{start:{line:36,column:21},end:{line:38,column:5}},line:36},7:{name:"(anonymous_7)",decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:19},end:{line:41,column:5}},line:39},8:{name:"(anonymous_8)",decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:29},end:{line:44,column:5}},line:42},9:{name:"(anonymous_9)",decl:{start:{line:45,column:4},end:{line:45,column:5}},loc:{start:{line:45,column:23},end:{line:47,column:5}},line:45},10:{name:"(anonymous_10)",decl:{start:{line:48,column:4},end:{line:48,column:5}},loc:{start:{line:48,column:27},end:{line:50,column:5}},line:48},11:{name:"(anonymous_11)",decl:{start:{line:51,column:4},end:{line:51,column:5}},loc:{start:{line:51,column:17},end:{line:69,column:5}},line:51},12:{name:"(anonymous_12)",decl:{start:{line:70,column:4},end:{line:70,column:5}},loc:{start:{line:70,column:17},end:{line:77,column:5}},line:70},13:{name:"(anonymous_13)",decl:{start:{line:71,column:28},end:{line:71,column:29}},loc:{start:{line:71,column:39},end:{line:71,column:96}},line:71},14:{name:"(anonymous_14)",decl:{start:{line:72,column:28},end:{line:72,column:29}},loc:{start:{line:72,column:39},end:{line:72,column:96}},line:72},15:{name:"(anonymous_15)",decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:25},end:{line:81,column:5}},line:78},16:{name:"(anonymous_16)",decl:{start:{line:79,column:42},end:{line:79,column:43}},loc:{start:{line:79,column:53},end:{line:79,column:78}},line:79},17:{name:"(anonymous_17)",decl:{start:{line:82,column:4},end:{line:82,column:5}},loc:{start:{line:82,column:25},end:{line:85,column:5}},line:82},18:{name:"(anonymous_18)",decl:{start:{line:83,column:42},end:{line:83,column:43}},loc:{start:{line:83,column:53},end:{line:83,column:78}},line:83},19:{name:"(anonymous_19)",decl:{start:{line:86,column:4},end:{line:86,column:5}},loc:{start:{line:86,column:23},end:{line:89,column:5}},line:86},20:{name:"(anonymous_20)",decl:{start:{line:90,column:4},end:{line:90,column:5}},loc:{start:{line:90,column:30},end:{line:93,column:5}},line:90},21:{name:"(anonymous_21)",decl:{start:{line:94,column:4},end:{line:94,column:5}},loc:{start:{line:94,column:24},end:{line:103,column:5}},line:94},22:{name:"(anonymous_22)",decl:{start:{line:104,column:4},end:{line:104,column:5}},loc:{start:{line:104,column:34},end:{line:107,column:5}},line:104},23:{name:"(anonymous_23)",decl:{start:{line:108,column:4},end:{line:108,column:5}},loc:{start:{line:108,column:19},end:{line:122,column:5}},line:108},24:{name:"(anonymous_24)",decl:{start:{line:109,column:39},end:{line:109,column:40}},loc:{start:{line:109,column:54},end:{line:121,column:9}},line:109},25:{name:"(anonymous_25)",decl:{start:{line:112,column:36},end:{line:112,column:37}},loc:{start:{line:112,column:54},end:{line:112,column:96}},line:112},26:{name:"(anonymous_26)",decl:{start:{line:116,column:36},end:{line:116,column:37}},loc:{start:{line:116,column:54},end:{line:116,column:96}},line:116},27:{name:"(anonymous_27)",decl:{start:{line:123,column:4},end:{line:123,column:5}},loc:{start:{line:123,column:25},end:{line:135,column:5}},line:123},28:{name:"(anonymous_28)",decl:{start:{line:136,column:4},end:{line:136,column:5}},loc:{start:{line:136,column:24},end:{line:153,column:5}},line:136},29:{name:"(anonymous_29)",decl:{start:{line:154,column:4},end:{line:154,column:5}},loc:{start:{line:154,column:22},end:{line:161,column:5}},line:154},30:{name:"(anonymous_30)",decl:{start:{line:162,column:4},end:{line:162,column:5}},loc:{start:{line:162,column:32},end:{line:169,column:5}},line:162},31:{name:"(anonymous_31)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:26},end:{line:177,column:5}},line:170},32:{name:"(anonymous_32)",decl:{start:{line:178,column:4},end:{line:178,column:5}},loc:{start:{line:178,column:30},end:{line:185,column:5}},line:178}},branchMap:{0:{loc:{start:{line:1,column:17},end:{line:6,column:1}},type:"binary-expr",locations:[{start:{line:1,column:18},end:{line:1,column:22}},{start:{line:1,column:26},end:{line:1,column:41}},{start:{line:1,column:46},end:{line:6,column:1}}],line:1},1:{loc:{start:{line:2,column:34},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:42},end:{line:2,column:48}},{start:{line:2,column:51},end:{line:2,column:125}}],line:2},2:{loc:{start:{line:2,column:51},end:{line:2,column:125}},type:"cond-expr",locations:[{start:{line:2,column:67},end:{line:2,column:118}},{start:{line:2,column:121},end:{line:2,column:125}}],line:2},3:{loc:{start:{line:3,column:4},end:{line:4,column:150}},type:"if",locations:[{start:{line:3,column:4},end:{line:4,column:150}},{start:{line:3,column:4},end:{line:4,column:150}}],line:3},4:{loc:{start:{line:3,column:8},end:{line:3,column:77}},type:"binary-expr",locations:[{start:{line:3,column:8},end:{line:3,column:35}},{start:{line:3,column:39},end:{line:3,column:77}}],line:3},5:{loc:{start:{line:4,column:58},end:{line:4,column:150}},type:"if",locations:[{start:{line:4,column:58},end:{line:4,column:150}},{start:{line:4,column:58},end:{line:4,column:150}}],line:4},6:{loc:{start:{line:4,column:85},end:{line:4,column:149}},type:"binary-expr",locations:[{start:{line:4,column:86},end:{line:4,column:143}},{start:{line:4,column:148},end:{line:4,column:149}}],line:4},7:{loc:{start:{line:4,column:86},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:94},end:{line:4,column:98}},{start:{line:4,column:101},end:{line:4,column:143}}],line:4},8:{loc:{start:{line:4,column:101},end:{line:4,column:143}},type:"cond-expr",locations:[{start:{line:4,column:109},end:{line:4,column:126}},{start:{line:4,column:129},end:{line:4,column:143}}],line:4},9:{loc:{start:{line:5,column:11},end:{line:5,column:62}},type:"binary-expr",locations:[{start:{line:5,column:11},end:{line:5,column:16}},{start:{line:5,column:20},end:{line:5,column:21}},{start:{line:5,column:25},end:{line:5,column:62}}],line:5},10:{loc:{start:{line:23,column:8},end:{line:25,column:9}},type:"if",locations:[{start:{line:23,column:8},end:{line:25,column:9}},{start:{line:23,column:8},end:{line:25,column:9}}],line:23},11:{loc:{start:{line:26,column:8},end:{line:28,column:9}},type:"if",locations:[{start:{line:26,column:8},end:{line:28,column:9}},{start:{line:26,column:8},end:{line:28,column:9}}],line:26},12:{loc:{start:{line:29,column:8},end:{line:31,column:9}},type:"if",locations:[{start:{line:29,column:8},end:{line:31,column:9}},{start:{line:29,column:8},end:{line:31,column:9}}],line:29},13:{loc:{start:{line:57,column:30},end:{line:57,column:102}},type:"cond-expr",locations:[{start:{line:57,column:77},end:{line:57,column:83}},{start:{line:57,column:86},end:{line:57,column:102}}],line:57},14:{loc:{start:{line:57,column:30},end:{line:57,column:74}},type:"binary-expr",locations:[{start:{line:57,column:30},end:{line:57,column:57}},{start:{line:57,column:61},end:{line:57,column:74}}],line:57},15:{loc:{start:{line:58,column:8},end:{line:59,column:53}},type:"if",locations:[{start:{line:58,column:8},end:{line:59,column:53}},{start:{line:58,column:8},end:{line:59,column:53}}],line:58},16:{loc:{start:{line:96,column:8},end:{line:101,column:9}},type:"if",locations:[{start:{line:96,column:8},end:{line:101,column:9}},{start:{line:96,column:8},end:{line:101,column:9}}],line:96},17:{loc:{start:{line:110,column:12},end:{line:113,column:13}},type:"if",locations:[{start:{line:110,column:12},end:{line:113,column:13}},{start:{line:110,column:12},end:{line:113,column:13}}],line:110},18:{loc:{start:{line:114,column:12},end:{line:117,column:13}},type:"if",locations:[{start:{line:114,column:12},end:{line:117,column:13}},{start:{line:114,column:12},end:{line:117,column:13}}],line:114},19:{loc:{start:{line:114,column:16},end:{line:114,column:74}},type:"binary-expr",locations:[{start:{line:114,column:16},end:{line:114,column:43}},{start:{line:114,column:47},end:{line:114,column:74}}],line:114},20:{loc:{start:{line:118,column:12},end:{line:120,column:13}},type:"if",locations:[{start:{line:118,column:12},end:{line:120,column:13}},{start:{line:118,column:12},end:{line:120,column:13}}],line:118},21:{loc:{start:{line:148,column:8},end:{line:152,column:9}},type:"if",locations:[{start:{line:148,column:8},end:{line:152,column:9}},{start:{line:148,column:8},end:{line:152,column:9}}],line:148}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0,33:0,34:0,35:0,36:0,37:0,38:0,39:0,40:0,41:0,42:0,43:0,44:0,45:0,46:0,47:0,48:0,49:0,50:0,51:0,52:0,53:0,54:0,55:0,56:0,57:0,58:0,59:0,60:0,61:0,62:0,63:0,64:0,65:0,66:0,67:0,68:0,69:0,70:0,71:0,72:0,73:0,74:0,75:0,76:0,77:0,78:0,79:0,80:0,81:0,82:0,83:0,84:0,85:0,86:0,87:0,88:0,89:0,90:0,91:0,92:0,93:0,94:0,95:0,96:0,97:0,98:0,99:0,100:0,101:0,102:0,103:0,104:0,105:0,106:0,107:0,108:0,109:0,110:0,111:0,112:0,113:0,114:0,115:0,116:0,117:0,118:0,119:0,120:0,121:0,122:0,123:0,124:0,125:0,126:0,127:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:0,136:0,137:0,138:0,139:0,140:0,141:0},f:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,24:0,25:0,26:0,27:0,28:0,29:0,30:0,31:0,32:0},b:{0:[0,0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0],5:[0,0],6:[0,0],7:[0,0],8:[0,0],9:[0,0,0],10:[0,0],11:[0,0],12:[0,0],13:[0,0],14:[0,0],15:[0,0],16:[0,0],17:[0,0],18:[0,0],19:[0,0],20:[0,0],21:[0,0]},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/ControlPanel/ControlPanel.ts"],names:[],mappings:"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",sourcesContent:["import bind from 'bind-decorator';\nimport Facade from '../../presenter/Facade';\nimport { sliderOptions } from '../../model/sliderOptions';\n\n\nexport default class ControlPanel {\n  private slider!: Facade;\n\n  private parent!: Node | null;\n\n  private controlPanel = document.createElement('div');\n\n  private minMax: HTMLInputElement[] = [];\n\n  private values: HTMLInputElement[] = [];\n\n  private step = document.createElement('input');\n\n  private orientationCheck = document.createElement('input');\n\n  private rangeCheck = document.createElement('input');\n\n  private showLabelCheck = document.createElement('input');\n\n  private hasRange!: boolean;\n\n  constructor(slider: Facade) {\n    this.init(slider);\n  }\n\n  public getSliderOptions(): void {\n    this.minMax.forEach((input, index) => { (input.value = String(this.slider.getMinMax()[index])); });\n    this.values.forEach((input, index) => { (input.value = String(this.slider.getValues()[index])); });\n    this.step.value = String(this.slider.getStep());\n    if (this.slider.getOrientation()) {\n      this.getOrientationCheckbox().checked = true;\n    }\n    if (this.slider.getRange()) {\n      this.getRangeCheckbox().checked = true;\n    }\n    if (this.slider.getLabels()) {\n      this.getShowLabelCheckbox().checked = true;\n    }\n  }\n\n  public getMinMaxInputs(): HTMLInputElement[] {\n    return this.minMax;\n  }\n\n  public getValueInputs(): HTMLInputElement[] {\n    return this.values;\n  }\n\n  public getStepInput(): HTMLInputElement {\n    return this.step;\n  }\n\n  public getOrientationCheckbox(): HTMLInputElement {\n    return this.orientationCheck;\n  }\n\n  public getRangeCheckbox(): HTMLInputElement {\n    return this.rangeCheck;\n  }\n\n  public getShowLabelCheckbox(): HTMLInputElement {\n    return this.showLabelCheck;\n  }\n\n  private init(slider: Facade): void {\n    this.slider = slider;\n    this.parent = this.slider.getParent().parentNode;\n    this.hasRange = slider.getRange();\n    this.controlPanel.classList.add('demo-slider__control-panel');\n    const parentElement = this.parent?.parentElement;\n    if (parentElement) parentElement.prepend(this.controlPanel);\n    this.createMaxMinInputs();\n    this.createValueInputs();\n    this.createStepInput();\n    this.createOrientationCheckbox();\n    this.createRangeCheckbox();\n    this.createShowLabelCheckbox();\n    this.bindEvents();\n    this.getSliderOptions();\n    this.updateValues();\n  }\n\n  private bindEvents(): void {\n    this.minMax.forEach((input) => input.addEventListener('change', this.handleMinMaxChange));\n    this.values.forEach((input) => input.addEventListener('change', this.handleValuesChange));\n    this.step.addEventListener('change', this.handleStepChange);\n    this.getOrientationCheckbox().addEventListener('change', this.handleOrientationChange);\n    this.getRangeCheckbox().addEventListener('change', this.handleRangeChange);\n    this.getShowLabelCheckbox().addEventListener('change', this.handleLabelVisibilityChange);\n  }\n\n  @bind\n  private handleMinMaxChange(): void {\n    const newMinMax = this.minMax.map((input) => parseInt(input.value, 10));\n    this.slider.setMinMax(newMinMax);\n  }\n\n  @bind\n  private handleValuesChange(): void {\n    const newValues = this.values.map((input) => parseInt(input.value, 10));\n    this.slider.setValues(newValues);\n  }\n\n  @bind\n  private handleStepChange(): void {\n    const newStep = parseInt(this.step.value, 10);\n    this.slider.setStep(newStep);\n  }\n\n  @bind\n  private handleOrientationChange(): void {\n    const newOrientation = this.getOrientationCheckbox().checked;\n    this.slider.setOrientation(newOrientation);\n  }\n\n  @bind\n  private handleRangeChange(): void {\n    const newRange = this.getRangeCheckbox().checked;\n    if (!newRange) {\n      this.values[1].remove();\n    } else {\n      this.values[0].after(this.values[1]);\n    }\n    this.slider.setRange(newRange);\n  }\n\n  @bind\n  private handleLabelVisibilityChange(): void {\n    const showLabels = this.getShowLabelCheckbox().checked;\n    this.slider.setLabels(showLabels);\n  }\n\n  private updateValues(): void {\n    this.slider.observer.subscribe((valueData: sliderOptions) => {\n      if (valueData.values) {\n        const { values } = valueData;\n        this.values.forEach((input, index) => { (input.value = String(values[index])); });\n      }\n      if (valueData.min !== undefined && valueData.max !== undefined) {\n        const minMax = [valueData.min, valueData.max];\n        this.minMax.forEach((input, index) => { (input.value = String(minMax[index])); });\n      }\n      if (valueData.step !== undefined) {\n        this.step.value = String(valueData.step);\n      }\n    });\n  }\n\n  private createMaxMinInputs(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Min/Max';\n    const inputMin = document.createElement('input');\n    const inputMax = document.createElement('input');\n    inputMin.classList.add('demo-slider__input');\n    inputMax.classList.add('demo-slider__input');\n    inputMin.type = 'number';\n    inputMax.type = 'number';\n    this.controlPanel.append(title, inputMin, inputMax);\n    this.minMax = [inputMin, inputMax];\n  }\n\n  private createValueInputs(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Values';\n    const inputMin = document.createElement('input');\n    const inputMax = document.createElement('input');\n    inputMin.classList.add('demo-slider__input', 'demo-slider__handler-value');\n    inputMax.classList.add('demo-slider__input', 'demo-slider__handler-value');\n    inputMin.type = 'number';\n    inputMax.type = 'number';\n    this.controlPanel.append(title, inputMin);\n    this.values.push(inputMin, inputMax);\n    if (this.hasRange === true) {\n      inputMin.classList.add('demo-slider__handler-value_min');\n      inputMax.classList.add('demo-slider__handler-value_max');\n      this.controlPanel.append(inputMax);\n    }\n  }\n\n  private createStepInput(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Step';\n    this.step.classList.add('demo-slider__input');\n    this.step.type = 'number';\n    this.controlPanel.append(title, this.step);\n  }\n\n  private createOrientationCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Vertical';\n    this.orientationCheck.classList.add('demo-slider__input');\n    this.orientationCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.orientationCheck);\n  }\n\n  private createRangeCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Range';\n    this.rangeCheck.classList.add('demo-slider__input');\n    this.rangeCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.rangeCheck);\n  }\n\n  private createShowLabelCheckbox(): void {\n    const title = document.createElement('p');\n    title.classList.add('demo-slider__title');\n    title.innerText = 'Show labels';\n    this.showLabelCheck.classList.add('demo-slider__input');\n    this.showLabelCheck.type = 'checkbox';\n    this.controlPanel.append(title, this.showLabelCheck);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},(a=i[o="__coverage__"]||(i[o]={}))[t]&&a[t].hash===l?a[t]:(s.hash=l,a[t]=s)),d=(u.s[0]++,void u.b[0][0]++&&(u.b[0][1]++,(void 0).__decorate)||(u.b[0][2]++,function(e,n,A,t){u.f[0]++;var l,i=(u.s[1]++,arguments.length),o=(u.s[2]++,i<3?(u.b[1][0]++,n):(u.b[1][1]++,null===t?(u.b[2][0]++,t=Object.getOwnPropertyDescriptor(n,A)):(u.b[2][1]++,t)));if(u.s[3]++,u.b[4][0]++,"object"==typeof Reflect&&(u.b[4][1]++,"function"==typeof Reflect.decorate))u.b[3][0]++,u.s[4]++,o=Reflect.decorate(e,n,A,t);else{u.b[3][1]++,u.s[5]++;for(var s=e.length-1;s>=0;s--)u.s[6]++,(l=e[s])?(u.b[5][0]++,u.s[7]++,u.b[6][0]++,o=(i<3?(u.b[7][0]++,l(o)):(u.b[7][1]++,i>3?(u.b[8][0]++,l(n,A,o)):(u.b[8][1]++,l(n,A))))||(u.b[6][1]++,o)):u.b[5][1]++}return u.s[8]++,u.b[9][0]++,i>3&&(u.b[9][1]++,o)&&(u.b[9][2]++,Object.defineProperty(n,A,o)),o}));class m{constructor(e){u.f[1]++,u.s[9]++,this.controlPanel=document.createElement("div"),u.s[10]++,this.minMax=[],u.s[11]++,this.values=[],u.s[12]++,this.step=document.createElement("input"),u.s[13]++,this.orientationCheck=document.createElement("input"),u.s[14]++,this.rangeCheck=document.createElement("input"),u.s[15]++,this.showLabelCheck=document.createElement("input"),u.s[16]++,this.init(e)}getSliderOptions(){u.f[2]++,u.s[17]++,this.minMax.forEach((e,n)=>{u.f[3]++,u.s[18]++,e.value=String(this.slider.getMinMax()[n])}),u.s[19]++,this.values.forEach((e,n)=>{u.f[4]++,u.s[20]++,e.value=String(this.slider.getValues()[n])}),u.s[21]++,this.step.value=String(this.slider.getStep()),u.s[22]++,this.slider.getOrientation()?(u.b[10][0]++,u.s[23]++,this.getOrientationCheckbox().checked=!0):u.b[10][1]++,u.s[24]++,this.slider.getRange()?(u.b[11][0]++,u.s[25]++,this.getRangeCheckbox().checked=!0):u.b[11][1]++,u.s[26]++,this.slider.getLabels()?(u.b[12][0]++,u.s[27]++,this.getShowLabelCheckbox().checked=!0):u.b[12][1]++}getMinMaxInputs(){return u.f[5]++,u.s[28]++,this.minMax}getValueInputs(){return u.f[6]++,u.s[29]++,this.values}getStepInput(){return u.f[7]++,u.s[30]++,this.step}getOrientationCheckbox(){return u.f[8]++,u.s[31]++,this.orientationCheck}getRangeCheckbox(){return u.f[9]++,u.s[32]++,this.rangeCheck}getShowLabelCheckbox(){return u.f[10]++,u.s[33]++,this.showLabelCheck}init(e){var n;u.f[11]++,u.s[34]++,this.slider=e,u.s[35]++,this.parent=this.slider.getParent().parentNode,u.s[36]++,this.hasRange=e.getRange(),u.s[37]++,this.controlPanel.classList.add("demo-slider__control-panel");const A=(u.s[38]++,u.b[14][0]++,null===(n=this.parent)||(u.b[14][1]++,void 0===n)?void u.b[13][0]++:(u.b[13][1]++,n.parentElement));u.s[39]++,A?(u.b[15][0]++,u.s[40]++,A.prepend(this.controlPanel)):u.b[15][1]++,u.s[41]++,this.createMaxMinInputs(),u.s[42]++,this.createValueInputs(),u.s[43]++,this.createStepInput(),u.s[44]++,this.createOrientationCheckbox(),u.s[45]++,this.createRangeCheckbox(),u.s[46]++,this.createShowLabelCheckbox(),u.s[47]++,this.bindEvents(),u.s[48]++,this.getSliderOptions(),u.s[49]++,this.updateValues()}bindEvents(){u.f[12]++,u.s[50]++,this.minMax.forEach(e=>(u.f[13]++,u.s[51]++,e.addEventListener("change",this.handleMinMaxChange))),u.s[52]++,this.values.forEach(e=>(u.f[14]++,u.s[53]++,e.addEventListener("change",this.handleValuesChange))),u.s[54]++,this.step.addEventListener("change",this.handleStepChange),u.s[55]++,this.getOrientationCheckbox().addEventListener("change",this.handleOrientationChange),u.s[56]++,this.getRangeCheckbox().addEventListener("change",this.handleRangeChange),u.s[57]++,this.getShowLabelCheckbox().addEventListener("change",this.handleLabelVisibilityChange)}handleMinMaxChange(){u.f[15]++;const e=(u.s[58]++,this.minMax.map(e=>(u.f[16]++,u.s[59]++,parseInt(e.value,10))));u.s[60]++,this.slider.setMinMax(e)}handleValuesChange(){u.f[17]++;const e=(u.s[61]++,this.values.map(e=>(u.f[18]++,u.s[62]++,parseInt(e.value,10))));u.s[63]++,this.slider.setValues(e)}handleStepChange(){u.f[19]++;const e=(u.s[64]++,parseInt(this.step.value,10));u.s[65]++,this.slider.setStep(e)}handleOrientationChange(){u.f[20]++;const e=(u.s[66]++,this.getOrientationCheckbox().checked);u.s[67]++,this.slider.setOrientation(e)}handleRangeChange(){u.f[21]++;const e=(u.s[68]++,this.getRangeCheckbox().checked);u.s[69]++,e?(u.b[16][1]++,u.s[71]++,this.values[0].after(this.values[1])):(u.b[16][0]++,u.s[70]++,this.values[1].remove()),u.s[72]++,this.slider.setRange(e)}handleLabelVisibilityChange(){u.f[22]++;const e=(u.s[73]++,this.getShowLabelCheckbox().checked);u.s[74]++,this.slider.setLabels(e)}updateValues(){u.f[23]++,u.s[75]++,this.slider.observer.subscribe(e=>{if(u.f[24]++,u.s[76]++,e.values){u.b[17][0]++;const{values:n}=(u.s[77]++,e);u.s[78]++,this.values.forEach((e,A)=>{u.f[25]++,u.s[79]++,e.value=String(n[A])})}else u.b[17][1]++;if(u.s[80]++,u.b[19][0]++,void 0!==e.min&&(u.b[19][1]++,void 0!==e.max)){u.b[18][0]++;const n=(u.s[81]++,[e.min,e.max]);u.s[82]++,this.minMax.forEach((e,A)=>{u.f[26]++,u.s[83]++,e.value=String(n[A])})}else u.b[18][1]++;u.s[84]++,void 0!==e.step?(u.b[20][0]++,u.s[85]++,this.step.value=String(e.step)):u.b[20][1]++})}createMaxMinInputs(){u.f[27]++;const e=(u.s[86]++,document.createElement("p"));u.s[87]++,e.classList.add("demo-slider__title"),u.s[88]++,e.innerText="Min/Max";const n=(u.s[89]++,document.createElement("input")),A=(u.s[90]++,document.createElement("input"));u.s[91]++,n.classList.add("demo-slider__input"),u.s[92]++,A.classList.add("demo-slider__input"),u.s[93]++,n.type="number",u.s[94]++,A.type="number",u.s[95]++,this.controlPanel.append(e,n,A),u.s[96]++,this.minMax=[n,A]}createValueInputs(){u.f[28]++;const e=(u.s[97]++,document.createElement("p"));u.s[98]++,e.classList.add("demo-slider__title"),u.s[99]++,e.innerText="Values";const n=(u.s[100]++,document.createElement("input")),A=(u.s[101]++,document.createElement("input"));u.s[102]++,n.classList.add("demo-slider__input","demo-slider__handler-value"),u.s[103]++,A.classList.add("demo-slider__input","demo-slider__handler-value"),u.s[104]++,n.type="number",u.s[105]++,A.type="number",u.s[106]++,this.controlPanel.append(e,n),u.s[107]++,this.values.push(n,A),u.s[108]++,!0===this.hasRange?(u.b[21][0]++,u.s[109]++,n.classList.add("demo-slider__handler-value_min"),u.s[110]++,A.classList.add("demo-slider__handler-value_max"),u.s[111]++,this.controlPanel.append(A)):u.b[21][1]++}createStepInput(){u.f[29]++;const e=(u.s[112]++,document.createElement("p"));u.s[113]++,e.classList.add("demo-slider__title"),u.s[114]++,e.innerText="Step",u.s[115]++,this.step.classList.add("demo-slider__input"),u.s[116]++,this.step.type="number",u.s[117]++,this.controlPanel.append(e,this.step)}createOrientationCheckbox(){u.f[30]++;const e=(u.s[118]++,document.createElement("p"));u.s[119]++,e.classList.add("demo-slider__title"),u.s[120]++,e.innerText="Vertical",u.s[121]++,this.orientationCheck.classList.add("demo-slider__input"),u.s[122]++,this.orientationCheck.type="checkbox",u.s[123]++,this.controlPanel.append(e,this.orientationCheck)}createRangeCheckbox(){u.f[31]++;const e=(u.s[124]++,document.createElement("p"));u.s[125]++,e.classList.add("demo-slider__title"),u.s[126]++,e.innerText="Range",u.s[127]++,this.rangeCheck.classList.add("demo-slider__input"),u.s[128]++,this.rangeCheck.type="checkbox",u.s[129]++,this.controlPanel.append(e,this.rangeCheck)}createShowLabelCheckbox(){u.f[32]++;const e=(u.s[130]++,document.createElement("p"));u.s[131]++,e.classList.add("demo-slider__title"),u.s[132]++,e.innerText="Show labels",u.s[133]++,this.showLabelCheck.classList.add("demo-slider__input"),u.s[134]++,this.showLabelCheck.type="checkbox",u.s[135]++,this.controlPanel.append(e,this.showLabelCheck)}}u.s[136]++,d([c.a],m.prototype,"handleMinMaxChange",null),u.s[137]++,d([c.a],m.prototype,"handleValuesChange",null),u.s[138]++,d([c.a],m.prototype,"handleStepChange",null),u.s[139]++,d([c.a],m.prototype,"handleOrientationChange",null),u.s[140]++,d([c.a],m.prototype,"handleRangeChange",null),u.s[141]++,d([c.a],m.prototype,"handleLabelVisibilityChange",null);var p=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",n="e012f8545b10017807f7fd6fa2d364a37b653f77",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",statementMap:{0:{start:{line:5,column:8},end:{line:5,column:52}},1:{start:{line:6,column:8},end:{line:6,column:59}},2:{start:{line:7,column:8},end:{line:7,column:56}},3:{start:{line:8,column:8},end:{line:8,column:27}},4:{start:{line:11,column:8},end:{line:11,column:31}},5:{start:{line:12,column:8},end:{line:12,column:44}},6:{start:{line:13,column:8},end:{line:13,column:64}},7:{start:{line:14,column:8},end:{line:14,column:53}},8:{start:{line:15,column:8},end:{line:15,column:47}},9:{start:{line:16,column:8},end:{line:16,column:51}},10:{start:{line:17,column:8},end:{line:17,column:47}},11:{start:{line:18,column:23},end:{line:18,column:60}},12:{start:{line:19,column:22},end:{line:19,column:46}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:4,column:4},end:{line:4,column:5}},loc:{start:{line:4,column:25},end:{line:9,column:5}},line:4},1:{name:"(anonymous_1)",decl:{start:{line:10,column:4},end:{line:10,column:5}},loc:{start:{line:10,column:18},end:{line:20,column:5}},line:10}},branchMap:{},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0},f:{0:0,1:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/SliderInit.ts"],names:[],mappings:"AACA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,YAAY,MAAM,6BAA6B,CAAC;AAEvD,MAAM,CAAC,OAAO,OAAO,UAAU;IAS7B,YAAY,OAAsB;QAN1B,WAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEvC,kBAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE9C,eAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAGjD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAEO,IAAI,CAAC,OAAsB;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC7C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,KAAK,GAAiB,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;CACF",sourcesContent:["import { sliderOptions } from '../model/sliderOptions';\nimport Facade from '../presenter/Facade';\nimport ControlPanel from './ControlPanel/ControlPanel';\n\nexport default class SliderInit {\n  private options!: sliderOptions;\n\n  private slider = document.createElement('div');\n\n  private sliderWrapper = document.createElement('div');\n\n  private demoSlider = document.createElement('div');\n\n  constructor(options: sliderOptions) {\n    this.init(options);\n  }\n\n  private init(options: sliderOptions) {\n    this.options = options;\n    this.slider.classList.add('slider');\n    this.sliderWrapper.classList.add('demo-slider__slider');\n    this.demoSlider.classList.add('demo-slider');\n    document.body.prepend(this.demoSlider);\n    this.demoSlider.append(this.sliderWrapper);\n    this.sliderWrapper.append(this.slider);\n    const facade: Facade = new Facade(this.slider, this.options);\n    const panel: ControlPanel = new ControlPanel(facade);\n  }\n}\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();class h{constructor(e){p.f[0]++,p.s[0]++,this.slider=document.createElement("div"),p.s[1]++,this.sliderWrapper=document.createElement("div"),p.s[2]++,this.demoSlider=document.createElement("div"),p.s[3]++,this.init(e)}init(e){p.f[1]++,p.s[4]++,this.options=e,p.s[5]++,this.slider.classList.add("slider"),p.s[6]++,this.sliderWrapper.classList.add("demo-slider__slider"),p.s[7]++,this.demoSlider.classList.add("demo-slider"),p.s[8]++,document.body.prepend(this.demoSlider),p.s[9]++,this.demoSlider.append(this.sliderWrapper),p.s[10]++,this.sliderWrapper.append(this.slider);const n=(p.s[11]++,new r.a(this.slider,this.options));p.s[12]++,new m(n)}}var f=function(){var e="/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",n="01b9e590a41d561a6d497d0d715a3d9a6f5d0388",A=new(0,function(){}.constructor)("return this")(),t="__coverage__",l={path:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",statementMap:{0:{start:{line:3,column:29},end:{line:24,column:1}},1:{start:{line:25,column:0},end:{line:25,column:91}},2:{start:{line:25,column:54},end:{line:25,column:89}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:25,column:29},end:{line:25,column:30}},loc:{start:{line:25,column:54},end:{line:25,column:89}},line:25}},branchMap:{},s:{0:0,1:0,2:0},f:{0:0},b:{},inputSourceMap:{version:3,file:"/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts",sourceRoot:"",sources:["/Users/kseniatrofimova/Desktop/FSD/sliderPlugin/src/demo/demo.ts"],names:[],mappings:"AAAA,OAAO,aAAa,CAAC;AACrB,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,MAAM,oBAAoB,GAAG;IAC3B;QACE,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,EAAE;QACP,IAAI,EAAE,EAAE;QACR,MAAM,EAAE,CAAC,EAAE,CAAC;QACZ,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,KAAK;QACf,UAAU,EAAE,KAAK;KAClB;IACD;QACE,GAAG,EAAE,GAAG;QACR,UAAU,EAAE,IAAI;KACjB;IACD;QACE,GAAG,EAAE,GAAG;KACT;IACD;QACE,GAAG,EAAE,GAAG;QACR,QAAQ,EAAE,IAAI;KACf;CACF,CAAC;AAEF,oBAAoB,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,IAAI,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC",sourcesContent:["import './demo.scss';\nimport SliderInit from './SliderInit';\n\nconst sliderConfigurations = [\n  {\n    max: 100,\n    min: 10,\n    step: 10,\n    values: [30],\n    hasLabels: true,\n    hasRange: false,\n    isVertical: false,\n  },\n  {\n    max: 200,\n    isVertical: true,\n  },\n  {\n    max: 200,\n  },\n  {\n    max: 100,\n    hasRange: true,\n  },\n];\n\nsliderConfigurations.forEach((sliderConfiguration) => new SliderInit(sliderConfiguration));\n"]},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},i=A[t]||(A[t]={});return i[e]&&i[e].hash===n?i[e]:(l.hash=n,i[e]=l)}();const I=(f.s[0]++,[{max:100,min:10,step:10,values:[30],hasLabels:!0,hasRange:!1,isVertical:!1},{max:200,isVertical:!0},{max:200},{max:100,hasRange:!0}]);f.s[1]++,I.forEach(e=>(f.f[0]++,f.s[2]++,new h(e)))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,